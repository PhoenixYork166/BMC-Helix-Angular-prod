{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule, Component } from '@angular/core';\nimport * as i3 from '@ngx-translate/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport * as i1$1 from '@helix/platform/shared/api';\nimport { RX_DESIGNER, RX_DESIGNER_ELEMENT_SHAPE, RxRootInjector } from '@helix/platform/shared/api';\nimport * as i2 from '@helix/platform/process/api';\nimport { RX_PROCESS_DEFINITION } from '@helix/platform/process/api';\nimport { RxProcessAction, RxProcessActionService, RxExpressionInputMapInspectorWidgetComponent, RxProcessActionView, RxExpressionInputMapInspectorWidgetModule, RxProcessActionExpressionConfigurator } from '@helix/platform/process/elements';\nimport { ReplaySubject, of } from 'rxjs';\nimport { pluck, takeUntil, map, distinctUntilChanged, take, switchMap } from 'rxjs/operators';\nimport { reduce, isEqual, chain, isEmpty, assign } from 'lodash';\nimport * as i2$1 from '@helix/platform/utils';\nimport * as i3$1 from '@helix/platform/record/api';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i1 from '@helix/platform/shared/components';\nimport { InspectorWidgetBase, RxDefinitionPickerType, RxDefinitionPickerModule, ExpressionFormControlModule, RX_SELECT_EXPRESSION_DROPDOWN } from '@helix/platform/shared/components';\nimport { RxModalService, RX_MODAL } from '@helix/platform/ui-kit';\nfunction RxGetRecordInputMapInspectorWidgetComponent_div_0_rx_definition_picker_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"rx-definition-picker\", 4);\n    i0.ɵɵlistener(\"ngModelChange\", function RxGetRecordInputMapInspectorWidgetComponent_div_0_rx_definition_picker_2_Template_rx_definition_picker_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const elementModel_r1 = i0.ɵɵnextContext().ngIf;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onSampleRecordDefinitionChange($event, elementModel_r1);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const elementModel_r1 = i0.ɵɵnextContext().ngIf;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"options\", ctx_r2.sampleRecordDefinitionPickerOptions)(\"ngModel\", elementModel_r1.inputMap.sampleRecordDefinitionName);\n  }\n}\nfunction RxGetRecordInputMapInspectorWidgetComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"rx-definition-picker\", 1);\n    i0.ɵɵlistener(\"ngModelChange\", function RxGetRecordInputMapInspectorWidgetComponent_div_0_Template_rx_definition_picker_ngModelChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const elementModel_r1 = restoredCtx.ngIf;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onRecordDefinitionChange($event, elementModel_r1);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, RxGetRecordInputMapInspectorWidgetComponent_div_0_rx_definition_picker_2_Template, 1, 2, \"rx-definition-picker\", 2);\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementStart(4, \"rx-expression-form-control\", 3);\n    i0.ɵɵlistener(\"events\", function RxGetRecordInputMapInspectorWidgetComponent_div_0_Template_rx_expression_form_control_events_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const elementModel_r1 = restoredCtx.ngIf;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.openExpressionEditor(elementModel_r1);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const elementModel_r1 = ctx.ngIf;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"options\", ctx_r0.recordDefinitionPickerOptions)(\"ngModel\", elementModel_r1.inputMap.recordDefinitionName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 6, ctx_r0.isDynamicRecordDefinitionName$));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"options\", ctx_r0.recordIDExpressionOptions)(\"propertyPath\", \"inputMap/recordID\")(\"ngModel\", elementModel_r1.inputMap.recordID);\n  }\n}\nclass RxCreateListProcessAction extends RxProcessAction {\n  initialize(config) {\n    // @ts-ignore\n    super.initialize(config);\n  }\n}\nclass RxCreateListProcessActionService extends RxProcessActionService {\n  constructor(rxProcessDefinitionService, injector) {\n    super(injector);\n    this.rxProcessDefinitionService = rxProcessDefinitionService;\n    this.injector = injector;\n  }\n  getInputMapInspectorWidgetConfig() {\n    return {\n      component: RxExpressionInputMapInspectorWidgetComponent,\n      options: {\n        expressionConfigurator: this.getExpressionConfigurator(),\n        expressionInputMapInspectorOptions: [{\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.create-list.source-list.label'),\n          name: 'Source List'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.create-list.item-to-add.label'),\n          name: 'Item To Add'\n        }]\n      }\n    };\n  }\n  getElementType(actionTypeName) {\n    return this.rxProcessDefinitionService.getServerActionModelType(actionTypeName);\n  }\n  getClass() {\n    return joint.shapes.rx.ProcessActions.createList;\n  }\n}\nRxCreateListProcessActionService.ɵfac = function RxCreateListProcessActionService_Factory(t) {\n  return new (t || RxCreateListProcessActionService)(i0.ɵɵinject(i2.RxProcessDefinitionService), i0.ɵɵinject(i0.Injector));\n};\nRxCreateListProcessActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxCreateListProcessActionService,\n  factory: RxCreateListProcessActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxCreateListProcessActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i2.RxProcessDefinitionService\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass RxCreateListRegistrationModule {\n  constructor(rxCreateListProcessActionService, rxProcessElementRegistryService, translateService) {\n    rxProcessElementRegistryService.register({\n      displayName: translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.create-list.name.label'),\n      elementService: rxCreateListProcessActionService,\n      group: RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n      paletteItem: {\n        border: RX_DESIGNER.paletteItemBorder.solid,\n        icon: {\n          path: RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n          position: RX_DESIGNER.paletteIconPosition.top\n        },\n        label: RX_DESIGNER.paletteItemLabel.inner,\n        shape: RX_DESIGNER.paletteItemShape.rectangle\n      },\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n      shapeClass: RxCreateListProcessAction,\n      shapeType: 'ProcessActions.createList',\n      type: 'rx.ProcessActions.createList',\n      viewShapeClass: RxProcessActionView,\n      viewShapeType: 'ProcessActions.createListView'\n    });\n  }\n}\nRxCreateListRegistrationModule.ɵfac = function RxCreateListRegistrationModule_Factory(t) {\n  return new (t || RxCreateListRegistrationModule)(i0.ɵɵinject(RxCreateListProcessActionService), i0.ɵɵinject(i2.RxProcessElementRegistryService), i0.ɵɵinject(i3.TranslateService));\n};\nRxCreateListRegistrationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxCreateListRegistrationModule,\n  imports: [RxExpressionInputMapInspectorWidgetModule]\n});\nRxCreateListRegistrationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[RxExpressionInputMapInspectorWidgetModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxCreateListRegistrationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RxExpressionInputMapInspectorWidgetModule]\n    }]\n  }], function () {\n    return [{\n      type: RxCreateListProcessActionService\n    }, {\n      type: i2.RxProcessElementRegistryService\n    }, {\n      type: i3.TranslateService\n    }];\n  }, null);\n})();\nconst RX_RECORD_SERVER_ACTION = {\n  dynamicRecordDefinitionNameRegex: /\\${.*}/\n};\nfunction RxRecordServerActionServiceMixin(Base) {\n  return class RxRecordServerActionService extends Base {\n    constructor(...args) {\n      super(...args);\n    }\n    getRecordDefinitionInputMapParam(inputParamName, inputParamValue) {\n      if (inputParamName === 'recordDefinitionName') {\n        if (inputParamValue.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n          return {\n            assignTarget: inputParamName,\n            expression: inputParamValue\n          };\n        } else {\n          return {\n            assignTarget: inputParamName,\n            expression: '\"' + inputParamValue + '\"'\n          };\n        }\n      } else if (inputParamName === 'sampleRecordDefinitionName') {\n        return {\n          assignTarget: inputParamName,\n          expression: '\"' + inputParamValue + '\"'\n        };\n      } else {\n        return super.getDefinitionInputMapParam(inputParamName, inputParamValue);\n      }\n    }\n    getRecordDefinitionNameFromInputMap(inputMap) {\n      let recordDefinitionNameFromInputMap = null;\n      if (inputMap.recordDefinitionName) {\n        if (inputMap.recordDefinitionName.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n          if (inputMap.sampleRecordDefinitionName) {\n            recordDefinitionNameFromInputMap = inputMap.sampleRecordDefinitionName;\n          }\n        } else {\n          recordDefinitionNameFromInputMap = inputMap.recordDefinitionName;\n        }\n      }\n      return recordDefinitionNameFromInputMap;\n    }\n    // TODO-VS: update definition type to use \"IServiceTaskDefinition | ICustomRuleAction\"\n    getRecordInputMapModel(definition) {\n      return reduce((definition === null || definition === void 0 ? void 0 : definition.inputMap) || [], (inputMap, inputMapField) => {\n        const assignTarget = inputMapField.assignTarget;\n        if (assignTarget === 'recordDefinitionName') {\n          if (inputMapField.expression.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n            inputMap[assignTarget] = inputMapField.expression;\n          } else {\n            inputMap[assignTarget] = inputMapField.expression.replace(/^\"|\"$/g, '');\n          }\n        } else if (assignTarget === 'sampleRecordDefinitionName') {\n          inputMap[assignTarget] = inputMapField.expression.replace(/^\"|\"$/g, '');\n        } else {\n          inputMap[assignTarget] = inputMapField.expression;\n        }\n        return inputMap;\n      }, {\n        recordDefinitionName: null,\n        sampleRecordDefinitionName: null,\n        recordID: null\n      });\n    }\n  };\n}\nfunction RxGetRecordServerActionServiceMixin(Base) {\n  return class RxGetRecordServerActionService extends Base {\n    constructor(...args) {\n      super(...args);\n    }\n    getDefinitionInputMapParam(inputParamName, inputParamValue) {\n      return super.getRecordDefinitionInputMapParam(inputParamName, inputParamValue);\n    }\n    // TODO-VS: update definition type to use \"IServiceTaskDefinition | ICustomRuleAction\"\n    getInputMapFromDefinition(definition) {\n      return super.getRecordInputMapModel(definition);\n    }\n  };\n}\nclass RxGetRecordInputMapInspectorWidgetComponent extends InspectorWidgetBase {\n  constructor(rxExpressionEditorService, rxIdService, translateService, injector) {\n    super(injector);\n    this.rxExpressionEditorService = rxExpressionEditorService;\n    this.rxIdService = rxIdService;\n    this.translateService = translateService;\n    this.injector = injector;\n    this.destroyed$ = new ReplaySubject(1);\n  }\n  ngOnInit() {\n    this.elementModel$ = this.designerItemModel.pipe(pluck('elementModel'), takeUntil(this.destroyed$));\n    this.isDynamicRecordDefinitionName$ = this.elementModel$.pipe(map(elementModel => elementModel === null || elementModel === void 0 ? void 0 : elementModel.inputMap.recordDefinitionName), distinctUntilChanged(), map(recordDefinitionName => {\n      return RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex.test(recordDefinitionName);\n    }));\n    this.graph$ = this.designerItemModel.pipe(pluck('graph'), takeUntil(this.destroyed$));\n    this.patchOptions(this.options);\n  }\n  ngOnChanges(changes) {\n    if (!isEqual(changes.options.currentValue, changes.options.previousValue)) {\n      this.patchOptions(changes.options.currentValue);\n    }\n  }\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n  onRecordDefinitionChange(recordDefinitionName, elementModel) {\n    this.graph$.pipe(take(1)).subscribe(graph => {\n      const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n      selectedElementCell.prop(`elementModel/inputMap/recordDefinitionName`, recordDefinitionName);\n    });\n  }\n  onSampleRecordDefinitionChange(sampleRecordDefinitionName, elementModel) {\n    this.graph$.pipe(take(1)).subscribe(graph => {\n      const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n      selectedElementCell.prop(`elementModel/inputMap/sampleRecordDefinitionName`, sampleRecordDefinitionName);\n    });\n  }\n  openExpressionEditor(elementModel) {\n    this.graph$.pipe(take(1)).subscribe(graph => {\n      this.rxExpressionEditorService.openEditor({\n        expressionConfigurator: this.options.expressionConfigurator,\n        isReadOnly: false,\n        legend: [{\n          label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field-name.label'),\n          icon: 'd-icon-arrow_right_square_input'\n        }],\n        property: {\n          path: 'inputMap/recordID',\n          value: elementModel.inputMap.recordID,\n          label: 'Record ID'\n        }\n      }).pipe(takeUntil(this.destroyed$)).subscribe(expression => {\n        const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n        selectedElementCell.prop(`elementModel/inputMap/recordID`, expression.value);\n      });\n    });\n  }\n  patchOptions(options) {\n    this.recordDefinitionPickerOptions = {\n      label: 'Record definition name',\n      definitionType: RxDefinitionPickerType.Record,\n      required: true\n    };\n    this.sampleRecordDefinitionPickerOptions = {\n      label: 'Sample record definition name',\n      definitionType: RxDefinitionPickerType.Record,\n      required: true\n    };\n    this.recordIDExpressionOptions = {\n      label: 'Record ID',\n      dataDictionary$: options.expressionConfigurator.getDataDictionary('inputMap/recordID'),\n      operators: options.expressionConfigurator.getOperators('inputMap/recordID'),\n      isRequired: true\n    };\n  }\n}\nRxGetRecordInputMapInspectorWidgetComponent.ɵfac = function RxGetRecordInputMapInspectorWidgetComponent_Factory(t) {\n  return new (t || RxGetRecordInputMapInspectorWidgetComponent)(i0.ɵɵdirectiveInject(i1.RxExpressionEditorService), i0.ɵɵdirectiveInject(i2$1.RxIdService), i0.ɵɵdirectiveInject(i3.TranslateService), i0.ɵɵdirectiveInject(i0.Injector));\n};\nRxGetRecordInputMapInspectorWidgetComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RxGetRecordInputMapInspectorWidgetComponent,\n  selectors: [[\"rx-get-record-input-map-inspector-widget\"]],\n  features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"name\", \"recordDefinition\", \"rx-id\", \"record-definition\", 3, \"options\", \"ngModel\", \"ngModelChange\"], [\"name\", \"sampleRecordDefinition\", \"rx-id\", \"sample-record-definition\", 3, \"options\", \"ngModel\", \"ngModelChange\", 4, \"ngIf\"], [\"rx-id\", \"record-id\", 3, \"options\", \"propertyPath\", \"ngModel\", \"events\"], [\"name\", \"sampleRecordDefinition\", \"rx-id\", \"sample-record-definition\", 3, \"options\", \"ngModel\", \"ngModelChange\"]],\n  template: function RxGetRecordInputMapInspectorWidgetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RxGetRecordInputMapInspectorWidgetComponent_div_0_Template, 5, 8, \"div\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.elementModel$));\n    }\n  },\n  directives: [i4.NgIf, i1.RxDefinitionPickerComponent, i5.NgControlStatus, i5.NgModel, i1.ExpressionFormControlComponent],\n  pipes: [i4.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]  rx-definition-picker .dropdown{margin-bottom:15px}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxGetRecordInputMapInspectorWidgetComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-get-record-input-map-inspector-widget',\n      templateUrl: './get-record-input-map-inspector-widget.component.html',\n      styleUrls: ['./get-record-input-map-inspector-widget.component.scss']\n    }]\n  }], function () {\n    return [{\n      type: i1.RxExpressionEditorService\n    }, {\n      type: i2$1.RxIdService\n    }, {\n      type: i3.TranslateService\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass RxGetRecordInputMapInspectorWidgetModule {}\nRxGetRecordInputMapInspectorWidgetModule.ɵfac = function RxGetRecordInputMapInspectorWidgetModule_Factory(t) {\n  return new (t || RxGetRecordInputMapInspectorWidgetModule)();\n};\nRxGetRecordInputMapInspectorWidgetModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxGetRecordInputMapInspectorWidgetModule,\n  declarations: [RxGetRecordInputMapInspectorWidgetComponent],\n  imports: [CommonModule, RxDefinitionPickerModule, FormsModule, ExpressionFormControlModule],\n  exports: [RxGetRecordInputMapInspectorWidgetComponent]\n});\nRxGetRecordInputMapInspectorWidgetModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, RxDefinitionPickerModule, FormsModule, ExpressionFormControlModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxGetRecordInputMapInspectorWidgetModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RxGetRecordInputMapInspectorWidgetComponent],\n      imports: [CommonModule, RxDefinitionPickerModule, FormsModule, ExpressionFormControlModule],\n      exports: [RxGetRecordInputMapInspectorWidgetComponent]\n    }]\n  }], null, null);\n})();\nfunction RxRecordServerActionExpressionConfiguratorMixin(Base) {\n  return class RxRecordServerActionExpressionConfigurator extends Base {\n    constructor(...args) {\n      super(...args);\n    }\n    validateInputMapExpression(propertyName, expression) {\n      let isValid = true;\n      if (propertyName === 'recordDefinitionName' && expression && !expression.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n        isValid = false;\n      }\n      return of(isValid);\n    }\n  };\n}\nclass RxGetRecordProcessActionExpressionConfiguratorClass extends RxRecordServerActionExpressionConfiguratorMixin(RxProcessActionExpressionConfigurator) {\n  constructor(injector) {\n    super(injector);\n    this.injector = injector;\n  }\n}\nclass RxGetRecordProcessActionService extends RxGetRecordServerActionServiceMixin(RxRecordServerActionServiceMixin(RxProcessActionService)) {\n  constructor(rxDefinitionNameService, rxProcessDefinitionService, rxRecordDefinitionCacheService, rxTreeService, injector) {\n    super(injector);\n    this.rxDefinitionNameService = rxDefinitionNameService;\n    this.rxProcessDefinitionService = rxProcessDefinitionService;\n    this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;\n    this.rxTreeService = rxTreeService;\n    this.injector = injector;\n  }\n  buildOutputDataDictionaryBranch(model) {\n    const recordDefinitionName = super.getRecordDefinitionNameFromInputMap(model.inputMap);\n    return recordDefinitionName ? this.rxRecordDefinitionCacheService.getRecordAssociationTree(recordDefinitionName).pipe(switchMap(recordAssociationTrees => {\n      const recordDefinitionNames = chain(recordAssociationTrees).map('value').compact().map('recordDefinitionName').push(recordDefinitionName).value();\n      return this.rxRecordDefinitionCacheService.getRecordDefinitions(recordDefinitionNames).pipe(map(recordDefinitions => this.getOutputChildrenBranch(recordDefinitionName, recordAssociationTrees, recordDefinitions)));\n    })) : of(null);\n  }\n  getClass() {\n    return joint.shapes.rx.ProcessActions.getRecord;\n  }\n  getElementType(actionTypeName) {\n    return this.rxProcessDefinitionService.getServerActionModelType(actionTypeName);\n  }\n  getExpressionConfiguratorClass() {\n    return RxGetRecordProcessActionExpressionConfiguratorClass;\n  }\n  getInputMapInspectorWidgetConfig() {\n    return {\n      component: RxGetRecordInputMapInspectorWidgetComponent,\n      options: {\n        expressionConfigurator: this.getExpressionConfigurator()\n      }\n    };\n  }\n  getAssociationsBranch(recordAssociationTree, recordDefinitions, prefix) {\n    return isEmpty(recordAssociationTree) ? null : {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.associations.label'),\n      children: recordAssociationTree.map(association => {\n        let newPrefix = `_associations.${association.value.associationDefintionGuid}.${association.value.nodeSide}[0]`;\n        const recordDefinitionName = association.value.recordDefinitionName;\n        newPrefix = prefix ? `${prefix}.${newPrefix}` : newPrefix;\n        const associationNodeLabel = association.value.nodeName !== recordDefinitionName ? `${this.rxDefinitionNameService.getDisplayName(recordDefinitionName)} (${this.rxDefinitionNameService.getDisplayName(association.value.nodeName)})` : this.rxDefinitionNameService.getDisplayName(recordDefinitionName);\n        return {\n          label: associationNodeLabel,\n          outputPropertyPath: newPrefix,\n          children: this.getAssociationChildren(recordDefinitionName, association.children, recordDefinitions, newPrefix)\n        };\n      })\n    };\n  }\n  getAssociationChildren(recordDefinitionName, recordAssociationTree, recordDefinitions, prefix) {\n    const associationsBranch = this.getAssociationsBranch(recordAssociationTree, recordDefinitions, prefix);\n    const children = chain(recordDefinitions).find({\n      name: recordDefinitionName\n    }).get('fieldDefinitions').map(function (fieldDefinition) {\n      return {\n        label: fieldDefinition.name,\n        outputPropertyPath: `${prefix}.${fieldDefinition.id}`\n      };\n    }).value();\n    if (!isEmpty(associationsBranch)) {\n      children.push(associationsBranch);\n    }\n    return children;\n  }\n  getOutputChildrenBranch(recordDefinitionName, recordAssociationTree, recordDefinitions) {\n    const associationsBranch = this.getAssociationsBranch(recordAssociationTree, recordDefinitions);\n    const children = chain(recordDefinitions).find({\n      name: recordDefinitionName\n    }).get('fieldDefinitions').map(fieldDefinition => ({\n      label: fieldDefinition.name,\n      outputPropertyPath: [fieldDefinition.id, fieldDefinition.name]\n    })).value();\n    if (!isEmpty(associationsBranch)) {\n      children.push(associationsBranch);\n    }\n    return children;\n  }\n}\nRxGetRecordProcessActionService.ɵfac = function RxGetRecordProcessActionService_Factory(t) {\n  return new (t || RxGetRecordProcessActionService)(i0.ɵɵinject(i1$1.RxDefinitionNameService), i0.ɵɵinject(i2.RxProcessDefinitionService), i0.ɵɵinject(i3$1.RxRecordDefinitionCacheService), i0.ɵɵinject(i2$1.RxTreeService), i0.ɵɵinject(i0.Injector));\n};\nRxGetRecordProcessActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxGetRecordProcessActionService,\n  factory: RxGetRecordProcessActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxGetRecordProcessActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxDefinitionNameService\n    }, {\n      type: i2.RxProcessDefinitionService\n    }, {\n      type: i3$1.RxRecordDefinitionCacheService\n    }, {\n      type: i2$1.RxTreeService\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\nfunction RxRecordServerActionMixin(Base) {\n  return class RxRecordServerAction extends Base {\n    initialize(config) {\n      // @ts-ignore\n      super.initialize(config);\n      this.lastRecordDefinitionName = this.getRecordDefinitionName();\n      this.lastSampleRecordDefinitionName = this.getSampleRecordDefinitionName();\n      if (this.lastRecordDefinitionName) {\n        if (this.lastRecordDefinitionName.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n          this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.expression;\n        } else {\n          this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.select;\n        }\n      }\n    }\n    afterRecordDefinitionNameChange(recordDefinitionName) {\n      this.lastRecordDefinitionName = recordDefinitionName;\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n    afterSampleRecordDefinitionNameChange(sampleRecordDefinitionName) {\n      this.lastSampleRecordDefinitionName = sampleRecordDefinitionName;\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n    getRecordDefinitionName() {\n      // @ts-ignore\n      const recordDefinitionName = this.getInputMap().recordDefinitionName;\n      return recordDefinitionName ? recordDefinitionName.replace(/^\"|\"$/g, '') : null;\n    }\n    getRecordDefinitionNameChangeConfirmationMessageKey() {\n      return 'com.bmc.arsys.rx.client.process-designer.inspector.clear-input-output-maps-confirmation.message';\n    }\n    getSampleRecordDefinitionName() {\n      // @ts-ignore\n      const sampleRecordDefinitionName = this.getInputMap().sampleRecordDefinitionName;\n      return sampleRecordDefinitionName ? sampleRecordDefinitionName.replace(/^\"|\"$/g, '') : null;\n    }\n    onInputMapChanged(element, inputMap, inputMapPropertyPath, inputMapPropertyValue, isCommandManagerOperation) {\n      if (inputMapPropertyPath === 'recordDefinitionName') {\n        if (isCommandManagerOperation) {\n          this.lastRecordDefinitionName = inputMapPropertyValue;\n        } else if (inputMapPropertyValue !== this.lastRecordDefinitionName) {\n          // @ts-ignore\n          this.getCommandManager().initBatchCommand();\n          // @ts-ignore\n          if (this.lastRecordDefinitionName) {\n            RxRootInjector.injector.get(RxModalService).confirm({\n              title: RxRootInjector.injector.get(TranslateService).instant('com.bmc.arsys.rx.client.common.warning.label'),\n              modalStyle: RX_MODAL.modalStyles.warning,\n              message: RxRootInjector.injector.get(TranslateService).instant(this.getRecordDefinitionNameChangeConfirmationMessageKey())\n            }).then(context => {\n              if (context) {\n                this.afterRecordDefinitionNameChange(inputMapPropertyValue);\n              } else {\n                // @ts-ignore\n                this.getCommandManager().storeBatchCommand();\n                // @ts-ignore\n                this.getCommandManager().cancel();\n              }\n            }).catch(() => {\n              // @ts-ignore\n              this.getCommandManager().storeBatchCommand();\n              // @ts-ignore\n              this.getCommandManager().cancel();\n            });\n          } else {\n            this.afterRecordDefinitionNameChange(inputMapPropertyValue);\n          }\n        }\n        if (inputMapPropertyValue) {\n          if (inputMapPropertyValue.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n            this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.expression;\n          } else {\n            this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.select;\n          }\n        }\n      }\n      if (inputMapPropertyPath === 'sampleRecordDefinitionName') {\n        if (isCommandManagerOperation) {\n          this.lastSampleRecordDefinitionName = inputMapPropertyValue;\n        } else if (inputMapPropertyValue !== this.lastSampleRecordDefinitionName) {\n          // @ts-ignore\n          this.getCommandManager().initBatchCommand();\n          if (this.lastSampleRecordDefinitionName) {\n            RxRootInjector.injector.get(RxModalService).confirm({\n              title: RxRootInjector.injector.get(TranslateService).instant('com.bmc.arsys.rx.client.common.warning.label'),\n              modalStyle: RX_MODAL.modalStyles.warning,\n              message: RxRootInjector.injector.get(TranslateService).instant(this.getRecordDefinitionNameChangeConfirmationMessageKey())\n            }).then(() => {\n              this.afterSampleRecordDefinitionNameChange(inputMapPropertyValue);\n            }).catch(() => {\n              // @ts-ignore\n              this.getCommandManager().storeBatchCommand();\n              // @ts-ignore\n              this.getCommandManager().cancel();\n            });\n          } else {\n            this.afterSampleRecordDefinitionNameChange(inputMapPropertyValue);\n          }\n        }\n      }\n    }\n  };\n}\nfunction RxGetRecordServerActionMixin(Base) {\n  return class RxGetRecordServerAction extends Base {\n    initialize(config) {\n      // @ts-ignore\n      super.initialize(config);\n    }\n    afterRecordDefinitionNameChange(inputMapPropertyValue) {\n      // @ts-ignore\n      this.lastRecordDefinitionName = inputMapPropertyValue;\n      // @ts-ignore\n      this.clearOutputMap();\n      // @ts-ignore\n      this.setInputMap(\n      // @ts-ignore\n      assign(this.getInputMap(), {\n        // @ts-ignore\n        recordDefinitionName: this.lastRecordDefinitionName,\n        sampleRecordDefinitionName: null,\n        attachmentFieldID: ''\n      }));\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n    afterSampleRecordDefinitionNameChange(inputMapPropertyValue) {\n      // @ts-ignore\n      this.lastSampleRecordDefinitionName = inputMapPropertyValue;\n      // @ts-ignore\n      this.clearOutputMap();\n      // @ts-ignore\n      this.setInputMap(\n      // @ts-ignore\n      assign(this.getInputMap(), {\n        // @ts-ignore\n        recordDefinitionName: this.lastRecordDefinitionName,\n        // @ts-ignore\n        sampleRecordDefinitionName: this.lastSampleRecordDefinitionName\n      }));\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n    getRecordDefinitionNameChangeConfirmationMessageKey() {\n      return 'com.bmc.arsys.rx.client.process-designer.inspector.clear-output-map-confirmation.message';\n    }\n  };\n}\nclass RxGetRecordProcessAction extends RxGetRecordServerActionMixin(RxRecordServerActionMixin(RxProcessAction)) {\n  initialize(config) {\n    // @ts-ignore\n    super.initialize(config);\n  }\n}\nclass RxGetRecordServerActionRegistrationModule {\n  constructor(rxGetRecordProcessActionService, rxProcessElementRegistryService, translateService) {\n    rxProcessElementRegistryService.register({\n      displayName: translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.get-record.name.label'),\n      elementService: rxGetRecordProcessActionService,\n      group: RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n      paletteItem: {\n        border: RX_DESIGNER.paletteItemBorder.solid,\n        icon: {\n          path: RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n          position: RX_DESIGNER.paletteIconPosition.top\n        },\n        label: RX_DESIGNER.paletteItemLabel.inner,\n        shape: RX_DESIGNER.paletteItemShape.rectangle\n      },\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n      shapeClass: RxGetRecordProcessAction,\n      shapeType: 'ProcessActions.getRecord',\n      type: 'rx.ProcessActions.getRecord',\n      viewShapeClass: RxProcessActionView,\n      viewShapeType: 'ProcessActions.getRecordView'\n    });\n  }\n}\nRxGetRecordServerActionRegistrationModule.ɵfac = function RxGetRecordServerActionRegistrationModule_Factory(t) {\n  return new (t || RxGetRecordServerActionRegistrationModule)(i0.ɵɵinject(RxGetRecordProcessActionService), i0.ɵɵinject(i2.RxProcessElementRegistryService), i0.ɵɵinject(i3.TranslateService));\n};\nRxGetRecordServerActionRegistrationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxGetRecordServerActionRegistrationModule,\n  imports: [RxGetRecordInputMapInspectorWidgetModule]\n});\nRxGetRecordServerActionRegistrationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[RxGetRecordInputMapInspectorWidgetModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxGetRecordServerActionRegistrationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RxGetRecordInputMapInspectorWidgetModule]\n    }]\n  }], function () {\n    return [{\n      type: RxGetRecordProcessActionService\n    }, {\n      type: i2.RxProcessElementRegistryService\n    }, {\n      type: i3.TranslateService\n    }];\n  }, null);\n})();\nclass RxRecordServerActionModule {}\nRxRecordServerActionModule.ɵfac = function RxRecordServerActionModule_Factory(t) {\n  return new (t || RxRecordServerActionModule)();\n};\nRxRecordServerActionModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxRecordServerActionModule,\n  imports: [RxGetRecordServerActionRegistrationModule]\n});\nRxRecordServerActionModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[RxGetRecordServerActionRegistrationModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordServerActionModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RxGetRecordServerActionRegistrationModule]\n    }]\n  }], null, null);\n})();\nclass RxServerActionsModule {}\nRxServerActionsModule.ɵfac = function RxServerActionsModule_Factory(t) {\n  return new (t || RxServerActionsModule)();\n};\nRxServerActionsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxServerActionsModule,\n  imports: [RxCreateListRegistrationModule, RxRecordServerActionModule]\n});\nRxServerActionsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[RxCreateListRegistrationModule, RxRecordServerActionModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxServerActionsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RxCreateListRegistrationModule, RxRecordServerActionModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RX_RECORD_SERVER_ACTION, RxCreateListProcessAction, RxCreateListProcessActionService, RxRecordServerActionExpressionConfiguratorMixin, RxRecordServerActionMixin, RxRecordServerActionModule, RxRecordServerActionServiceMixin, RxServerActionsModule };\n//# sourceMappingURL=helix-platform-process-server-actions.js.map","map":{"version":3,"names":["i0","Injectable","NgModule","Component","i3","TranslateService","i1$1","RX_DESIGNER","RX_DESIGNER_ELEMENT_SHAPE","RxRootInjector","i2","RX_PROCESS_DEFINITION","RxProcessAction","RxProcessActionService","RxExpressionInputMapInspectorWidgetComponent","RxProcessActionView","RxExpressionInputMapInspectorWidgetModule","RxProcessActionExpressionConfigurator","ReplaySubject","of","pluck","takeUntil","map","distinctUntilChanged","take","switchMap","reduce","isEqual","chain","isEmpty","assign","i2$1","i3$1","i4","CommonModule","i5","FormsModule","i1","InspectorWidgetBase","RxDefinitionPickerType","RxDefinitionPickerModule","ExpressionFormControlModule","RX_SELECT_EXPRESSION_DROPDOWN","RxModalService","RX_MODAL","RxGetRecordInputMapInspectorWidgetComponent_div_0_rx_definition_picker_2_Template","rf","ctx","_r5","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","RxGetRecordInputMapInspectorWidgetComponent_div_0_rx_definition_picker_2_Template_rx_definition_picker_ngModelChange_0_listener","$event","ɵɵrestoreView","elementModel_r1","ɵɵnextContext","ngIf","ctx_r3","onSampleRecordDefinitionChange","ɵɵelementEnd","ctx_r2","ɵɵproperty","sampleRecordDefinitionPickerOptions","inputMap","sampleRecordDefinitionName","RxGetRecordInputMapInspectorWidgetComponent_div_0_Template","_r8","RxGetRecordInputMapInspectorWidgetComponent_div_0_Template_rx_definition_picker_ngModelChange_1_listener","restoredCtx","ctx_r7","onRecordDefinitionChange","ɵɵtemplate","ɵɵpipe","RxGetRecordInputMapInspectorWidgetComponent_div_0_Template_rx_expression_form_control_events_4_listener","ctx_r9","openExpressionEditor","ctx_r0","ɵɵadvance","recordDefinitionPickerOptions","recordDefinitionName","ɵɵpipeBind1","isDynamicRecordDefinitionName$","recordIDExpressionOptions","recordID","RxCreateListProcessAction","initialize","config","RxCreateListProcessActionService","constructor","rxProcessDefinitionService","injector","getInputMapInspectorWidgetConfig","component","options","expressionConfigurator","getExpressionConfigurator","expressionInputMapInspectorOptions","label","translateService","instant","name","getElementType","actionTypeName","getServerActionModelType","getClass","joint","shapes","rx","ProcessActions","createList","ɵfac","RxCreateListProcessActionService_Factory","t","ɵɵinject","RxProcessDefinitionService","Injector","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","RxCreateListRegistrationModule","rxCreateListProcessActionService","rxProcessElementRegistryService","register","displayName","elementService","group","standardProcessElementGroups","platformActions","paletteItem","border","paletteItemBorder","solid","icon","path","bpmnIcons","gear","position","paletteIconPosition","top","paletteItemLabel","inner","shape","paletteItemShape","rectangle","resourceType","processElementResourceTypes","processAction","shapeClass","shapeType","viewShapeClass","viewShapeType","RxCreateListRegistrationModule_Factory","RxProcessElementRegistryService","ɵmod","ɵɵdefineNgModule","imports","ɵinj","ɵɵdefineInjector","RX_RECORD_SERVER_ACTION","dynamicRecordDefinitionNameRegex","RxRecordServerActionServiceMixin","Base","RxRecordServerActionService","getRecordDefinitionInputMapParam","inputParamName","inputParamValue","match","assignTarget","expression","getDefinitionInputMapParam","getRecordDefinitionNameFromInputMap","recordDefinitionNameFromInputMap","getRecordInputMapModel","definition","inputMapField","replace","RxGetRecordServerActionServiceMixin","RxGetRecordServerActionService","getInputMapFromDefinition","RxGetRecordInputMapInspectorWidgetComponent","rxExpressionEditorService","rxIdService","destroyed$","ngOnInit","elementModel$","designerItemModel","pipe","elementModel","test","graph$","patchOptions","ngOnChanges","changes","currentValue","previousValue","ngOnDestroy","next","complete","subscribe","graph","selectedElementCell","getCell","getBase","guid","prop","openEditor","isReadOnly","legend","property","value","definitionType","Record","required","dataDictionary$","getDataDictionary","operators","getOperators","isRequired","RxGetRecordInputMapInspectorWidgetComponent_Factory","ɵɵdirectiveInject","RxExpressionEditorService","RxIdService","ɵcmp","ɵɵdefineComponent","selectors","features","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","decls","vars","consts","template","RxGetRecordInputMapInspectorWidgetComponent_Template","directives","NgIf","RxDefinitionPickerComponent","NgControlStatus","NgModel","ExpressionFormControlComponent","pipes","AsyncPipe","styles","selector","templateUrl","styleUrls","RxGetRecordInputMapInspectorWidgetModule","RxGetRecordInputMapInspectorWidgetModule_Factory","declarations","exports","RxRecordServerActionExpressionConfiguratorMixin","RxRecordServerActionExpressionConfigurator","validateInputMapExpression","propertyName","isValid","RxGetRecordProcessActionExpressionConfiguratorClass","RxGetRecordProcessActionService","rxDefinitionNameService","rxRecordDefinitionCacheService","rxTreeService","buildOutputDataDictionaryBranch","model","getRecordAssociationTree","recordAssociationTrees","recordDefinitionNames","compact","push","getRecordDefinitions","recordDefinitions","getOutputChildrenBranch","getRecord","getExpressionConfiguratorClass","getAssociationsBranch","recordAssociationTree","prefix","children","association","newPrefix","associationDefintionGuid","nodeSide","associationNodeLabel","nodeName","getDisplayName","outputPropertyPath","getAssociationChildren","associationsBranch","find","get","fieldDefinition","id","RxGetRecordProcessActionService_Factory","RxDefinitionNameService","RxRecordDefinitionCacheService","RxTreeService","RxRecordServerActionMixin","RxRecordServerAction","lastRecordDefinitionName","getRecordDefinitionName","lastSampleRecordDefinitionName","getSampleRecordDefinitionName","selectExpressionDropdownValue","dropDownOptionsValue","select","afterRecordDefinitionNameChange","getCommandManager","storeBatchCommand","afterSampleRecordDefinitionNameChange","getInputMap","getRecordDefinitionNameChangeConfirmationMessageKey","onInputMapChanged","element","inputMapPropertyPath","inputMapPropertyValue","isCommandManagerOperation","initBatchCommand","confirm","title","modalStyle","modalStyles","warning","message","then","context","cancel","catch","RxGetRecordServerActionMixin","RxGetRecordServerAction","clearOutputMap","setInputMap","attachmentFieldID","RxGetRecordProcessAction","RxGetRecordServerActionRegistrationModule","rxGetRecordProcessActionService","RxGetRecordServerActionRegistrationModule_Factory","RxRecordServerActionModule","RxRecordServerActionModule_Factory","RxServerActionsModule","RxServerActionsModule_Factory"],"sources":["C:/projects/innovation-studio-developer/22.1/test210500/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-process-server-actions.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule, Component } from '@angular/core';\nimport * as i3 from '@ngx-translate/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport * as i1$1 from '@helix/platform/shared/api';\nimport { RX_DESIGNER, RX_DESIGNER_ELEMENT_SHAPE, RxRootInjector } from '@helix/platform/shared/api';\nimport * as i2 from '@helix/platform/process/api';\nimport { RX_PROCESS_DEFINITION } from '@helix/platform/process/api';\nimport { RxProcessAction, RxProcessActionService, RxExpressionInputMapInspectorWidgetComponent, RxProcessActionView, RxExpressionInputMapInspectorWidgetModule, RxProcessActionExpressionConfigurator } from '@helix/platform/process/elements';\nimport { ReplaySubject, of } from 'rxjs';\nimport { pluck, takeUntil, map, distinctUntilChanged, take, switchMap } from 'rxjs/operators';\nimport { reduce, isEqual, chain, isEmpty, assign } from 'lodash';\nimport * as i2$1 from '@helix/platform/utils';\nimport * as i3$1 from '@helix/platform/record/api';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i5 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i1 from '@helix/platform/shared/components';\nimport { InspectorWidgetBase, RxDefinitionPickerType, RxDefinitionPickerModule, ExpressionFormControlModule, RX_SELECT_EXPRESSION_DROPDOWN } from '@helix/platform/shared/components';\nimport { RxModalService, RX_MODAL } from '@helix/platform/ui-kit';\n\nclass RxCreateListProcessAction extends RxProcessAction {\n    initialize(config) {\n        // @ts-ignore\n        super.initialize(config);\n    }\n}\n\nclass RxCreateListProcessActionService extends RxProcessActionService {\n    constructor(rxProcessDefinitionService, injector) {\n        super(injector);\n        this.rxProcessDefinitionService = rxProcessDefinitionService;\n        this.injector = injector;\n    }\n    getInputMapInspectorWidgetConfig() {\n        return {\n            component: RxExpressionInputMapInspectorWidgetComponent,\n            options: {\n                expressionConfigurator: this.getExpressionConfigurator(),\n                expressionInputMapInspectorOptions: [\n                    {\n                        label: this.translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.create-list.source-list.label'),\n                        name: 'Source List'\n                    },\n                    {\n                        label: this.translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.create-list.item-to-add.label'),\n                        name: 'Item To Add'\n                    }\n                ]\n            }\n        };\n    }\n    getElementType(actionTypeName) {\n        return this.rxProcessDefinitionService.getServerActionModelType(actionTypeName);\n    }\n    getClass() {\n        return joint.shapes.rx.ProcessActions.createList;\n    }\n}\nRxCreateListProcessActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCreateListProcessActionService, deps: [{ token: i2.RxProcessDefinitionService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxCreateListProcessActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCreateListProcessActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCreateListProcessActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i2.RxProcessDefinitionService }, { type: i0.Injector }]; } });\n\nclass RxCreateListRegistrationModule {\n    constructor(rxCreateListProcessActionService, rxProcessElementRegistryService, translateService) {\n        rxProcessElementRegistryService.register({\n            displayName: translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.create-list.name.label'),\n            elementService: rxCreateListProcessActionService,\n            group: RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n            paletteItem: {\n                border: RX_DESIGNER.paletteItemBorder.solid,\n                icon: {\n                    path: RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n                    position: RX_DESIGNER.paletteIconPosition.top\n                },\n                label: RX_DESIGNER.paletteItemLabel.inner,\n                shape: RX_DESIGNER.paletteItemShape.rectangle\n            },\n            resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n            shapeClass: RxCreateListProcessAction,\n            shapeType: 'ProcessActions.createList',\n            type: 'rx.ProcessActions.createList',\n            viewShapeClass: RxProcessActionView,\n            viewShapeType: 'ProcessActions.createListView'\n        });\n    }\n}\nRxCreateListRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCreateListRegistrationModule, deps: [{ token: RxCreateListProcessActionService }, { token: i2.RxProcessElementRegistryService }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.NgModule });\nRxCreateListRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCreateListRegistrationModule, imports: [RxExpressionInputMapInspectorWidgetModule] });\nRxCreateListRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCreateListRegistrationModule, imports: [[RxExpressionInputMapInspectorWidgetModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCreateListRegistrationModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RxExpressionInputMapInspectorWidgetModule]\n                }]\n        }], ctorParameters: function () { return [{ type: RxCreateListProcessActionService }, { type: i2.RxProcessElementRegistryService }, { type: i3.TranslateService }]; } });\n\nconst RX_RECORD_SERVER_ACTION = {\n    dynamicRecordDefinitionNameRegex: /\\${.*}/\n};\n\nfunction RxRecordServerActionServiceMixin(Base) {\n    return class RxRecordServerActionService extends Base {\n        constructor(...args) {\n            super(...args);\n        }\n        getRecordDefinitionInputMapParam(inputParamName, inputParamValue) {\n            if (inputParamName === 'recordDefinitionName') {\n                if (inputParamValue.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n                    return {\n                        assignTarget: inputParamName,\n                        expression: inputParamValue\n                    };\n                }\n                else {\n                    return {\n                        assignTarget: inputParamName,\n                        expression: '\"' + inputParamValue + '\"'\n                    };\n                }\n            }\n            else if (inputParamName === 'sampleRecordDefinitionName') {\n                return {\n                    assignTarget: inputParamName,\n                    expression: '\"' + inputParamValue + '\"'\n                };\n            }\n            else {\n                return super.getDefinitionInputMapParam(inputParamName, inputParamValue);\n            }\n        }\n        getRecordDefinitionNameFromInputMap(inputMap) {\n            let recordDefinitionNameFromInputMap = null;\n            if (inputMap.recordDefinitionName) {\n                if (inputMap.recordDefinitionName.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n                    if (inputMap.sampleRecordDefinitionName) {\n                        recordDefinitionNameFromInputMap = inputMap.sampleRecordDefinitionName;\n                    }\n                }\n                else {\n                    recordDefinitionNameFromInputMap = inputMap.recordDefinitionName;\n                }\n            }\n            return recordDefinitionNameFromInputMap;\n        }\n        // TODO-VS: update definition type to use \"IServiceTaskDefinition | ICustomRuleAction\"\n        getRecordInputMapModel(definition) {\n            return reduce((definition === null || definition === void 0 ? void 0 : definition.inputMap) || [], (inputMap, inputMapField) => {\n                const assignTarget = inputMapField.assignTarget;\n                if (assignTarget === 'recordDefinitionName') {\n                    if (inputMapField.expression.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n                        inputMap[assignTarget] = inputMapField.expression;\n                    }\n                    else {\n                        inputMap[assignTarget] = inputMapField.expression.replace(/^\"|\"$/g, '');\n                    }\n                }\n                else if (assignTarget === 'sampleRecordDefinitionName') {\n                    inputMap[assignTarget] = inputMapField.expression.replace(/^\"|\"$/g, '');\n                }\n                else {\n                    inputMap[assignTarget] = inputMapField.expression;\n                }\n                return inputMap;\n            }, {\n                recordDefinitionName: null,\n                sampleRecordDefinitionName: null,\n                recordID: null\n            });\n        }\n    };\n}\n\nfunction RxGetRecordServerActionServiceMixin(Base) {\n    return class RxGetRecordServerActionService extends Base {\n        constructor(...args) {\n            super(...args);\n        }\n        getDefinitionInputMapParam(inputParamName, inputParamValue) {\n            return super.getRecordDefinitionInputMapParam(inputParamName, inputParamValue);\n        }\n        // TODO-VS: update definition type to use \"IServiceTaskDefinition | ICustomRuleAction\"\n        getInputMapFromDefinition(definition) {\n            return super.getRecordInputMapModel(definition);\n        }\n    };\n}\n\nclass RxGetRecordInputMapInspectorWidgetComponent extends InspectorWidgetBase {\n    constructor(rxExpressionEditorService, rxIdService, translateService, injector) {\n        super(injector);\n        this.rxExpressionEditorService = rxExpressionEditorService;\n        this.rxIdService = rxIdService;\n        this.translateService = translateService;\n        this.injector = injector;\n        this.destroyed$ = new ReplaySubject(1);\n    }\n    ngOnInit() {\n        this.elementModel$ = this.designerItemModel.pipe(pluck('elementModel'), takeUntil(this.destroyed$));\n        this.isDynamicRecordDefinitionName$ = this.elementModel$.pipe(map((elementModel) => elementModel === null || elementModel === void 0 ? void 0 : elementModel.inputMap.recordDefinitionName), distinctUntilChanged(), map((recordDefinitionName) => {\n            return RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex.test(recordDefinitionName);\n        }));\n        this.graph$ = this.designerItemModel.pipe(pluck('graph'), takeUntil(this.destroyed$));\n        this.patchOptions(this.options);\n    }\n    ngOnChanges(changes) {\n        if (!isEqual(changes.options.currentValue, changes.options.previousValue)) {\n            this.patchOptions(changes.options.currentValue);\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n    }\n    onRecordDefinitionChange(recordDefinitionName, elementModel) {\n        this.graph$.pipe(take(1)).subscribe((graph) => {\n            const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n            selectedElementCell.prop(`elementModel/inputMap/recordDefinitionName`, recordDefinitionName);\n        });\n    }\n    onSampleRecordDefinitionChange(sampleRecordDefinitionName, elementModel) {\n        this.graph$.pipe(take(1)).subscribe((graph) => {\n            const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n            selectedElementCell.prop(`elementModel/inputMap/sampleRecordDefinitionName`, sampleRecordDefinitionName);\n        });\n    }\n    openExpressionEditor(elementModel) {\n        this.graph$.pipe(take(1)).subscribe((graph) => {\n            this.rxExpressionEditorService\n                .openEditor({\n                expressionConfigurator: this.options.expressionConfigurator,\n                isReadOnly: false,\n                legend: [\n                    {\n                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field-name.label'),\n                        icon: 'd-icon-arrow_right_square_input'\n                    }\n                ],\n                property: {\n                    path: 'inputMap/recordID',\n                    value: elementModel.inputMap.recordID,\n                    label: 'Record ID'\n                }\n            })\n                .pipe(takeUntil(this.destroyed$))\n                .subscribe((expression) => {\n                const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n                selectedElementCell.prop(`elementModel/inputMap/recordID`, expression.value);\n            });\n        });\n    }\n    patchOptions(options) {\n        this.recordDefinitionPickerOptions = {\n            label: 'Record definition name',\n            definitionType: RxDefinitionPickerType.Record,\n            required: true\n        };\n        this.sampleRecordDefinitionPickerOptions = {\n            label: 'Sample record definition name',\n            definitionType: RxDefinitionPickerType.Record,\n            required: true\n        };\n        this.recordIDExpressionOptions = {\n            label: 'Record ID',\n            dataDictionary$: options.expressionConfigurator.getDataDictionary('inputMap/recordID'),\n            operators: options.expressionConfigurator.getOperators('inputMap/recordID'),\n            isRequired: true\n        };\n    }\n}\nRxGetRecordInputMapInspectorWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordInputMapInspectorWidgetComponent, deps: [{ token: i1.RxExpressionEditorService }, { token: i2$1.RxIdService }, { token: i3.TranslateService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component });\nRxGetRecordInputMapInspectorWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RxGetRecordInputMapInspectorWidgetComponent, selector: \"rx-get-record-input-map-inspector-widget\", usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<div *ngIf=\\\"elementModel$ | async as elementModel\\\">\\n  <rx-definition-picker\\n    name=\\\"recordDefinition\\\"\\n    rx-id=\\\"record-definition\\\"\\n    [options]=\\\"recordDefinitionPickerOptions\\\"\\n    [ngModel]=\\\"elementModel.inputMap.recordDefinitionName\\\"\\n    (ngModelChange)=\\\"onRecordDefinitionChange($event, elementModel)\\\"\\n  >\\n  </rx-definition-picker>\\n\\n  <rx-definition-picker\\n    *ngIf=\\\"isDynamicRecordDefinitionName$ | async\\\"\\n    name=\\\"sampleRecordDefinition\\\"\\n    rx-id=\\\"sample-record-definition\\\"\\n    [options]=\\\"sampleRecordDefinitionPickerOptions\\\"\\n    [ngModel]=\\\"elementModel.inputMap.sampleRecordDefinitionName\\\"\\n    (ngModelChange)=\\\"onSampleRecordDefinitionChange($event, elementModel)\\\"\\n  >\\n  </rx-definition-picker>\\n\\n  <rx-expression-form-control\\n    rx-id=\\\"record-id\\\"\\n    [options]=\\\"recordIDExpressionOptions\\\"\\n    [propertyPath]=\\\"'inputMap/recordID'\\\"\\n    [ngModel]=\\\"elementModel.inputMap.recordID\\\"\\n    (events)=\\\"openExpressionEditor(elementModel)\\\"\\n  >\\n  </rx-expression-form-control>\\n</div>\\n\", styles: [\":host::ng-deep rx-definition-picker .dropdown{margin-bottom:15px}\\n\"], components: [{ type: i1.RxDefinitionPickerComponent, selector: \"rx-definition-picker\", inputs: [\"options\", \"isDisabled\"] }, { type: i1.ExpressionFormControlComponent, selector: \"rx-expression-form-control\", inputs: [\"options\", \"isDisabled\", \"propertyPath\"], outputs: [\"events\"] }], directives: [{ type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i5.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i5.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }], pipes: { \"async\": i4.AsyncPipe } });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordInputMapInspectorWidgetComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-get-record-input-map-inspector-widget',\n                    templateUrl: './get-record-input-map-inspector-widget.component.html',\n                    styleUrls: ['./get-record-input-map-inspector-widget.component.scss']\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxExpressionEditorService }, { type: i2$1.RxIdService }, { type: i3.TranslateService }, { type: i0.Injector }]; } });\n\nclass RxGetRecordInputMapInspectorWidgetModule {\n}\nRxGetRecordInputMapInspectorWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordInputMapInspectorWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRxGetRecordInputMapInspectorWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordInputMapInspectorWidgetModule, declarations: [RxGetRecordInputMapInspectorWidgetComponent], imports: [CommonModule, RxDefinitionPickerModule, FormsModule, ExpressionFormControlModule], exports: [RxGetRecordInputMapInspectorWidgetComponent] });\nRxGetRecordInputMapInspectorWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordInputMapInspectorWidgetModule, imports: [[CommonModule, RxDefinitionPickerModule, FormsModule, ExpressionFormControlModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordInputMapInspectorWidgetModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RxGetRecordInputMapInspectorWidgetComponent],\n                    imports: [CommonModule, RxDefinitionPickerModule, FormsModule, ExpressionFormControlModule],\n                    exports: [RxGetRecordInputMapInspectorWidgetComponent]\n                }]\n        }] });\n\nfunction RxRecordServerActionExpressionConfiguratorMixin(Base) {\n    return class RxRecordServerActionExpressionConfigurator extends Base {\n        constructor(...args) {\n            super(...args);\n        }\n        validateInputMapExpression(propertyName, expression) {\n            let isValid = true;\n            if (propertyName === 'recordDefinitionName' &&\n                expression &&\n                !expression.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n                isValid = false;\n            }\n            return of(isValid);\n        }\n    };\n}\n\nclass RxGetRecordProcessActionExpressionConfiguratorClass extends RxRecordServerActionExpressionConfiguratorMixin(RxProcessActionExpressionConfigurator) {\n    constructor(injector) {\n        super(injector);\n        this.injector = injector;\n    }\n}\n\nclass RxGetRecordProcessActionService extends RxGetRecordServerActionServiceMixin(RxRecordServerActionServiceMixin(RxProcessActionService)) {\n    constructor(rxDefinitionNameService, rxProcessDefinitionService, rxRecordDefinitionCacheService, rxTreeService, injector) {\n        super(injector);\n        this.rxDefinitionNameService = rxDefinitionNameService;\n        this.rxProcessDefinitionService = rxProcessDefinitionService;\n        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;\n        this.rxTreeService = rxTreeService;\n        this.injector = injector;\n    }\n    buildOutputDataDictionaryBranch(model) {\n        const recordDefinitionName = super.getRecordDefinitionNameFromInputMap(model.inputMap);\n        return recordDefinitionName\n            ? this.rxRecordDefinitionCacheService.getRecordAssociationTree(recordDefinitionName).pipe(switchMap((recordAssociationTrees) => {\n                const recordDefinitionNames = chain(recordAssociationTrees)\n                    .map('value')\n                    .compact()\n                    .map('recordDefinitionName')\n                    .push(recordDefinitionName)\n                    .value();\n                return this.rxRecordDefinitionCacheService\n                    .getRecordDefinitions(recordDefinitionNames)\n                    .pipe(map((recordDefinitions) => this.getOutputChildrenBranch(recordDefinitionName, recordAssociationTrees, recordDefinitions)));\n            }))\n            : of(null);\n    }\n    getClass() {\n        return joint.shapes.rx.ProcessActions.getRecord;\n    }\n    getElementType(actionTypeName) {\n        return this.rxProcessDefinitionService.getServerActionModelType(actionTypeName);\n    }\n    getExpressionConfiguratorClass() {\n        return RxGetRecordProcessActionExpressionConfiguratorClass;\n    }\n    getInputMapInspectorWidgetConfig() {\n        return {\n            component: RxGetRecordInputMapInspectorWidgetComponent,\n            options: {\n                expressionConfigurator: this.getExpressionConfigurator()\n            }\n        };\n    }\n    getAssociationsBranch(recordAssociationTree, recordDefinitions, prefix) {\n        return isEmpty(recordAssociationTree)\n            ? null\n            : {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.associations.label'),\n                children: recordAssociationTree.map((association) => {\n                    let newPrefix = `_associations.${association.value.associationDefintionGuid}.${association.value.nodeSide}[0]`;\n                    const recordDefinitionName = association.value.recordDefinitionName;\n                    newPrefix = prefix ? `${prefix}.${newPrefix}` : newPrefix;\n                    const associationNodeLabel = association.value.nodeName !== recordDefinitionName\n                        ? `${this.rxDefinitionNameService.getDisplayName(recordDefinitionName)} (${this.rxDefinitionNameService.getDisplayName(association.value.nodeName)})`\n                        : this.rxDefinitionNameService.getDisplayName(recordDefinitionName);\n                    return {\n                        label: associationNodeLabel,\n                        outputPropertyPath: newPrefix,\n                        children: this.getAssociationChildren(recordDefinitionName, association.children, recordDefinitions, newPrefix)\n                    };\n                })\n            };\n    }\n    getAssociationChildren(recordDefinitionName, recordAssociationTree, recordDefinitions, prefix) {\n        const associationsBranch = this.getAssociationsBranch(recordAssociationTree, recordDefinitions, prefix);\n        const children = chain(recordDefinitions)\n            .find({ name: recordDefinitionName })\n            .get('fieldDefinitions')\n            .map(function (fieldDefinition) {\n            return {\n                label: fieldDefinition.name,\n                outputPropertyPath: `${prefix}.${fieldDefinition.id}`\n            };\n        })\n            .value();\n        if (!isEmpty(associationsBranch)) {\n            children.push(associationsBranch);\n        }\n        return children;\n    }\n    getOutputChildrenBranch(recordDefinitionName, recordAssociationTree, recordDefinitions) {\n        const associationsBranch = this.getAssociationsBranch(recordAssociationTree, recordDefinitions);\n        const children = chain(recordDefinitions)\n            .find({ name: recordDefinitionName })\n            .get('fieldDefinitions')\n            .map((fieldDefinition) => ({\n            label: fieldDefinition.name,\n            outputPropertyPath: [fieldDefinition.id, fieldDefinition.name]\n        }))\n            .value();\n        if (!isEmpty(associationsBranch)) {\n            children.push(associationsBranch);\n        }\n        return children;\n    }\n}\nRxGetRecordProcessActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordProcessActionService, deps: [{ token: i1$1.RxDefinitionNameService }, { token: i2.RxProcessDefinitionService }, { token: i3$1.RxRecordDefinitionCacheService }, { token: i2$1.RxTreeService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxGetRecordProcessActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordProcessActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordProcessActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxDefinitionNameService }, { type: i2.RxProcessDefinitionService }, { type: i3$1.RxRecordDefinitionCacheService }, { type: i2$1.RxTreeService }, { type: i0.Injector }]; } });\n\nfunction RxRecordServerActionMixin(Base) {\n    return class RxRecordServerAction extends Base {\n        initialize(config) {\n            // @ts-ignore\n            super.initialize(config);\n            this.lastRecordDefinitionName = this.getRecordDefinitionName();\n            this.lastSampleRecordDefinitionName = this.getSampleRecordDefinitionName();\n            if (this.lastRecordDefinitionName) {\n                if (this.lastRecordDefinitionName.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n                    this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.expression;\n                }\n                else {\n                    this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.select;\n                }\n            }\n        }\n        afterRecordDefinitionNameChange(recordDefinitionName) {\n            this.lastRecordDefinitionName = recordDefinitionName;\n            // @ts-ignore\n            this.getCommandManager().storeBatchCommand();\n        }\n        afterSampleRecordDefinitionNameChange(sampleRecordDefinitionName) {\n            this.lastSampleRecordDefinitionName = sampleRecordDefinitionName;\n            // @ts-ignore\n            this.getCommandManager().storeBatchCommand();\n        }\n        getRecordDefinitionName() {\n            // @ts-ignore\n            const recordDefinitionName = this.getInputMap().recordDefinitionName;\n            return recordDefinitionName ? recordDefinitionName.replace(/^\"|\"$/g, '') : null;\n        }\n        getRecordDefinitionNameChangeConfirmationMessageKey() {\n            return 'com.bmc.arsys.rx.client.process-designer.inspector.clear-input-output-maps-confirmation.message';\n        }\n        getSampleRecordDefinitionName() {\n            // @ts-ignore\n            const sampleRecordDefinitionName = this.getInputMap().sampleRecordDefinitionName;\n            return sampleRecordDefinitionName ? sampleRecordDefinitionName.replace(/^\"|\"$/g, '') : null;\n        }\n        onInputMapChanged(element, inputMap, inputMapPropertyPath, inputMapPropertyValue, isCommandManagerOperation) {\n            if (inputMapPropertyPath === 'recordDefinitionName') {\n                if (isCommandManagerOperation) {\n                    this.lastRecordDefinitionName = inputMapPropertyValue;\n                }\n                else if (inputMapPropertyValue !== this.lastRecordDefinitionName) {\n                    // @ts-ignore\n                    this.getCommandManager().initBatchCommand();\n                    // @ts-ignore\n                    if (this.lastRecordDefinitionName) {\n                        RxRootInjector.injector\n                            .get(RxModalService)\n                            .confirm({\n                            title: RxRootInjector.injector\n                                .get(TranslateService)\n                                .instant('com.bmc.arsys.rx.client.common.warning.label'),\n                            modalStyle: RX_MODAL.modalStyles.warning,\n                            message: RxRootInjector.injector\n                                .get(TranslateService)\n                                .instant(this.getRecordDefinitionNameChangeConfirmationMessageKey())\n                        })\n                            .then((context) => {\n                            if (context) {\n                                this.afterRecordDefinitionNameChange(inputMapPropertyValue);\n                            }\n                            else {\n                                // @ts-ignore\n                                this.getCommandManager().storeBatchCommand();\n                                // @ts-ignore\n                                this.getCommandManager().cancel();\n                            }\n                        })\n                            .catch(() => {\n                            // @ts-ignore\n                            this.getCommandManager().storeBatchCommand();\n                            // @ts-ignore\n                            this.getCommandManager().cancel();\n                        });\n                    }\n                    else {\n                        this.afterRecordDefinitionNameChange(inputMapPropertyValue);\n                    }\n                }\n                if (inputMapPropertyValue) {\n                    if (inputMapPropertyValue.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n                        this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.expression;\n                    }\n                    else {\n                        this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.select;\n                    }\n                }\n            }\n            if (inputMapPropertyPath === 'sampleRecordDefinitionName') {\n                if (isCommandManagerOperation) {\n                    this.lastSampleRecordDefinitionName = inputMapPropertyValue;\n                }\n                else if (inputMapPropertyValue !== this.lastSampleRecordDefinitionName) {\n                    // @ts-ignore\n                    this.getCommandManager().initBatchCommand();\n                    if (this.lastSampleRecordDefinitionName) {\n                        RxRootInjector.injector\n                            .get(RxModalService)\n                            .confirm({\n                            title: RxRootInjector.injector\n                                .get(TranslateService)\n                                .instant('com.bmc.arsys.rx.client.common.warning.label'),\n                            modalStyle: RX_MODAL.modalStyles.warning,\n                            message: RxRootInjector.injector\n                                .get(TranslateService)\n                                .instant(this.getRecordDefinitionNameChangeConfirmationMessageKey())\n                        })\n                            .then(() => {\n                            this.afterSampleRecordDefinitionNameChange(inputMapPropertyValue);\n                        })\n                            .catch(() => {\n                            // @ts-ignore\n                            this.getCommandManager().storeBatchCommand();\n                            // @ts-ignore\n                            this.getCommandManager().cancel();\n                        });\n                    }\n                    else {\n                        this.afterSampleRecordDefinitionNameChange(inputMapPropertyValue);\n                    }\n                }\n            }\n        }\n    };\n}\n\nfunction RxGetRecordServerActionMixin(Base) {\n    return class RxGetRecordServerAction extends Base {\n        initialize(config) {\n            // @ts-ignore\n            super.initialize(config);\n        }\n        afterRecordDefinitionNameChange(inputMapPropertyValue) {\n            // @ts-ignore\n            this.lastRecordDefinitionName = inputMapPropertyValue;\n            // @ts-ignore\n            this.clearOutputMap();\n            // @ts-ignore\n            this.setInputMap(\n            // @ts-ignore\n            assign(this.getInputMap(), {\n                // @ts-ignore\n                recordDefinitionName: this.lastRecordDefinitionName,\n                sampleRecordDefinitionName: null,\n                attachmentFieldID: ''\n            }));\n            // @ts-ignore\n            this.getCommandManager().storeBatchCommand();\n        }\n        afterSampleRecordDefinitionNameChange(inputMapPropertyValue) {\n            // @ts-ignore\n            this.lastSampleRecordDefinitionName = inputMapPropertyValue;\n            // @ts-ignore\n            this.clearOutputMap();\n            // @ts-ignore\n            this.setInputMap(\n            // @ts-ignore\n            assign(this.getInputMap(), {\n                // @ts-ignore\n                recordDefinitionName: this.lastRecordDefinitionName,\n                // @ts-ignore\n                sampleRecordDefinitionName: this.lastSampleRecordDefinitionName\n            }));\n            // @ts-ignore\n            this.getCommandManager().storeBatchCommand();\n        }\n        getRecordDefinitionNameChangeConfirmationMessageKey() {\n            return 'com.bmc.arsys.rx.client.process-designer.inspector.clear-output-map-confirmation.message';\n        }\n    };\n}\n\nclass RxGetRecordProcessAction extends RxGetRecordServerActionMixin(RxRecordServerActionMixin(RxProcessAction)) {\n    initialize(config) {\n        // @ts-ignore\n        super.initialize(config);\n    }\n}\n\nclass RxGetRecordServerActionRegistrationModule {\n    constructor(rxGetRecordProcessActionService, rxProcessElementRegistryService, translateService) {\n        rxProcessElementRegistryService.register({\n            displayName: translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.get-record.name.label'),\n            elementService: rxGetRecordProcessActionService,\n            group: RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n            paletteItem: {\n                border: RX_DESIGNER.paletteItemBorder.solid,\n                icon: {\n                    path: RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n                    position: RX_DESIGNER.paletteIconPosition.top\n                },\n                label: RX_DESIGNER.paletteItemLabel.inner,\n                shape: RX_DESIGNER.paletteItemShape.rectangle\n            },\n            resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n            shapeClass: RxGetRecordProcessAction,\n            shapeType: 'ProcessActions.getRecord',\n            type: 'rx.ProcessActions.getRecord',\n            viewShapeClass: RxProcessActionView,\n            viewShapeType: 'ProcessActions.getRecordView'\n        });\n    }\n}\nRxGetRecordServerActionRegistrationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordServerActionRegistrationModule, deps: [{ token: RxGetRecordProcessActionService }, { token: i2.RxProcessElementRegistryService }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.NgModule });\nRxGetRecordServerActionRegistrationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordServerActionRegistrationModule, imports: [RxGetRecordInputMapInspectorWidgetModule] });\nRxGetRecordServerActionRegistrationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordServerActionRegistrationModule, imports: [[RxGetRecordInputMapInspectorWidgetModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxGetRecordServerActionRegistrationModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RxGetRecordInputMapInspectorWidgetModule]\n                }]\n        }], ctorParameters: function () { return [{ type: RxGetRecordProcessActionService }, { type: i2.RxProcessElementRegistryService }, { type: i3.TranslateService }]; } });\n\nclass RxRecordServerActionModule {\n}\nRxRecordServerActionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordServerActionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRxRecordServerActionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordServerActionModule, imports: [RxGetRecordServerActionRegistrationModule] });\nRxRecordServerActionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordServerActionModule, imports: [[RxGetRecordServerActionRegistrationModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordServerActionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RxGetRecordServerActionRegistrationModule]\n                }]\n        }] });\n\nclass RxServerActionsModule {\n}\nRxServerActionsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxServerActionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRxServerActionsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxServerActionsModule, imports: [RxCreateListRegistrationModule, RxRecordServerActionModule] });\nRxServerActionsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxServerActionsModule, imports: [[RxCreateListRegistrationModule, RxRecordServerActionModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxServerActionsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [RxCreateListRegistrationModule, RxRecordServerActionModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RX_RECORD_SERVER_ACTION, RxCreateListProcessAction, RxCreateListProcessActionService, RxRecordServerActionExpressionConfiguratorMixin, RxRecordServerActionMixin, RxRecordServerActionModule, RxRecordServerActionServiceMixin, RxServerActionsModule };\n//# sourceMappingURL=helix-platform-process-server-actions.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}