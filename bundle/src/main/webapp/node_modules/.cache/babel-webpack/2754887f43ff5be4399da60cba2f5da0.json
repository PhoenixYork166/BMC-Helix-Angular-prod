{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Pipe, NgModule } from '@angular/core';\nimport * as i1$1 from '@helix/platform/shared/api';\nimport { DataPage, RX_BUNDLE } from '@helix/platform/shared/api';\nimport { forkJoin, of } from 'rxjs';\nimport { castArray, isEmpty, find } from 'lodash';\nimport * as i1 from '@angular/common/http';\nimport { shareReplay } from 'rxjs/operators';\nimport * as i1$2 from '@ngx-translate/core';\nvar RxAssociatedRecordNodeSide;\n(function (RxAssociatedRecordNodeSide) {\n  RxAssociatedRecordNodeSide[\"NodeA\"] = \"nodeA\";\n  RxAssociatedRecordNodeSide[\"NodeB\"] = \"nodeB\";\n})(RxAssociatedRecordNodeSide || (RxAssociatedRecordNodeSide = {}));\nconst RX_ASSOCIATED_RECORD_NODE_SIDES = {\n  nodeA: {\n    value: RxAssociatedRecordNodeSide.NodeA,\n    recordDefinitionNameKey: 'nodeAId',\n    defaultName: 'First record'\n  },\n  nodeB: {\n    value: RxAssociatedRecordNodeSide.NodeB,\n    recordDefinitionNameKey: 'nodeBId',\n    defaultName: 'Second record'\n  }\n};\nclass RxAssociationDefinitionDataPageService extends DataPage {\n  constructor(injector) {\n    super(injector, 'com.bmc.arsys.rx.application.association.datapage.AssociationDefinitionDataPageQuery');\n    this.injector = injector;\n  }\n  getRecordAssociationDefinitions(recordDefinitionNames) {\n    const recordDefinitionNamesList = castArray(recordDefinitionNames);\n    const observables$ = recordDefinitionNamesList.map(name => {\n      return this.get({\n        headers: {\n          'default-bundle-scope': ''\n        },\n        params: {\n          firstRecordDefinitionName: name\n        }\n      });\n    });\n    return forkJoin(observables$);\n  }\n}\nRxAssociationDefinitionDataPageService.ɵfac = function RxAssociationDefinitionDataPageService_Factory(t) {\n  return new (t || RxAssociationDefinitionDataPageService)(i0.ɵɵinject(i0.Injector));\n};\nRxAssociationDefinitionDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxAssociationDefinitionDataPageService,\n  factory: RxAssociationDefinitionDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociationDefinitionDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\nvar RxCardinalityType;\n(function (RxCardinalityType) {\n  RxCardinalityType[\"OneToOne\"] = \"ONE_TO_ONE\";\n  RxCardinalityType[\"OneToMany\"] = \"ONE_TO_MANY\";\n  RxCardinalityType[\"ManyToMany\"] = \"MANY_TO_MANY\";\n})(RxCardinalityType || (RxCardinalityType = {}));\nvar RxModalityType;\n(function (RxModalityType) {\n  RxModalityType[\"Required\"] = \"REQUIRED\";\n  RxModalityType[\"Optional\"] = \"OPTIONAL\";\n})(RxModalityType || (RxModalityType = {}));\nconst RX_ASSOCIATION_DEFINITION = {\n  modality: {\n    required: RxModalityType.Required,\n    optional: RxModalityType.Optional\n  },\n  roles: {\n    second: {\n      value: 'nodeB'\n    }\n  },\n  cardinality: {\n    oneToOne: {\n      value: RxCardinalityType.OneToOne,\n      labelKey: 'com.bmc.arsys.rx.client.association.cardinality.one-to-one.label'\n    },\n    oneToMany: {\n      value: RxCardinalityType.OneToMany,\n      labelKey: 'com.bmc.arsys.rx.client.association.cardinality.one-to-many.label'\n    },\n    manyToMany: {\n      value: RxCardinalityType.ManyToMany,\n      labelKey: 'com.bmc.arsys.rx.client.association.cardinality.many-to-many.label'\n    }\n  },\n  constraints: [{\n    nameKey: 'com.bmc.arsys.rx.client.association.constraints.cascade-delete.label',\n    value: true\n  }, {\n    nameKey: 'com.bmc.arsys.rx.client.common.none.label',\n    value: false\n  }]\n};\nclass RxAssociationDefinitionService {\n  constructor(httpClient, rxCommandFactoryService) {\n    this.httpClient = httpClient;\n    this.rxCommandFactoryService = rxCommandFactoryService;\n  }\n  get(associationDefinitionName, options) {\n    return this.httpClient.get(this.getUrl(associationDefinitionName), options);\n  }\n  getNew() {\n    return of({\n      name: '',\n      description: null,\n      nodeAId: null,\n      nodeBId: null,\n      nodeAKeys: [379],\n      nodeBKeys: [379],\n      nodeAName: null,\n      nodeBName: null,\n      cardinality: RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value,\n      shouldCascadeDelete: false,\n      nodeAModality: RX_ASSOCIATION_DEFINITION.modality.optional,\n      isEnabled: true,\n      allowOverlay: false,\n      scope: RX_BUNDLE.definitionScopeTypes.bundle\n    });\n  }\n  create(associationDefinition) {\n    return this.httpClient.post(this.getUrl(), associationDefinition, {\n      observe: 'response'\n    });\n  }\n  update(associationDefinition, options) {\n    return this.httpClient.put(this.getUrl(associationDefinition.name), associationDefinition, options);\n  }\n  delete(associationDefinitionName) {\n    return this.httpClient.delete(this.getUrl(associationDefinitionName));\n  }\n  revertCustomization(associationDefinitionName) {\n    const revertCustomizationCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.association.command.RevertAssociationDefinitionCommand');\n    return revertCustomizationCommand.execute({\n      associationDefinitionName\n    });\n  }\n  rename(oldAssociationDefinitionName, newAssociationDefinitionName) {\n    const renameCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.association.command.RenameAssociationDefinitionCommand');\n    return renameCommand.execute({\n      name: oldAssociationDefinitionName,\n      newName: newAssociationDefinitionName\n    });\n  }\n  getUrl(associationDefinitionName) {\n    return associationDefinitionName ? `/api/rx/application/association/associationdefinition/${encodeURIComponent(associationDefinitionName)}` : `/api/rx/application/association/associationdefinition`;\n  }\n}\nRxAssociationDefinitionService.ɵfac = function RxAssociationDefinitionService_Factory(t) {\n  return new (t || RxAssociationDefinitionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i1$1.RxCommandFactoryService));\n};\nRxAssociationDefinitionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxAssociationDefinitionService,\n  factory: RxAssociationDefinitionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociationDefinitionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.HttpClient\n    }, {\n      type: i1$1.RxCommandFactoryService\n    }];\n  }, null);\n})();\nconst associationInstanceDataPageQuery = 'com.bmc.arsys.rx.application.association.datapage.AssociationInstanceDataPageQuery';\nclass RxAssociationInstanceDataPageService extends DataPage {\n  constructor(injector, rxLogService) {\n    super(injector, associationInstanceDataPageQuery);\n    this.injector = injector;\n    this.rxLogService = rxLogService;\n  }\n  get(dataPageRequestConfiguration = {}) {\n    this.rxLogService.warning('RxAssociationInstanceDataPageService: The get() method is deprecated. Use post() instead.');\n    return super.get(dataPageRequestConfiguration);\n  }\n}\nRxAssociationInstanceDataPageService.ɵfac = function RxAssociationInstanceDataPageService_Factory(t) {\n  return new (t || RxAssociationInstanceDataPageService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1$1.RxLogService));\n};\nRxAssociationInstanceDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxAssociationInstanceDataPageService,\n  factory: RxAssociationInstanceDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociationInstanceDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }, {\n      type: i1$1.RxLogService\n    }];\n  }, null);\n})();\nconst associateMultipleCommand = 'com.bmc.arsys.rx.application.association.command.AssociateMultipleCommand';\nconst disassociateMultipleCommand = 'com.bmc.arsys.rx.application.association.command.DisassociateMultipleCommand';\nclass RxAssociationInstanceService {\n  constructor(rxCommandFactoryService) {\n    this.rxCommandFactoryService = rxCommandFactoryService;\n    this.associateCommand = this.rxCommandFactoryService.forResourceType(associateMultipleCommand);\n    this.disassociateCommand = this.rxCommandFactoryService.forResourceType(disassociateMultipleCommand);\n  }\n  associateRecords(associationDefinitionName, nodeAIds, nodeBIds, useDefaultRoles, nodeARole, nodeBRole) {\n    return this.associateCommand.execute({\n      associationDefinitionName,\n      nodeARecordInstanceIds: castArray(nodeAIds),\n      nodeBRecordInstanceIds: castArray(nodeBIds),\n      useDefaultRoles,\n      nodeARole,\n      nodeBRole\n    });\n  }\n  disassociateRecords(associationDefinitionName, nodeAIds, nodeBIds) {\n    return this.disassociateCommand.execute({\n      associationDefinitionName,\n      nodeARecordInstanceIds: castArray(nodeAIds),\n      nodeBRecordInstanceIds: castArray(nodeBIds)\n    });\n  }\n}\nRxAssociationInstanceService.ɵfac = function RxAssociationInstanceService_Factory(t) {\n  return new (t || RxAssociationInstanceService)(i0.ɵɵinject(i1$1.RxCommandFactoryService));\n};\nRxAssociationInstanceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxAssociationInstanceService,\n  factory: RxAssociationInstanceService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociationInstanceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxCommandFactoryService\n    }];\n  }, null);\n})();\nconst associationNodeTreeDataPageQuery = 'com.bmc.arsys.rx.application.association.datapage.AssociationNodeTreeDataPageQuery';\nclass RxAssociationNodeTreeDataPageService extends DataPage {\n  constructor(injector) {\n    super(injector, associationNodeTreeDataPageQuery, {\n      params: {\n        depth: 2\n      }\n    });\n    this.injector = injector;\n  }\n}\nRxAssociationNodeTreeDataPageService.ɵfac = function RxAssociationNodeTreeDataPageService_Factory(t) {\n  return new (t || RxAssociationNodeTreeDataPageService)(i0.ɵɵinject(i0.Injector));\n};\nRxAssociationNodeTreeDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxAssociationNodeTreeDataPageService,\n  factory: RxAssociationNodeTreeDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociationNodeTreeDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass RxAssociationDefinitionCacheService {\n  constructor(rxAssociationDefinitionService) {\n    this.rxAssociationDefinitionService = rxAssociationDefinitionService;\n    this.associationDefinitions = new Map();\n    this.consumers = new Set();\n  }\n  getAssociationDefinition(associationDefinitionName, options) {\n    if (!this.associationDefinitions.has(associationDefinitionName)) {\n      const associationDefinition$ = this.rxAssociationDefinitionService.get(associationDefinitionName, options).pipe(shareReplay(1));\n      this.associationDefinitions.set(associationDefinitionName, associationDefinition$);\n    }\n    return this.associationDefinitions.get(associationDefinitionName);\n  }\n  registerConsumer(consumerDestroy$) {\n    this.consumers.add(consumerDestroy$);\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n  clearCache() {\n    this.associationDefinitions.clear();\n  }\n}\nRxAssociationDefinitionCacheService.ɵfac = function RxAssociationDefinitionCacheService_Factory(t) {\n  return new (t || RxAssociationDefinitionCacheService)(i0.ɵɵinject(RxAssociationDefinitionService));\n};\nRxAssociationDefinitionCacheService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxAssociationDefinitionCacheService,\n  factory: RxAssociationDefinitionCacheService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociationDefinitionCacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxAssociationDefinitionService\n    }];\n  }, null);\n})();\nclass RxAssociationCardinalityPipe {\n  constructor(translateService) {\n    this.translateService = translateService;\n  }\n  transform(value) {\n    return this.translateService.instant(find(RX_ASSOCIATION_DEFINITION.cardinality, ['value', value]).labelKey);\n  }\n}\nRxAssociationCardinalityPipe.ɵfac = function RxAssociationCardinalityPipe_Factory(t) {\n  return new (t || RxAssociationCardinalityPipe)(i0.ɵɵdirectiveInject(i1$2.TranslateService, 16));\n};\nRxAssociationCardinalityPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"rxAssociationCardinalityPipe\",\n  type: RxAssociationCardinalityPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociationCardinalityPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'rxAssociationCardinalityPipe'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.TranslateService\n    }];\n  }, null);\n})();\nclass RxAssociationConstraintsPipe {\n  constructor(translateService) {\n    this.translateService = translateService;\n  }\n  transform(value) {\n    return this.translateService.instant(find(RX_ASSOCIATION_DEFINITION.constraints, ['value', value]).nameKey);\n  }\n}\nRxAssociationConstraintsPipe.ɵfac = function RxAssociationConstraintsPipe_Factory(t) {\n  return new (t || RxAssociationConstraintsPipe)(i0.ɵɵdirectiveInject(i1$2.TranslateService, 16));\n};\nRxAssociationConstraintsPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"rxAssociationConstraintsPipe\",\n  type: RxAssociationConstraintsPipe,\n  pure: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociationConstraintsPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'rxAssociationConstraintsPipe'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.TranslateService\n    }];\n  }, null);\n})();\nclass RxAssociationPipesModule {}\nRxAssociationPipesModule.ɵfac = function RxAssociationPipesModule_Factory(t) {\n  return new (t || RxAssociationPipesModule)();\n};\nRxAssociationPipesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxAssociationPipesModule,\n  declarations: [RxAssociationCardinalityPipe, RxAssociationConstraintsPipe],\n  exports: [RxAssociationCardinalityPipe, RxAssociationConstraintsPipe]\n});\nRxAssociationPipesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxAssociationPipesModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RxAssociationCardinalityPipe, RxAssociationConstraintsPipe],\n      exports: [RxAssociationCardinalityPipe, RxAssociationConstraintsPipe]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RX_ASSOCIATED_RECORD_NODE_SIDES, RX_ASSOCIATION_DEFINITION, RxAssociatedRecordNodeSide, RxAssociationCardinalityPipe, RxAssociationConstraintsPipe, RxAssociationDefinitionCacheService, RxAssociationDefinitionDataPageService, RxAssociationDefinitionService, RxAssociationInstanceDataPageService, RxAssociationInstanceService, RxAssociationNodeTreeDataPageService, RxAssociationPipesModule, RxCardinalityType, RxModalityType, associateMultipleCommand, disassociateMultipleCommand };\n//# sourceMappingURL=helix-platform-association-api.js.map","map":{"version":3,"names":["i0","Injectable","Pipe","NgModule","i1$1","DataPage","RX_BUNDLE","forkJoin","of","castArray","isEmpty","find","i1","shareReplay","i1$2","RxAssociatedRecordNodeSide","RX_ASSOCIATED_RECORD_NODE_SIDES","nodeA","value","NodeA","recordDefinitionNameKey","defaultName","nodeB","NodeB","RxAssociationDefinitionDataPageService","constructor","injector","getRecordAssociationDefinitions","recordDefinitionNames","recordDefinitionNamesList","observables$","map","name","get","headers","params","firstRecordDefinitionName","ɵfac","RxAssociationDefinitionDataPageService_Factory","t","ɵɵinject","Injector","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","RxCardinalityType","RxModalityType","RX_ASSOCIATION_DEFINITION","modality","required","Required","optional","Optional","roles","second","cardinality","oneToOne","OneToOne","labelKey","oneToMany","OneToMany","manyToMany","ManyToMany","constraints","nameKey","RxAssociationDefinitionService","httpClient","rxCommandFactoryService","associationDefinitionName","options","getUrl","getNew","description","nodeAId","nodeBId","nodeAKeys","nodeBKeys","nodeAName","nodeBName","shouldCascadeDelete","nodeAModality","isEnabled","allowOverlay","scope","definitionScopeTypes","bundle","create","associationDefinition","post","observe","update","put","delete","revertCustomization","revertCustomizationCommand","forResourceType","execute","rename","oldAssociationDefinitionName","newAssociationDefinitionName","renameCommand","newName","encodeURIComponent","RxAssociationDefinitionService_Factory","HttpClient","RxCommandFactoryService","associationInstanceDataPageQuery","RxAssociationInstanceDataPageService","rxLogService","dataPageRequestConfiguration","warning","RxAssociationInstanceDataPageService_Factory","RxLogService","associateMultipleCommand","disassociateMultipleCommand","RxAssociationInstanceService","associateCommand","disassociateCommand","associateRecords","nodeAIds","nodeBIds","useDefaultRoles","nodeARole","nodeBRole","nodeARecordInstanceIds","nodeBRecordInstanceIds","disassociateRecords","RxAssociationInstanceService_Factory","associationNodeTreeDataPageQuery","RxAssociationNodeTreeDataPageService","depth","RxAssociationNodeTreeDataPageService_Factory","RxAssociationDefinitionCacheService","rxAssociationDefinitionService","associationDefinitions","Map","consumers","Set","getAssociationDefinition","has","associationDefinition$","pipe","set","registerConsumer","consumerDestroy$","add","subscribe","clearCache","clear","RxAssociationDefinitionCacheService_Factory","RxAssociationCardinalityPipe","translateService","transform","instant","RxAssociationCardinalityPipe_Factory","ɵɵdirectiveInject","TranslateService","ɵpipe","ɵɵdefinePipe","pure","RxAssociationConstraintsPipe","RxAssociationConstraintsPipe_Factory","RxAssociationPipesModule","RxAssociationPipesModule_Factory","ɵmod","ɵɵdefineNgModule","declarations","exports","ɵinj","ɵɵdefineInjector"],"sources":["C:/projects/innovation-studio-developer/22.1/test210500/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-association-api.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Pipe, NgModule } from '@angular/core';\nimport * as i1$1 from '@helix/platform/shared/api';\nimport { DataPage, RX_BUNDLE } from '@helix/platform/shared/api';\nimport { forkJoin, of } from 'rxjs';\nimport { castArray, isEmpty, find } from 'lodash';\nimport * as i1 from '@angular/common/http';\nimport { shareReplay } from 'rxjs/operators';\nimport * as i1$2 from '@ngx-translate/core';\n\nvar RxAssociatedRecordNodeSide;\n(function (RxAssociatedRecordNodeSide) {\n    RxAssociatedRecordNodeSide[\"NodeA\"] = \"nodeA\";\n    RxAssociatedRecordNodeSide[\"NodeB\"] = \"nodeB\";\n})(RxAssociatedRecordNodeSide || (RxAssociatedRecordNodeSide = {}));\n\nconst RX_ASSOCIATED_RECORD_NODE_SIDES = {\n    nodeA: {\n        value: RxAssociatedRecordNodeSide.NodeA,\n        recordDefinitionNameKey: 'nodeAId',\n        defaultName: 'First record'\n    },\n    nodeB: {\n        value: RxAssociatedRecordNodeSide.NodeB,\n        recordDefinitionNameKey: 'nodeBId',\n        defaultName: 'Second record'\n    }\n};\n\nclass RxAssociationDefinitionDataPageService extends DataPage {\n    constructor(injector) {\n        super(injector, 'com.bmc.arsys.rx.application.association.datapage.AssociationDefinitionDataPageQuery');\n        this.injector = injector;\n    }\n    getRecordAssociationDefinitions(recordDefinitionNames) {\n        const recordDefinitionNamesList = castArray(recordDefinitionNames);\n        const observables$ = recordDefinitionNamesList.map((name) => {\n            return this.get({\n                headers: { 'default-bundle-scope': '' },\n                params: { firstRecordDefinitionName: name }\n            });\n        });\n        return forkJoin(observables$);\n    }\n}\nRxAssociationDefinitionDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationDefinitionDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxAssociationDefinitionDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationDefinitionDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationDefinitionDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\nvar RxCardinalityType;\n(function (RxCardinalityType) {\n    RxCardinalityType[\"OneToOne\"] = \"ONE_TO_ONE\";\n    RxCardinalityType[\"OneToMany\"] = \"ONE_TO_MANY\";\n    RxCardinalityType[\"ManyToMany\"] = \"MANY_TO_MANY\";\n})(RxCardinalityType || (RxCardinalityType = {}));\nvar RxModalityType;\n(function (RxModalityType) {\n    RxModalityType[\"Required\"] = \"REQUIRED\";\n    RxModalityType[\"Optional\"] = \"OPTIONAL\";\n})(RxModalityType || (RxModalityType = {}));\n\nconst RX_ASSOCIATION_DEFINITION = {\n    modality: {\n        required: RxModalityType.Required,\n        optional: RxModalityType.Optional\n    },\n    roles: {\n        second: {\n            value: 'nodeB'\n        }\n    },\n    cardinality: {\n        oneToOne: {\n            value: RxCardinalityType.OneToOne,\n            labelKey: 'com.bmc.arsys.rx.client.association.cardinality.one-to-one.label'\n        },\n        oneToMany: {\n            value: RxCardinalityType.OneToMany,\n            labelKey: 'com.bmc.arsys.rx.client.association.cardinality.one-to-many.label'\n        },\n        manyToMany: {\n            value: RxCardinalityType.ManyToMany,\n            labelKey: 'com.bmc.arsys.rx.client.association.cardinality.many-to-many.label'\n        }\n    },\n    constraints: [\n        {\n            nameKey: 'com.bmc.arsys.rx.client.association.constraints.cascade-delete.label',\n            value: true\n        },\n        {\n            nameKey: 'com.bmc.arsys.rx.client.common.none.label',\n            value: false\n        }\n    ]\n};\n\nclass RxAssociationDefinitionService {\n    constructor(httpClient, rxCommandFactoryService) {\n        this.httpClient = httpClient;\n        this.rxCommandFactoryService = rxCommandFactoryService;\n    }\n    get(associationDefinitionName, options) {\n        return this.httpClient.get(this.getUrl(associationDefinitionName), options);\n    }\n    getNew() {\n        return of({\n            name: '',\n            description: null,\n            nodeAId: null,\n            nodeBId: null,\n            nodeAKeys: [379],\n            nodeBKeys: [379],\n            nodeAName: null,\n            nodeBName: null,\n            cardinality: RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value,\n            shouldCascadeDelete: false,\n            nodeAModality: RX_ASSOCIATION_DEFINITION.modality.optional,\n            isEnabled: true,\n            allowOverlay: false,\n            scope: RX_BUNDLE.definitionScopeTypes.bundle\n        });\n    }\n    create(associationDefinition) {\n        return this.httpClient.post(this.getUrl(), associationDefinition, { observe: 'response' });\n    }\n    update(associationDefinition, options) {\n        return this.httpClient.put(this.getUrl(associationDefinition.name), associationDefinition, options);\n    }\n    delete(associationDefinitionName) {\n        return this.httpClient.delete(this.getUrl(associationDefinitionName));\n    }\n    revertCustomization(associationDefinitionName) {\n        const revertCustomizationCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.association.command.RevertAssociationDefinitionCommand');\n        return revertCustomizationCommand.execute({ associationDefinitionName });\n    }\n    rename(oldAssociationDefinitionName, newAssociationDefinitionName) {\n        const renameCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.association.command.RenameAssociationDefinitionCommand');\n        return renameCommand.execute({\n            name: oldAssociationDefinitionName,\n            newName: newAssociationDefinitionName\n        });\n    }\n    getUrl(associationDefinitionName) {\n        return associationDefinitionName\n            ? `/api/rx/application/association/associationdefinition/${encodeURIComponent(associationDefinitionName)}`\n            : `/api/rx/application/association/associationdefinition`;\n    }\n}\nRxAssociationDefinitionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationDefinitionService, deps: [{ token: i1.HttpClient }, { token: i1$1.RxCommandFactoryService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxAssociationDefinitionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationDefinitionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationDefinitionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i1$1.RxCommandFactoryService }]; } });\n\nconst associationInstanceDataPageQuery = 'com.bmc.arsys.rx.application.association.datapage.AssociationInstanceDataPageQuery';\nclass RxAssociationInstanceDataPageService extends DataPage {\n    constructor(injector, rxLogService) {\n        super(injector, associationInstanceDataPageQuery);\n        this.injector = injector;\n        this.rxLogService = rxLogService;\n    }\n    get(dataPageRequestConfiguration = {}) {\n        this.rxLogService.warning('RxAssociationInstanceDataPageService: The get() method is deprecated. Use post() instead.');\n        return super.get(dataPageRequestConfiguration);\n    }\n}\nRxAssociationInstanceDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationInstanceDataPageService, deps: [{ token: i0.Injector }, { token: i1$1.RxLogService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxAssociationInstanceDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationInstanceDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationInstanceDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$1.RxLogService }]; } });\n\nconst associateMultipleCommand = 'com.bmc.arsys.rx.application.association.command.AssociateMultipleCommand';\nconst disassociateMultipleCommand = 'com.bmc.arsys.rx.application.association.command.DisassociateMultipleCommand';\nclass RxAssociationInstanceService {\n    constructor(rxCommandFactoryService) {\n        this.rxCommandFactoryService = rxCommandFactoryService;\n        this.associateCommand = this.rxCommandFactoryService.forResourceType(associateMultipleCommand);\n        this.disassociateCommand = this.rxCommandFactoryService.forResourceType(disassociateMultipleCommand);\n    }\n    associateRecords(associationDefinitionName, nodeAIds, nodeBIds, useDefaultRoles, nodeARole, nodeBRole) {\n        return this.associateCommand.execute({\n            associationDefinitionName,\n            nodeARecordInstanceIds: castArray(nodeAIds),\n            nodeBRecordInstanceIds: castArray(nodeBIds),\n            useDefaultRoles,\n            nodeARole,\n            nodeBRole\n        });\n    }\n    disassociateRecords(associationDefinitionName, nodeAIds, nodeBIds) {\n        return this.disassociateCommand.execute({\n            associationDefinitionName,\n            nodeARecordInstanceIds: castArray(nodeAIds),\n            nodeBRecordInstanceIds: castArray(nodeBIds)\n        });\n    }\n}\nRxAssociationInstanceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationInstanceService, deps: [{ token: i1$1.RxCommandFactoryService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxAssociationInstanceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationInstanceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationInstanceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxCommandFactoryService }]; } });\n\nconst associationNodeTreeDataPageQuery = 'com.bmc.arsys.rx.application.association.datapage.AssociationNodeTreeDataPageQuery';\nclass RxAssociationNodeTreeDataPageService extends DataPage {\n    constructor(injector) {\n        super(injector, associationNodeTreeDataPageQuery, {\n            params: {\n                depth: 2\n            }\n        });\n        this.injector = injector;\n    }\n}\nRxAssociationNodeTreeDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationNodeTreeDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxAssociationNodeTreeDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationNodeTreeDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationNodeTreeDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\nclass RxAssociationDefinitionCacheService {\n    constructor(rxAssociationDefinitionService) {\n        this.rxAssociationDefinitionService = rxAssociationDefinitionService;\n        this.associationDefinitions = new Map();\n        this.consumers = new Set();\n    }\n    getAssociationDefinition(associationDefinitionName, options) {\n        if (!this.associationDefinitions.has(associationDefinitionName)) {\n            const associationDefinition$ = this.rxAssociationDefinitionService\n                .get(associationDefinitionName, options)\n                .pipe(shareReplay(1));\n            this.associationDefinitions.set(associationDefinitionName, associationDefinition$);\n        }\n        return this.associationDefinitions.get(associationDefinitionName);\n    }\n    registerConsumer(consumerDestroy$) {\n        this.consumers.add(consumerDestroy$);\n        consumerDestroy$.subscribe(() => {\n            this.consumers.delete(consumerDestroy$);\n            if (isEmpty(this.consumers)) {\n                this.clearCache();\n            }\n        });\n    }\n    clearCache() {\n        this.associationDefinitions.clear();\n    }\n}\nRxAssociationDefinitionCacheService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationDefinitionCacheService, deps: [{ token: RxAssociationDefinitionService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxAssociationDefinitionCacheService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationDefinitionCacheService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationDefinitionCacheService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxAssociationDefinitionService }]; } });\n\nclass RxAssociationCardinalityPipe {\n    constructor(translateService) {\n        this.translateService = translateService;\n    }\n    transform(value) {\n        return this.translateService.instant(find(RX_ASSOCIATION_DEFINITION.cardinality, ['value', value]).labelKey);\n    }\n}\nRxAssociationCardinalityPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationCardinalityPipe, deps: [{ token: i1$2.TranslateService }], target: i0.ɵɵFactoryTarget.Pipe });\nRxAssociationCardinalityPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationCardinalityPipe, name: \"rxAssociationCardinalityPipe\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationCardinalityPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'rxAssociationCardinalityPipe'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.TranslateService }]; } });\n\nclass RxAssociationConstraintsPipe {\n    constructor(translateService) {\n        this.translateService = translateService;\n    }\n    transform(value) {\n        return this.translateService.instant(find(RX_ASSOCIATION_DEFINITION.constraints, ['value', value]).nameKey);\n    }\n}\nRxAssociationConstraintsPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationConstraintsPipe, deps: [{ token: i1$2.TranslateService }], target: i0.ɵɵFactoryTarget.Pipe });\nRxAssociationConstraintsPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationConstraintsPipe, name: \"rxAssociationConstraintsPipe\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationConstraintsPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'rxAssociationConstraintsPipe'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.TranslateService }]; } });\n\nclass RxAssociationPipesModule {\n}\nRxAssociationPipesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationPipesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRxAssociationPipesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationPipesModule, declarations: [RxAssociationCardinalityPipe, RxAssociationConstraintsPipe], exports: [RxAssociationCardinalityPipe, RxAssociationConstraintsPipe] });\nRxAssociationPipesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationPipesModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxAssociationPipesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RxAssociationCardinalityPipe, RxAssociationConstraintsPipe],\n                    exports: [RxAssociationCardinalityPipe, RxAssociationConstraintsPipe]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RX_ASSOCIATED_RECORD_NODE_SIDES, RX_ASSOCIATION_DEFINITION, RxAssociatedRecordNodeSide, RxAssociationCardinalityPipe, RxAssociationConstraintsPipe, RxAssociationDefinitionCacheService, RxAssociationDefinitionDataPageService, RxAssociationDefinitionService, RxAssociationInstanceDataPageService, RxAssociationInstanceService, RxAssociationNodeTreeDataPageService, RxAssociationPipesModule, RxCardinalityType, RxModalityType, associateMultipleCommand, disassociateMultipleCommand };\n//# sourceMappingURL=helix-platform-association-api.js.map\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,eAAe;AAC1D,OAAO,KAAKC,IAAI,MAAM,4BAA4B;AAClD,SAASC,QAAQ,EAAEC,SAAS,QAAQ,4BAA4B;AAChE,SAASC,QAAQ,EAAEC,EAAE,QAAQ,MAAM;AACnC,SAASC,SAAS,EAAEC,OAAO,EAAEC,IAAI,QAAQ,QAAQ;AACjD,OAAO,KAAKC,EAAE,MAAM,sBAAsB;AAC1C,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,KAAKC,IAAI,MAAM,qBAAqB;AAE3C,IAAIC,0BAA0B;AAC9B,CAAC,UAAUA,0BAA0B,EAAE;EACnCA,0BAA0B,CAAC,OAAO,CAAC,GAAG,OAAO;EAC7CA,0BAA0B,CAAC,OAAO,CAAC,GAAG,OAAO;AACjD,CAAC,EAAEA,0BAA0B,KAAKA,0BAA0B,GAAG,CAAC,CAAC,CAAC,CAAC;AAEnE,MAAMC,+BAA+B,GAAG;EACpCC,KAAK,EAAE;IACHC,KAAK,EAAEH,0BAA0B,CAACI,KAAK;IACvCC,uBAAuB,EAAE,SAAS;IAClCC,WAAW,EAAE;EACjB,CAAC;EACDC,KAAK,EAAE;IACHJ,KAAK,EAAEH,0BAA0B,CAACQ,KAAK;IACvCH,uBAAuB,EAAE,SAAS;IAClCC,WAAW,EAAE;EACjB;AACJ,CAAC;AAED,MAAMG,sCAAsC,SAASnB,QAAQ,CAAC;EAC1DoB,WAAWA,CAACC,QAAQ,EAAE;IAClB,KAAK,CAACA,QAAQ,EAAE,sFAAsF,CAAC;IACvG,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;EACAC,+BAA+BA,CAACC,qBAAqB,EAAE;IACnD,MAAMC,yBAAyB,GAAGpB,SAAS,CAACmB,qBAAqB,CAAC;IAClE,MAAME,YAAY,GAAGD,yBAAyB,CAACE,GAAG,CAAEC,IAAI,IAAK;MACzD,OAAO,IAAI,CAACC,GAAG,CAAC;QACZC,OAAO,EAAE;UAAE,sBAAsB,EAAE;QAAG,CAAC;QACvCC,MAAM,EAAE;UAAEC,yBAAyB,EAAEJ;QAAK;MAC9C,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAOzB,QAAQ,CAACuB,YAAY,CAAC;EACjC;AACJ;AACAN,sCAAsC,CAACa,IAAI,YAAAC,+CAAAC,CAAA;EAAA,YAAAA,CAAA,IAAwFf,sCAAsC,EAAhDxB,EAAE,CAAAwC,QAAA,CAAgExC,EAAE,CAACyC,QAAQ;AAAA,CAA6C;AACnPjB,sCAAsC,CAACkB,KAAK,kBAD6E1C,EAAE,CAAA2C,kBAAA;EAAAC,KAAA,EACYpB,sCAAsC;EAAAqB,OAAA,EAAtCrB,sCAAsC,CAAAa,IAAA;EAAAS,UAAA,EAAc;AAAM,EAAG;AACpM;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAFyH/C,EAAE,CAAAgD,iBAAA,CAEhCxB,sCAAsC,EAAc,CAAC;IACpIyB,IAAI,EAAEhD,UAAU;IAChBiD,IAAI,EAAE,CAAC;MACCJ,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEG,IAAI,EAAEjD,EAAE,CAACyC;IAAS,CAAC,CAAC;EAAE,CAAC;AAAA;AAE3E,IAAIU,iBAAiB;AACrB,CAAC,UAAUA,iBAAiB,EAAE;EAC1BA,iBAAiB,CAAC,UAAU,CAAC,GAAG,YAAY;EAC5CA,iBAAiB,CAAC,WAAW,CAAC,GAAG,aAAa;EAC9CA,iBAAiB,CAAC,YAAY,CAAC,GAAG,cAAc;AACpD,CAAC,EAAEA,iBAAiB,KAAKA,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AACjD,IAAIC,cAAc;AAClB,CAAC,UAAUA,cAAc,EAAE;EACvBA,cAAc,CAAC,UAAU,CAAC,GAAG,UAAU;EACvCA,cAAc,CAAC,UAAU,CAAC,GAAG,UAAU;AAC3C,CAAC,EAAEA,cAAc,KAAKA,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC;AAE3C,MAAMC,yBAAyB,GAAG;EAC9BC,QAAQ,EAAE;IACNC,QAAQ,EAAEH,cAAc,CAACI,QAAQ;IACjCC,QAAQ,EAAEL,cAAc,CAACM;EAC7B,CAAC;EACDC,KAAK,EAAE;IACHC,MAAM,EAAE;MACJ1C,KAAK,EAAE;IACX;EACJ,CAAC;EACD2C,WAAW,EAAE;IACTC,QAAQ,EAAE;MACN5C,KAAK,EAAEiC,iBAAiB,CAACY,QAAQ;MACjCC,QAAQ,EAAE;IACd,CAAC;IACDC,SAAS,EAAE;MACP/C,KAAK,EAAEiC,iBAAiB,CAACe,SAAS;MAClCF,QAAQ,EAAE;IACd,CAAC;IACDG,UAAU,EAAE;MACRjD,KAAK,EAAEiC,iBAAiB,CAACiB,UAAU;MACnCJ,QAAQ,EAAE;IACd;EACJ,CAAC;EACDK,WAAW,EAAE,CACT;IACIC,OAAO,EAAE,sEAAsE;IAC/EpD,KAAK,EAAE;EACX,CAAC,EACD;IACIoD,OAAO,EAAE,2CAA2C;IACpDpD,KAAK,EAAE;EACX,CAAC;AAET,CAAC;AAED,MAAMqD,8BAA8B,CAAC;EACjC9C,WAAWA,CAAC+C,UAAU,EAAEC,uBAAuB,EAAE;IAC7C,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,uBAAuB,GAAGA,uBAAuB;EAC1D;EACAxC,GAAGA,CAACyC,yBAAyB,EAAEC,OAAO,EAAE;IACpC,OAAO,IAAI,CAACH,UAAU,CAACvC,GAAG,CAAC,IAAI,CAAC2C,MAAM,CAACF,yBAAyB,CAAC,EAAEC,OAAO,CAAC;EAC/E;EACAE,MAAMA,CAAA,EAAG;IACL,OAAOrE,EAAE,CAAC;MACNwB,IAAI,EAAE,EAAE;MACR8C,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,CAAC,GAAG,CAAC;MAChBC,SAAS,EAAE,CAAC,GAAG,CAAC;MAChBC,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE,IAAI;MACfvB,WAAW,EAAER,yBAAyB,CAACQ,WAAW,CAACC,QAAQ,CAAC5C,KAAK;MACjEmE,mBAAmB,EAAE,KAAK;MAC1BC,aAAa,EAAEjC,yBAAyB,CAACC,QAAQ,CAACG,QAAQ;MAC1D8B,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE,KAAK;MACnBC,KAAK,EAAEnF,SAAS,CAACoF,oBAAoB,CAACC;IAC1C,CAAC,CAAC;EACN;EACAC,MAAMA,CAACC,qBAAqB,EAAE;IAC1B,OAAO,IAAI,CAACrB,UAAU,CAACsB,IAAI,CAAC,IAAI,CAAClB,MAAM,CAAC,CAAC,EAAEiB,qBAAqB,EAAE;MAAEE,OAAO,EAAE;IAAW,CAAC,CAAC;EAC9F;EACAC,MAAMA,CAACH,qBAAqB,EAAElB,OAAO,EAAE;IACnC,OAAO,IAAI,CAACH,UAAU,CAACyB,GAAG,CAAC,IAAI,CAACrB,MAAM,CAACiB,qBAAqB,CAAC7D,IAAI,CAAC,EAAE6D,qBAAqB,EAAElB,OAAO,CAAC;EACvG;EACAuB,MAAMA,CAACxB,yBAAyB,EAAE;IAC9B,OAAO,IAAI,CAACF,UAAU,CAAC0B,MAAM,CAAC,IAAI,CAACtB,MAAM,CAACF,yBAAyB,CAAC,CAAC;EACzE;EACAyB,mBAAmBA,CAACzB,yBAAyB,EAAE;IAC3C,MAAM0B,0BAA0B,GAAG,IAAI,CAAC3B,uBAAuB,CAAC4B,eAAe,CAAC,qFAAqF,CAAC;IACtK,OAAOD,0BAA0B,CAACE,OAAO,CAAC;MAAE5B;IAA0B,CAAC,CAAC;EAC5E;EACA6B,MAAMA,CAACC,4BAA4B,EAAEC,4BAA4B,EAAE;IAC/D,MAAMC,aAAa,GAAG,IAAI,CAACjC,uBAAuB,CAAC4B,eAAe,CAAC,qFAAqF,CAAC;IACzJ,OAAOK,aAAa,CAACJ,OAAO,CAAC;MACzBtE,IAAI,EAAEwE,4BAA4B;MAClCG,OAAO,EAAEF;IACb,CAAC,CAAC;EACN;EACA7B,MAAMA,CAACF,yBAAyB,EAAE;IAC9B,OAAOA,yBAAyB,GACzB,yDAAwDkC,kBAAkB,CAAClC,yBAAyB,CAAE,EAAC,GACvG,uDAAsD;EACjE;AACJ;AACAH,8BAA8B,CAAClC,IAAI,YAAAwE,uCAAAtE,CAAA;EAAA,YAAAA,CAAA,IAAwFgC,8BAA8B,EA7GhCvE,EAAE,CAAAwC,QAAA,CA6GgD5B,EAAE,CAACkG,UAAU,GA7G/D9G,EAAE,CAAAwC,QAAA,CA6G0EpC,IAAI,CAAC2G,uBAAuB;AAAA,CAA6C;AAC9QxC,8BAA8B,CAAC7B,KAAK,kBA9GqF1C,EAAE,CAAA2C,kBAAA;EAAAC,KAAA,EA8GI2B,8BAA8B;EAAA1B,OAAA,EAA9B0B,8BAA8B,CAAAlC,IAAA;EAAAS,UAAA,EAAc;AAAM,EAAG;AACpL;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KA/GyH/C,EAAE,CAAAgD,iBAAA,CA+GhCuB,8BAA8B,EAAc,CAAC;IAC5HtB,IAAI,EAAEhD,UAAU;IAChBiD,IAAI,EAAE,CAAC;MACCJ,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEG,IAAI,EAAErC,EAAE,CAACkG;IAAW,CAAC,EAAE;MAAE7D,IAAI,EAAE7C,IAAI,CAAC2G;IAAwB,CAAC,CAAC;EAAE,CAAC;AAAA;AAErH,MAAMC,gCAAgC,GAAG,oFAAoF;AAC7H,MAAMC,oCAAoC,SAAS5G,QAAQ,CAAC;EACxDoB,WAAWA,CAACC,QAAQ,EAAEwF,YAAY,EAAE;IAChC,KAAK,CAACxF,QAAQ,EAAEsF,gCAAgC,CAAC;IACjD,IAAI,CAACtF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACwF,YAAY,GAAGA,YAAY;EACpC;EACAjF,GAAGA,CAACkF,4BAA4B,GAAG,CAAC,CAAC,EAAE;IACnC,IAAI,CAACD,YAAY,CAACE,OAAO,CAAC,2FAA2F,CAAC;IACtH,OAAO,KAAK,CAACnF,GAAG,CAACkF,4BAA4B,CAAC;EAClD;AACJ;AACAF,oCAAoC,CAAC5E,IAAI,YAAAgF,6CAAA9E,CAAA;EAAA,YAAAA,CAAA,IAAwF0E,oCAAoC,EAlI5CjH,EAAE,CAAAwC,QAAA,CAkI4DxC,EAAE,CAACyC,QAAQ,GAlIzEzC,EAAE,CAAAwC,QAAA,CAkIoFpC,IAAI,CAACkH,YAAY;AAAA,CAA6C;AAC7QL,oCAAoC,CAACvE,KAAK,kBAnI+E1C,EAAE,CAAA2C,kBAAA;EAAAC,KAAA,EAmIUqE,oCAAoC;EAAApE,OAAA,EAApCoE,oCAAoC,CAAA5E,IAAA;EAAAS,UAAA,EAAc;AAAM,EAAG;AAChM;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KApIyH/C,EAAE,CAAAgD,iBAAA,CAoIhCiE,oCAAoC,EAAc,CAAC;IAClIhE,IAAI,EAAEhD,UAAU;IAChBiD,IAAI,EAAE,CAAC;MACCJ,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEG,IAAI,EAAEjD,EAAE,CAACyC;IAAS,CAAC,EAAE;MAAEQ,IAAI,EAAE7C,IAAI,CAACkH;IAAa,CAAC,CAAC;EAAE,CAAC;AAAA;AAExG,MAAMC,wBAAwB,GAAG,2EAA2E;AAC5G,MAAMC,2BAA2B,GAAG,8EAA8E;AAClH,MAAMC,4BAA4B,CAAC;EAC/BhG,WAAWA,CAACgD,uBAAuB,EAAE;IACjC,IAAI,CAACA,uBAAuB,GAAGA,uBAAuB;IACtD,IAAI,CAACiD,gBAAgB,GAAG,IAAI,CAACjD,uBAAuB,CAAC4B,eAAe,CAACkB,wBAAwB,CAAC;IAC9F,IAAI,CAACI,mBAAmB,GAAG,IAAI,CAAClD,uBAAuB,CAAC4B,eAAe,CAACmB,2BAA2B,CAAC;EACxG;EACAI,gBAAgBA,CAAClD,yBAAyB,EAAEmD,QAAQ,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,SAAS,EAAEC,SAAS,EAAE;IACnG,OAAO,IAAI,CAACP,gBAAgB,CAACpB,OAAO,CAAC;MACjC5B,yBAAyB;MACzBwD,sBAAsB,EAAEzH,SAAS,CAACoH,QAAQ,CAAC;MAC3CM,sBAAsB,EAAE1H,SAAS,CAACqH,QAAQ,CAAC;MAC3CC,eAAe;MACfC,SAAS;MACTC;IACJ,CAAC,CAAC;EACN;EACAG,mBAAmBA,CAAC1D,yBAAyB,EAAEmD,QAAQ,EAAEC,QAAQ,EAAE;IAC/D,OAAO,IAAI,CAACH,mBAAmB,CAACrB,OAAO,CAAC;MACpC5B,yBAAyB;MACzBwD,sBAAsB,EAAEzH,SAAS,CAACoH,QAAQ,CAAC;MAC3CM,sBAAsB,EAAE1H,SAAS,CAACqH,QAAQ;IAC9C,CAAC,CAAC;EACN;AACJ;AACAL,4BAA4B,CAACpF,IAAI,YAAAgG,qCAAA9F,CAAA;EAAA,YAAAA,CAAA,IAAwFkF,4BAA4B,EArK5BzH,EAAE,CAAAwC,QAAA,CAqK4CpC,IAAI,CAAC2G,uBAAuB;AAAA,CAA6C;AAChPU,4BAA4B,CAAC/E,KAAK,kBAtKuF1C,EAAE,CAAA2C,kBAAA;EAAAC,KAAA,EAsKE6E,4BAA4B;EAAA5E,OAAA,EAA5B4E,4BAA4B,CAAApF,IAAA;EAAAS,UAAA,EAAc;AAAM,EAAG;AAChL;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAvKyH/C,EAAE,CAAAgD,iBAAA,CAuKhCyE,4BAA4B,EAAc,CAAC;IAC1HxE,IAAI,EAAEhD,UAAU;IAChBiD,IAAI,EAAE,CAAC;MACCJ,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEG,IAAI,EAAE7C,IAAI,CAAC2G;IAAwB,CAAC,CAAC;EAAE,CAAC;AAAA;AAE5F,MAAMuB,gCAAgC,GAAG,oFAAoF;AAC7H,MAAMC,oCAAoC,SAASlI,QAAQ,CAAC;EACxDoB,WAAWA,CAACC,QAAQ,EAAE;IAClB,KAAK,CAACA,QAAQ,EAAE4G,gCAAgC,EAAE;MAC9CnG,MAAM,EAAE;QACJqG,KAAK,EAAE;MACX;IACJ,CAAC,CAAC;IACF,IAAI,CAAC9G,QAAQ,GAAGA,QAAQ;EAC5B;AACJ;AACA6G,oCAAoC,CAAClG,IAAI,YAAAoG,6CAAAlG,CAAA;EAAA,YAAAA,CAAA,IAAwFgG,oCAAoC,EAzL5CvI,EAAE,CAAAwC,QAAA,CAyL4DxC,EAAE,CAACyC,QAAQ;AAAA,CAA6C;AAC/O8F,oCAAoC,CAAC7F,KAAK,kBA1L+E1C,EAAE,CAAA2C,kBAAA;EAAAC,KAAA,EA0LU2F,oCAAoC;EAAA1F,OAAA,EAApC0F,oCAAoC,CAAAlG,IAAA;EAAAS,UAAA,EAAc;AAAM,EAAG;AAChM;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KA3LyH/C,EAAE,CAAAgD,iBAAA,CA2LhCuF,oCAAoC,EAAc,CAAC;IAClItF,IAAI,EAAEhD,UAAU;IAChBiD,IAAI,EAAE,CAAC;MACCJ,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEG,IAAI,EAAEjD,EAAE,CAACyC;IAAS,CAAC,CAAC;EAAE,CAAC;AAAA;AAE3E,MAAMiG,mCAAmC,CAAC;EACtCjH,WAAWA,CAACkH,8BAA8B,EAAE;IACxC,IAAI,CAACA,8BAA8B,GAAGA,8BAA8B;IACpE,IAAI,CAACC,sBAAsB,GAAG,IAAIC,GAAG,CAAC,CAAC;IACvC,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC9B;EACAC,wBAAwBA,CAACtE,yBAAyB,EAAEC,OAAO,EAAE;IACzD,IAAI,CAAC,IAAI,CAACiE,sBAAsB,CAACK,GAAG,CAACvE,yBAAyB,CAAC,EAAE;MAC7D,MAAMwE,sBAAsB,GAAG,IAAI,CAACP,8BAA8B,CAC7D1G,GAAG,CAACyC,yBAAyB,EAAEC,OAAO,CAAC,CACvCwE,IAAI,CAACtI,WAAW,CAAC,CAAC,CAAC,CAAC;MACzB,IAAI,CAAC+H,sBAAsB,CAACQ,GAAG,CAAC1E,yBAAyB,EAAEwE,sBAAsB,CAAC;IACtF;IACA,OAAO,IAAI,CAACN,sBAAsB,CAAC3G,GAAG,CAACyC,yBAAyB,CAAC;EACrE;EACA2E,gBAAgBA,CAACC,gBAAgB,EAAE;IAC/B,IAAI,CAACR,SAAS,CAACS,GAAG,CAACD,gBAAgB,CAAC;IACpCA,gBAAgB,CAACE,SAAS,CAAC,MAAM;MAC7B,IAAI,CAACV,SAAS,CAAC5C,MAAM,CAACoD,gBAAgB,CAAC;MACvC,IAAI5I,OAAO,CAAC,IAAI,CAACoI,SAAS,CAAC,EAAE;QACzB,IAAI,CAACW,UAAU,CAAC,CAAC;MACrB;IACJ,CAAC,CAAC;EACN;EACAA,UAAUA,CAAA,EAAG;IACT,IAAI,CAACb,sBAAsB,CAACc,KAAK,CAAC,CAAC;EACvC;AACJ;AACAhB,mCAAmC,CAACrG,IAAI,YAAAsH,4CAAApH,CAAA;EAAA,YAAAA,CAAA,IAAwFmG,mCAAmC,EA9N1C1I,EAAE,CAAAwC,QAAA,CA8N0D+B,8BAA8B;AAAA,CAA6C;AAChQmE,mCAAmC,CAAChG,KAAK,kBA/NgF1C,EAAE,CAAA2C,kBAAA;EAAAC,KAAA,EA+NS8F,mCAAmC;EAAA7F,OAAA,EAAnC6F,mCAAmC,CAAArG,IAAA;EAAAS,UAAA,EAAc;AAAM,EAAG;AAC9L;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAhOyH/C,EAAE,CAAAgD,iBAAA,CAgOhC0F,mCAAmC,EAAc,CAAC;IACjIzF,IAAI,EAAEhD,UAAU;IAChBiD,IAAI,EAAE,CAAC;MACCJ,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEG,IAAI,EAAEsB;IAA+B,CAAC,CAAC;EAAE,CAAC;AAAA;AAE9F,MAAMqF,4BAA4B,CAAC;EAC/BnI,WAAWA,CAACoI,gBAAgB,EAAE;IAC1B,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;EAC5C;EACAC,SAASA,CAAC5I,KAAK,EAAE;IACb,OAAO,IAAI,CAAC2I,gBAAgB,CAACE,OAAO,CAACpJ,IAAI,CAAC0C,yBAAyB,CAACQ,WAAW,EAAE,CAAC,OAAO,EAAE3C,KAAK,CAAC,CAAC,CAAC8C,QAAQ,CAAC;EAChH;AACJ;AACA4F,4BAA4B,CAACvH,IAAI,YAAA2H,qCAAAzH,CAAA;EAAA,YAAAA,CAAA,IAAwFqH,4BAA4B,EA/O5B5J,EAAE,CAAAiK,iBAAA,CA+O4CnJ,IAAI,CAACoJ,gBAAgB;AAAA,CAAuC;AACnON,4BAA4B,CAACO,KAAK,kBAhPuFnK,EAAE,CAAAoK,YAAA;EAAApI,IAAA;EAAAiB,IAAA,EAgPJ2G,4BAA4B;EAAAS,IAAA;AAAA,EAAyC;AAC5L;EAAA,QAAAtH,SAAA,oBAAAA,SAAA,KAjPyH/C,EAAE,CAAAgD,iBAAA,CAiPhC4G,4BAA4B,EAAc,CAAC;IAC1H3G,IAAI,EAAE/C,IAAI;IACVgD,IAAI,EAAE,CAAC;MACClB,IAAI,EAAE;IACV,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEiB,IAAI,EAAEnC,IAAI,CAACoJ;IAAiB,CAAC,CAAC;EAAE,CAAC;AAAA;AAErF,MAAMI,4BAA4B,CAAC;EAC/B7I,WAAWA,CAACoI,gBAAgB,EAAE;IAC1B,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;EAC5C;EACAC,SAASA,CAAC5I,KAAK,EAAE;IACb,OAAO,IAAI,CAAC2I,gBAAgB,CAACE,OAAO,CAACpJ,IAAI,CAAC0C,yBAAyB,CAACgB,WAAW,EAAE,CAAC,OAAO,EAAEnD,KAAK,CAAC,CAAC,CAACoD,OAAO,CAAC;EAC/G;AACJ;AACAgG,4BAA4B,CAACjI,IAAI,YAAAkI,qCAAAhI,CAAA;EAAA,YAAAA,CAAA,IAAwF+H,4BAA4B,EAhQ5BtK,EAAE,CAAAiK,iBAAA,CAgQ4CnJ,IAAI,CAACoJ,gBAAgB;AAAA,CAAuC;AACnOI,4BAA4B,CAACH,KAAK,kBAjQuFnK,EAAE,CAAAoK,YAAA;EAAApI,IAAA;EAAAiB,IAAA,EAiQJqH,4BAA4B;EAAAD,IAAA;AAAA,EAAyC;AAC5L;EAAA,QAAAtH,SAAA,oBAAAA,SAAA,KAlQyH/C,EAAE,CAAAgD,iBAAA,CAkQhCsH,4BAA4B,EAAc,CAAC;IAC1HrH,IAAI,EAAE/C,IAAI;IACVgD,IAAI,EAAE,CAAC;MACClB,IAAI,EAAE;IACV,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEiB,IAAI,EAAEnC,IAAI,CAACoJ;IAAiB,CAAC,CAAC;EAAE,CAAC;AAAA;AAErF,MAAMM,wBAAwB,CAAC;AAE/BA,wBAAwB,CAACnI,IAAI,YAAAoI,iCAAAlI,CAAA;EAAA,YAAAA,CAAA,IAAwFiI,wBAAwB;AAAA,CAAkD;AAC/LA,wBAAwB,CAACE,IAAI,kBA5Q4F1K,EAAE,CAAA2K,gBAAA;EAAA1H,IAAA,EA4QLuH,wBAAwB;EAAAI,YAAA,GAAiBhB,4BAA4B,EAAEU,4BAA4B;EAAAO,OAAA,GAAajB,4BAA4B,EAAEU,4BAA4B;AAAA,EAAI;AACpSE,wBAAwB,CAACM,IAAI,kBA7Q4F9K,EAAE,CAAA+K,gBAAA,IA6QsB;AACjJ;EAAA,QAAAhI,SAAA,oBAAAA,SAAA,KA9QyH/C,EAAE,CAAAgD,iBAAA,CA8QhCwH,wBAAwB,EAAc,CAAC;IACtHvH,IAAI,EAAE9C,QAAQ;IACd+C,IAAI,EAAE,CAAC;MACC0H,YAAY,EAAE,CAAChB,4BAA4B,EAAEU,4BAA4B,CAAC;MAC1EO,OAAO,EAAE,CAACjB,4BAA4B,EAAEU,4BAA4B;IACxE,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAAStJ,+BAA+B,EAAEqC,yBAAyB,EAAEtC,0BAA0B,EAAE6I,4BAA4B,EAAEU,4BAA4B,EAAE5B,mCAAmC,EAAElH,sCAAsC,EAAE+C,8BAA8B,EAAE0C,oCAAoC,EAAEQ,4BAA4B,EAAEc,oCAAoC,EAAEiC,wBAAwB,EAAErH,iBAAiB,EAAEC,cAAc,EAAEmE,wBAAwB,EAAEC,2BAA2B;AACte"},"metadata":{},"sourceType":"module"}