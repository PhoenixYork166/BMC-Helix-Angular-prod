{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i3 from '@ngx-translate/core';\nimport { ReplaySubject, combineLatest, of, forkJoin } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { reject, isEmpty, omit, last, forEach, find, filter, flatten, transform, map as map$1, pick } from 'lodash';\nimport * as i2 from '@helix/platform/utils';\nimport * as i1 from '@helix/platform/shared/api';\nimport { DataPage, RX_BUNDLE } from '@helix/platform/shared/api';\nimport { CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nclass RxProcessDataDictionaryService {\n  constructor(rxDataDictionaryUtils, rxDesignerCacheService, rxGlobalCacheService, rxIdService, rxObjectUtilsService, translateService) {\n    this.rxDataDictionaryUtils = rxDataDictionaryUtils;\n    this.rxDesignerCacheService = rxDesignerCacheService;\n    this.rxGlobalCacheService = rxGlobalCacheService;\n    this.rxIdService = rxIdService;\n    this.rxObjectUtilsService = rxObjectUtilsService;\n    this.translateService = translateService;\n    this.commonActivities = null;\n    this.commonActivitiesSubject = new ReplaySubject(1);\n    this.commonActivities$ = this.commonActivitiesSubject.asObservable();\n    this.commonActivitiesDataDictionaryStateClone$ = this.commonActivities$.pipe(map(activitiesDataDictionaryState => activitiesDataDictionaryState ? this.rxObjectUtilsService.cloneDeep(activitiesDataDictionaryState) : {}), shareReplay(1));\n    this.commonDataDictionary$ = this.getCommonDataDictionary();\n  }\n  clear() {\n    this.setCommonActivities(null);\n  }\n  getCommonDataDictionary() {\n    return combineLatest([this.commonActivitiesDataDictionaryStateClone$.pipe(map(componentsDataDictionaryState => Object.values(componentsDataDictionaryState)))]).pipe(map(([activitiesDataDictionaryBranches]) => {\n      return [{\n        label: 'General',\n        children: [{\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-date.label'),\n          icon: 'd-icon-dollar',\n          expression: '$DATE$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-date-time.label'),\n          icon: 'd-icon-dollar',\n          expression: '$TIMESTAMP$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-group-ids.label'),\n          icon: 'd-icon-dollar',\n          expression: '$GROUPIDS$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-groups.label'),\n          icon: 'd-icon-dollar',\n          expression: '$GROUPS$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-roles.label'),\n          icon: 'd-icon-dollar',\n          expression: '$ROLES$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-server-urls.label'),\n          icon: 'd-icon-dollar',\n          expression: '$SERVERURL$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-time.label'),\n          icon: 'd-icon-dollar',\n          expression: '$TIME$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-user.label'),\n          icon: 'd-icon-dollar',\n          expression: '$USER$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-user-locale.label'),\n          icon: 'd-icon-dollar',\n          expression: '$LOCALE$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-week-day.label'),\n          icon: 'd-icon-dollar',\n          expression: '$WEEKDAY$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.new-line.label'),\n          icon: 'd-icon-dollar',\n          expression: '$NEWLINE$'\n        }, {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.keywords.process-correlation-id.label'),\n          icon: 'd-icon-dollar',\n          expression: '$PROCESSCORRELATIONID$'\n        }, {\n          label: 'NULL',\n          icon: 'd-icon-dollar',\n          expression: '$NULL$',\n          hidden: true\n        }]\n      }, {\n        label: 'Functions',\n        expanded: true,\n        children: reject(this.rxDataDictionaryUtils.getFunctionDataDictionaryBranch(this.rxDesignerCacheService.getFunctionDescriptorsSync()), {\n          label: 'Rule Qualification'\n        })\n      }, {\n        label: 'Activities',\n        expanded: true,\n        children: activitiesDataDictionaryBranches\n      }];\n    }));\n  }\n  setCommonActivitiesDataDictionaryBranch(guid, activityDataDictionaryBranch) {\n    activityDataDictionaryBranch.pipe(take(1)).subscribe(dataDictionaryBranch => {\n      this.setCommonActivities(isEmpty(dataDictionaryBranch) ? omit(this.commonActivities, [guid]) : Object.assign(Object.assign({}, this.commonActivities), {\n        [guid]: dataDictionaryBranch\n      }));\n    });\n  }\n  setCommonActivities(state) {\n    this.commonActivities = state;\n    this.commonActivitiesSubject.next(this.commonActivities);\n  }\n}\nRxProcessDataDictionaryService.ɵfac = function RxProcessDataDictionaryService_Factory(t) {\n  return new (t || RxProcessDataDictionaryService)(i0.ɵɵinject(i1.RxDataDictionaryUtils), i0.ɵɵinject(i1.RxDesignerCacheService), i0.ɵɵinject(i1.RxGlobalCacheService), i0.ɵɵinject(i2.RxIdService), i0.ɵɵinject(i2.RxObjectUtilsService), i0.ɵɵinject(i3.TranslateService));\n};\nRxProcessDataDictionaryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessDataDictionaryService,\n  factory: RxProcessDataDictionaryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessDataDictionaryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxDataDictionaryUtils\n    }, {\n      type: i1.RxDesignerCacheService\n    }, {\n      type: i1.RxGlobalCacheService\n    }, {\n      type: i2.RxIdService\n    }, {\n      type: i2.RxObjectUtilsService\n    }, {\n      type: i3.TranslateService\n    }];\n  }, null);\n})();\nconst specialActionTypeNames = {\n  connector: 'connector',\n  webRequest: 'WebRequest',\n  jitterbit: 'iPaaS Jitterbit',\n  mulesoft: 'iPaaS MuleSoft'\n};\nconst processElementResourceTypes = {\n  boundaryEvent: 'com.bmc.arsys.rx.services.process.domain.BoundaryEventDefinition',\n  callActivity: 'com.bmc.arsys.rx.services.process.domain.CallActivityDefinition',\n  endEvent: 'com.bmc.arsys.rx.services.process.domain.EndEventDefinition',\n  errorEvent: 'com.bmc.arsys.rx.services.process.domain.ErrorEventDefinition',\n  exclusiveGateway: 'com.bmc.arsys.rx.services.process.domain.ExclusiveGatewayDefinition',\n  parallelGateway: 'com.bmc.arsys.rx.services.process.domain.ParallelGatewayDefinition',\n  processAction: 'com.bmc.arsys.rx.services.process.domain.ServiceTaskDefinition',\n  receiveTask: 'com.bmc.arsys.rx.services.process.domain.ReceiveTaskDefinition',\n  sequenceFlow: 'com.bmc.arsys.rx.services.process.domain.SequenceFlowDefinition',\n  startEvent: 'com.bmc.arsys.rx.services.process.domain.StartEventDefinition',\n  subProcess: 'com.bmc.arsys.rx.services.process.domain.SubProcessDefinition',\n  textAnnotation: 'com.bmc.arsys.rx.services.process.domain.TextAnnotation',\n  textAnnotationAssociation: 'com.bmc.arsys.rx.services.process.domain.TextAnnotationAssociation',\n  timerEvent: 'com.bmc.arsys.rx.services.process.domain.TimerEventDefinition',\n  userTask: 'com.bmc.arsys.rx.services.process.domain.UserTaskDefinition'\n};\nconst processElementNamesByResourceType = {\n  // process event resource types\n  [processElementResourceTypes.boundaryEvent]: 'Boundary',\n  [processElementResourceTypes.endEvent]: 'End',\n  [processElementResourceTypes.errorEvent]: 'Error',\n  [processElementResourceTypes.startEvent]: 'Start',\n  [processElementResourceTypes.timerEvent]: 'Timer',\n  // process element resource types\n  [processElementResourceTypes.callActivity]: 'Call Activity',\n  [processElementResourceTypes.exclusiveGateway]: 'Exclusive',\n  [processElementResourceTypes.parallelGateway]: 'Parallel',\n  [processElementResourceTypes.receiveTask]: 'Receive Task',\n  [processElementResourceTypes.subProcess]: 'Sub-Process',\n  [processElementResourceTypes.textAnnotation]: 'Annotation',\n  [processElementResourceTypes.userTask]: 'User Task',\n  // rule element resource types\n  'com.bmc.arsys.rx.services.rule.domain.CancelProcessInstanceAction': 'Cancel Process',\n  'com.bmc.arsys.rx.services.rule.domain.SignalProcessInstanceAction': 'Signal Process',\n  'com.bmc.arsys.rx.services.rule.domain.StartProcessInstanceAction': 'Start Process',\n  ruleQualificationResourceType: 'Qualification'\n};\nconst standardProcessElementGroups = {\n  activities: {\n    name: 'Activities',\n    priority: 1\n  },\n  annotations: {\n    name: 'Annotations',\n    priority: 2\n  },\n  events: {\n    name: 'Events',\n    priority: 3\n  },\n  gateways: {\n    name: 'Gateways',\n    priority: 4\n  },\n  platformActions: {\n    name: 'Platform actions',\n    priority: 5\n  },\n  default: {\n    priority: 6\n  }\n};\nconst standardProcessElements = [{\n  group: standardProcessElementGroups.annotations.name,\n  resourceType: processElementResourceTypes.textAnnotation\n}, {\n  group: standardProcessElementGroups.events.name,\n  resourceType: processElementResourceTypes.startEvent\n}, {\n  group: standardProcessElementGroups.events.name,\n  resourceType: processElementResourceTypes.endEvent\n}, {\n  group: standardProcessElementGroups.events.name,\n  resourceType: processElementResourceTypes.boundaryEvent,\n  eventResourceType: processElementResourceTypes.timerEvent\n}, {\n  group: standardProcessElementGroups.events.name,\n  resourceType: processElementResourceTypes.boundaryEvent,\n  eventResourceType: processElementResourceTypes.errorEvent\n}, {\n  group: standardProcessElementGroups.events.name,\n  resourceType: processElementResourceTypes.endEvent,\n  eventResourceType: processElementResourceTypes.errorEvent\n}, {\n  group: standardProcessElementGroups.activities.name,\n  resourceType: processElementResourceTypes.callActivity\n}, {\n  group: standardProcessElementGroups.activities.name,\n  resourceType: processElementResourceTypes.processAction,\n  actionTypeName: specialActionTypeNames.connector\n}, {\n  group: standardProcessElementGroups.activities.name,\n  resourceType: processElementResourceTypes.receiveTask\n}, {\n  group: standardProcessElementGroups.activities.name,\n  resourceType: processElementResourceTypes.subProcess\n}, {\n  group: standardProcessElementGroups.activities.name,\n  resourceType: processElementResourceTypes.userTask\n}, {\n  group: standardProcessElementGroups.activities.name,\n  resourceType: processElementResourceTypes.processAction,\n  actionTypeName: specialActionTypeNames.webRequest\n}, {\n  group: standardProcessElementGroups.activities.name,\n  resourceType: processElementResourceTypes.processAction,\n  actionTypeName: specialActionTypeNames.jitterbit\n}, {\n  group: standardProcessElementGroups.activities.name,\n  resourceType: processElementResourceTypes.processAction,\n  actionTypeName: specialActionTypeNames.mulesoft\n}, {\n  group: standardProcessElementGroups.gateways.name,\n  resourceType: processElementResourceTypes.parallelGateway\n}, {\n  group: standardProcessElementGroups.gateways.name,\n  resourceType: processElementResourceTypes.exclusiveGateway\n}];\nconst RX_PROCESS_DEFINITION = {\n  processElementDisplayNames: {\n    endEvent: 'End',\n    startEvent: 'Start'\n  },\n  processElementNamesByResourceType,\n  processElementResourceTypes,\n  processElementTypes: {\n    endEvent: 'rx.EndEvent',\n    processAction: 'rx.ProcessAction',\n    startEvent: 'rx.StartEvent'\n  },\n  processElementGroups: [standardProcessElementGroups.activities, standardProcessElementGroups.annotations, standardProcessElementGroups.events, standardProcessElementGroups.gateways, standardProcessElementGroups.platformActions],\n  standardProcessElements,\n  standardProcessElementGroups,\n  processElementConfigurationProperties: ['actionTypeName', 'calledProcessDefinitionName', 'eventResourceType', 'resourceType'],\n  processVariableSubTypes: {\n    attachment: 11,\n    character: 4\n  },\n  processVariableTypes: {\n    record: 'com.bmc.arsys.rx.services.process.domain.record.RecordInstanceFieldType',\n    default: 'com.bmc.arsys.rx.services.record.domain.DefaultFieldType'\n  },\n  runAsUser: {\n    administrator: {\n      definitionValue: false,\n      modelValue: 'administrator'\n    },\n    currentUser: {\n      definitionValue: true,\n      modelValue: 'currentUser'\n    },\n    inheritFromProcess: {\n      definitionValue: null,\n      modelValue: 'inheritFromProcess'\n    }\n  }\n};\nclass RxProcessElementRegistryService {\n  constructor(rxLogService) {\n    this.rxLogService = rxLogService;\n    this.elementDescriptors = new Map();\n  }\n  get(type) {\n    var _a;\n    return (_a = this.elementDescriptors.get(type)) !== null && _a !== void 0 ? _a : this.elementDescriptors.get(RX_PROCESS_DEFINITION.processElementTypes.processAction);\n  }\n  getAll() {\n    return Array.from(this.elementDescriptors.values());\n  }\n  register(descriptor) {\n    if (this.elementDescriptors.has(descriptor.type)) {\n      this.rxLogService.warning(`Process element ${descriptor.type} is already registered.`);\n    } else {\n      joint.util.setByPath(joint.shapes.rx, descriptor.shapeType, descriptor.shapeClass, '.');\n      joint.util.setByPath(joint.shapes.rx, descriptor.viewShapeType, descriptor.viewShapeClass, '.');\n      this.elementDescriptors.set(descriptor.type, descriptor);\n    }\n  }\n}\nRxProcessElementRegistryService.ɵfac = function RxProcessElementRegistryService_Factory(t) {\n  return new (t || RxProcessElementRegistryService)(i0.ɵɵinject(i1.RxLogService));\n};\nRxProcessElementRegistryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessElementRegistryService,\n  factory: RxProcessElementRegistryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessElementRegistryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxLogService\n    }];\n  }, null);\n})();\nclass RxCallActivityRegistryService {\n  constructor() {\n    this.callActivityDescriptors = new Map();\n  }\n  getRegisteredCallActivities() {\n    return this.callActivityDescriptors.values();\n  }\n  register(...callActivityDescriptors) {\n    callActivityDescriptors.forEach(descriptor => {\n      this.callActivityDescriptors.set(descriptor.processDefinitionName, descriptor);\n    });\n  }\n}\nRxCallActivityRegistryService.ɵfac = function RxCallActivityRegistryService_Factory(t) {\n  return new (t || RxCallActivityRegistryService)();\n};\nRxCallActivityRegistryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxCallActivityRegistryService,\n  factory: RxCallActivityRegistryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxCallActivityRegistryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nvar ElementVisibilityOptions;\n(function (ElementVisibilityOptions) {\n  ElementVisibilityOptions[\"Always\"] = \"Always\";\n  ElementVisibilityOptions[\"Never\"] = \"Never\";\n})(ElementVisibilityOptions || (ElementVisibilityOptions = {}));\nclass RxProcessApiModule {\n  constructor(rxCallActivityRegistryService) {\n    this.rxCallActivityRegistryService = rxCallActivityRegistryService;\n    this.rxCallActivityRegistryService.register({\n      displayName: 'Approval Process',\n      processDefinitionName: 'com.bmc.arsys.rx.approval:Approval Process V2',\n      callActivityManagerServiceName: 'apApprovalProcessCallActivityManager',\n      visibility: ElementVisibilityOptions.Always\n    });\n  }\n}\nRxProcessApiModule.ɵfac = function RxProcessApiModule_Factory(t) {\n  return new (t || RxProcessApiModule)(i0.ɵɵinject(RxCallActivityRegistryService));\n};\nRxProcessApiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RxProcessApiModule,\n  imports: [CommonModule]\n});\nRxProcessApiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessApiModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule]\n    }]\n  }], function () {\n    return [{\n      type: RxCallActivityRegistryService\n    }];\n  }, null);\n})();\nconst processDefinitionDataPageQuery = 'com.bmc.arsys.rx.application.process.datapage.ProcessDefinitionDataPageQuery';\nclass RxProcessDefinitionDataPageService extends DataPage {\n  constructor(injector) {\n    super(injector, processDefinitionDataPageQuery);\n    this.injector = injector;\n  }\n}\nRxProcessDefinitionDataPageService.ɵfac = function RxProcessDefinitionDataPageService_Factory(t) {\n  return new (t || RxProcessDefinitionDataPageService)(i0.ɵɵinject(i0.Injector));\n};\nRxProcessDefinitionDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessDefinitionDataPageService,\n  factory: RxProcessDefinitionDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessDefinitionDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass RxProcessDefinitionService {\n  constructor(httpClient, rxGuidService) {\n    this.httpClient = httpClient;\n    this.rxGuidService = rxGuidService;\n  }\n  get(processDefinitionName, options) {\n    return this.httpClient.get(this.getUrl(processDefinitionName), options);\n  }\n  getNew() {\n    return of({\n      allowOverlay: false,\n      artifacts: [],\n      contextKeyParam: null,\n      description: '',\n      flowElements: [],\n      guid: this.rxGuidService.generate('rx-'),\n      inputParams: [],\n      isEnabled: true,\n      lastChangedBy: null,\n      lastUpdateTime: null,\n      layout: JSON.stringify({\n        cells: []\n      }),\n      localVariables: [],\n      localizableStrings: {},\n      name: '',\n      outputParams: [],\n      overlayDescriptor: null,\n      overlayGroupId: null,\n      owner: null,\n      permissions: [],\n      runAsUser: false,\n      scope: RX_BUNDLE.definitionScopeTypes.bundle,\n      synchronous: null\n    });\n  }\n  getServerActionModelType(actionTypeName) {\n    return `rx.ProcessActions.${actionTypeName.replace(':', '.')}`;\n  }\n  getServerActionTypeName(modelType) {\n    return last(modelType.split('.'));\n  }\n  update(processDefinition, options) {\n    return this.httpClient.put(this.getUrl(processDefinition.name), processDefinition, options);\n  }\n  getOutputParams(processDefinitionName, options) {\n    return this.httpClient.get(`/api/rx/application/process/processdefinition/${encodeURIComponent(processDefinitionName)}/outputParams`, options);\n  }\n  getInputParams(processDefinitionName, options) {\n    return this.httpClient.get(`/api/rx/application/process/processdefinition/${encodeURIComponent(processDefinitionName)}/inputParams`, options);\n  }\n  getUrl(processDefinitionName) {\n    return processDefinitionName ? `/api/rx/application/process/processdefinition/${encodeURIComponent(processDefinitionName)}` : '/api/rx/application/process/processdefinition';\n  }\n}\nRxProcessDefinitionService.ɵfac = function RxProcessDefinitionService_Factory(t) {\n  return new (t || RxProcessDefinitionService)(i0.ɵɵinject(i1$1.HttpClient), i0.ɵɵinject(i2.RxGuidService));\n};\nRxProcessDefinitionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessDefinitionService,\n  factory: RxProcessDefinitionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessDefinitionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.HttpClient\n    }, {\n      type: i2.RxGuidService\n    }];\n  }, null);\n})();\nvar ListFieldDefinitionSubType;\n(function (ListFieldDefinitionSubType) {\n  ListFieldDefinitionSubType[ListFieldDefinitionSubType[\"Attachment\"] = 11] = \"Attachment\";\n  ListFieldDefinitionSubType[ListFieldDefinitionSubType[\"Character\"] = 4] = \"Character\";\n})(ListFieldDefinitionSubType || (ListFieldDefinitionSubType = {}));\nclass RxProcessDefinitionCacheService {\n  constructor(rxProcessDefinitionService) {\n    this.rxProcessDefinitionService = rxProcessDefinitionService;\n    this.consumers = new Set();\n    this.processDefinitionCache = new Map();\n    this.processDefinitionOutputParamCache = new Map();\n  }\n  getProcessDefinition(processDefinitionName) {\n    if (!this.processDefinitionCache.has(processDefinitionName)) {\n      const processDefinition$ = this.rxProcessDefinitionService.get(processDefinitionName, {\n        headers: new HttpHeaders({\n          'Design-Time': 'true'\n        })\n      }).pipe(shareReplay(1));\n      this.processDefinitionCache.set(processDefinitionName, processDefinition$);\n    }\n    return this.processDefinitionCache.get(processDefinitionName);\n  }\n  getOutputParams(processDefinitionName) {\n    if (!this.processDefinitionOutputParamCache.has(processDefinitionName)) {\n      const processDefinitionOutputParams$ = this.rxProcessDefinitionService.getOutputParams(processDefinitionName, {\n        headers: new HttpHeaders({\n          'Design-Time': 'true'\n        })\n      }).pipe(shareReplay(1));\n      this.processDefinitionOutputParamCache.set(processDefinitionName, processDefinitionOutputParams$);\n    }\n    return this.processDefinitionOutputParamCache.get(processDefinitionName);\n  }\n  registerConsumer(consumerDestroy$) {\n    this.consumers.add(consumerDestroy$);\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n  clearCache(processDefinitionNames) {\n    if (processDefinitionNames) {\n      forEach(processDefinitionNames, processDefinitionName => {\n        this.processDefinitionCache.delete(processDefinitionName);\n        this.processDefinitionOutputParamCache.delete(processDefinitionName);\n      });\n    } else {\n      this.processDefinitionCache.clear();\n      this.processDefinitionOutputParamCache.clear();\n    }\n  }\n}\nRxProcessDefinitionCacheService.ɵfac = function RxProcessDefinitionCacheService_Factory(t) {\n  return new (t || RxProcessDefinitionCacheService)(i0.ɵɵinject(RxProcessDefinitionService));\n};\nRxProcessDefinitionCacheService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessDefinitionCacheService,\n  factory: RxProcessDefinitionCacheService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessDefinitionCacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxProcessDefinitionService\n    }];\n  }, null);\n})();\nclass RxProcessElementSearchService {\n  find(definition, predicate) {\n    let processElement = this.findElementInDefinition(definition, predicate);\n    if (!processElement) {\n      processElement = find(this.flattenElements(definition), predicate);\n    }\n    return processElement;\n  }\n  findElementInDefinition(definition, predicate) {\n    return find(definition.flowElements, predicate) || find(definition.artifacts, predicate);\n  }\n  findOwner(definition, guid) {\n    const processElement = this.findElementInDefinition(definition, {\n      guid: guid\n    });\n    let result;\n    if (processElement) {\n      result = definition;\n    } else {\n      result = find(this.flattenElements(definition), element => {\n        return this.findElementInDefinition(element, {\n          guid: guid\n        });\n      });\n    }\n    return result;\n  }\n  findByGuid(definition, guid) {\n    return this.find(definition, {\n      guid: guid\n    });\n  }\n  filter(definition, predicate) {\n    return filter(this.flattenElements(definition), predicate);\n  }\n  forEach(definition, iteratee) {\n    return forEach(this.flattenElements(definition), iteratee);\n  }\n  flattenElements(definition) {\n    return flatten(transform([].concat(definition.flowElements || [], definition.artifacts || []), (result, element) => {\n      result.push(element);\n      if (element.flowElements) {\n        result.push(this.flattenElements(element));\n      }\n    }, []));\n  }\n}\nRxProcessElementSearchService.ɵfac = function RxProcessElementSearchService_Factory(t) {\n  return new (t || RxProcessElementSearchService)();\n};\nRxProcessElementSearchService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessElementSearchService,\n  factory: RxProcessElementSearchService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessElementSearchService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass RxProcessElementsService {\n  constructor(rxActionTypeUtilsService, rxBundleCacheService, rxCallActivityRegistryService, rxDefinitionNameService, rxGlobalCacheService, rxStringService) {\n    this.rxActionTypeUtilsService = rxActionTypeUtilsService;\n    this.rxBundleCacheService = rxBundleCacheService;\n    this.rxCallActivityRegistryService = rxCallActivityRegistryService;\n    this.rxDefinitionNameService = rxDefinitionNameService;\n    this.rxGlobalCacheService = rxGlobalCacheService;\n    this.rxStringService = rxStringService;\n  }\n  getActionElements(actionResourceType) {\n    return forkJoin([this.rxBundleCacheService.getActionTypes(), this.rxGlobalCacheService.getBundleDescriptors()]).pipe(map(([actionTypes, bundleDescriptors]) => {\n      return map$1(actionTypes, actionType => {\n        return {\n          group: this.rxActionTypeUtilsService.getActionTypeBundleFriendlyName(bundleDescriptors, actionType) || 'Platform actions',\n          label: actionType.displayName || this.rxActionTypeUtilsService.prettifyActionTypeName(actionType.actionTypeName),\n          value: {\n            actionTypeName: actionType.actionTypeName,\n            resourceType: actionResourceType\n          }\n        };\n      });\n    }));\n  }\n  getCallActivityElements() {\n    return forkJoin([this.rxGlobalCacheService.getBundleDescriptors(), this.getVisibleCallActivities()]).pipe(map(([bundleDescriptors, visibleCallActivities]) => {\n      const callActivityElements = [];\n      forEach(visibleCallActivities, visibleCallActivity => {\n        const bundle = find(bundleDescriptors, {\n          id: this.rxDefinitionNameService.getBundleId(visibleCallActivity.processDefinitionName)\n        });\n        if (bundle) {\n          callActivityElements.push({\n            group: bundle.friendlyName,\n            label: visibleCallActivity.displayName || this.rxStringService.prettify(this.rxDefinitionNameService.getDisplayName(visibleCallActivity.processDefinitionName)),\n            value: {\n              resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.callActivity,\n              calledProcessDefinitionName: visibleCallActivity.processDefinitionName\n            }\n          });\n        }\n      });\n      return callActivityElements;\n    }));\n  }\n  getProcessElements() {\n    return [this.getActionElements(RX_PROCESS_DEFINITION.processElementResourceTypes.processAction), this.getCallActivityElements(), this.getStandardProcessElements()];\n  }\n  getStandardProcessElements() {\n    return of(map$1(RX_PROCESS_DEFINITION.standardProcessElements, element => {\n      let label;\n      if (element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.processAction) {\n        label = this.rxActionTypeUtilsService.prettifyActionTypeName(element.actionTypeName);\n      } else if (element.eventResourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.errorEvent) {\n        const errorEventLabel = RX_PROCESS_DEFINITION.processElementNamesByResourceType[RX_PROCESS_DEFINITION.processElementResourceTypes.errorEvent];\n        const boundaryEventLabel = RX_PROCESS_DEFINITION.processElementNamesByResourceType[RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent];\n        const endEventLabel = RX_PROCESS_DEFINITION.processElementNamesByResourceType[RX_PROCESS_DEFINITION.processElementResourceTypes.endEvent];\n        label = element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent ? `${errorEventLabel} ${boundaryEventLabel}` : `${errorEventLabel} ${endEventLabel}`;\n      } else if (element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent) {\n        label = RX_PROCESS_DEFINITION.processElementNamesByResourceType[element.eventResourceType];\n      } else {\n        label = RX_PROCESS_DEFINITION.processElementNamesByResourceType[element.resourceType];\n      }\n      return {\n        group: element.group,\n        label: label,\n        value: pick(element, RX_PROCESS_DEFINITION.processElementConfigurationProperties)\n      };\n    }));\n  }\n  getVisibleCallActivities() {\n    return of(filter(Array.from(this.rxCallActivityRegistryService.getRegisteredCallActivities()), {\n      visibility: ElementVisibilityOptions.Always\n    }));\n  }\n}\nRxProcessElementsService.ɵfac = function RxProcessElementsService_Factory(t) {\n  return new (t || RxProcessElementsService)(i0.ɵɵinject(i1.RxActionTypeUtilsService), i0.ɵɵinject(i1.RxBundleCacheService), i0.ɵɵinject(RxCallActivityRegistryService), i0.ɵɵinject(i1.RxDefinitionNameService), i0.ɵɵinject(i1.RxGlobalCacheService), i0.ɵɵinject(i2.RxStringService));\n};\nRxProcessElementsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessElementsService,\n  factory: RxProcessElementsService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessElementsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxActionTypeUtilsService\n    }, {\n      type: i1.RxBundleCacheService\n    }, {\n      type: RxCallActivityRegistryService\n    }, {\n      type: i1.RxDefinitionNameService\n    }, {\n      type: i1.RxGlobalCacheService\n    }, {\n      type: i2.RxStringService\n    }];\n  }, null);\n})();\nclass RxProcessInstanceService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  get(processDefinitionName, processInstanceId) {\n    return this.httpClient.get(`/api/rx/application/process/processinstance/${encodeURIComponent(processDefinitionName)}/${processInstanceId}`);\n  }\n  getLog(processDefinitionName, processInstanceId) {\n    return this.httpClient.get(`/api/rx/application/process/processinstance/log/${encodeURIComponent(processDefinitionName)}/${processInstanceId}/view`);\n  }\n  downloadLog(processDefinitionName, processInstanceId) {\n    return this.httpClient.get(`/api/rx/application/process/processinstance/log/${encodeURIComponent(processDefinitionName)}/${processInstanceId}/download`, {\n      responseType: 'blob'\n    });\n  }\n}\nRxProcessInstanceService.ɵfac = function RxProcessInstanceService_Factory(t) {\n  return new (t || RxProcessInstanceService)(i0.ɵɵinject(i1$1.HttpClient));\n};\nRxProcessInstanceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessInstanceService,\n  factory: RxProcessInstanceService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessInstanceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.HttpClient\n    }];\n  }, null);\n})();\nclass RxProcessInstanceCommandsService {\n  constructor(rxCommandFactoryService) {\n    this.rxCommandFactoryService = rxCommandFactoryService;\n    this.startProcessCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.process.command.StartProcessInstanceCommand');\n  }\n  start(processDefinitionName, processInputValues) {\n    return this.startProcessCommand.execute({\n      processDefinitionName,\n      processInputValues\n    }, {\n      observe: 'response',\n      responseType: 'text'\n    });\n  }\n}\nRxProcessInstanceCommandsService.ɵfac = function RxProcessInstanceCommandsService_Factory(t) {\n  return new (t || RxProcessInstanceCommandsService)(i0.ɵɵinject(i1.RxCommandFactoryService));\n};\nRxProcessInstanceCommandsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessInstanceCommandsService,\n  factory: RxProcessInstanceCommandsService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessInstanceCommandsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxCommandFactoryService\n    }];\n  }, null);\n})();\nclass RxProcessInstanceDataPageService extends DataPage {\n  constructor(injector) {\n    super(injector, 'com.bmc.arsys.rx.application.process.datapage.ProcessInstanceDataPageQuery');\n    this.injector = injector;\n  }\n}\nRxProcessInstanceDataPageService.ɵfac = function RxProcessInstanceDataPageService_Factory(t) {\n  return new (t || RxProcessInstanceDataPageService)(i0.ɵɵinject(i0.Injector));\n};\nRxProcessInstanceDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessInstanceDataPageService,\n  factory: RxProcessInstanceDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessInstanceDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass RxProcessInstanceCountsByStatusDataPageService extends DataPage {\n  constructor(injector) {\n    super(injector, 'com.bmc.arsys.rx.application.process.datapage.ProcessInstanceCountsByStatusDataPageQuery');\n    this.injector = injector;\n  }\n}\nRxProcessInstanceCountsByStatusDataPageService.ɵfac = function RxProcessInstanceCountsByStatusDataPageService_Factory(t) {\n  return new (t || RxProcessInstanceCountsByStatusDataPageService)(i0.ɵɵinject(i0.Injector));\n};\nRxProcessInstanceCountsByStatusDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxProcessInstanceCountsByStatusDataPageService,\n  factory: RxProcessInstanceCountsByStatusDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxProcessInstanceCountsByStatusDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ElementVisibilityOptions, ListFieldDefinitionSubType, RX_PROCESS_DEFINITION, RxCallActivityRegistryService, RxProcessApiModule, RxProcessDataDictionaryService, RxProcessDefinitionCacheService, RxProcessDefinitionDataPageService, RxProcessDefinitionService, RxProcessElementRegistryService, RxProcessElementSearchService, RxProcessElementsService, RxProcessInstanceCommandsService, RxProcessInstanceCountsByStatusDataPageService, RxProcessInstanceDataPageService, RxProcessInstanceService };\n//# sourceMappingURL=helix-platform-process-api.js.map","map":{"version":3,"names":["i0","Injectable","NgModule","i3","ReplaySubject","combineLatest","of","forkJoin","map","shareReplay","take","reject","isEmpty","omit","last","forEach","find","filter","flatten","transform","map$1","pick","i2","i1","DataPage","RX_BUNDLE","CommonModule","i1$1","HttpHeaders","RxProcessDataDictionaryService","constructor","rxDataDictionaryUtils","rxDesignerCacheService","rxGlobalCacheService","rxIdService","rxObjectUtilsService","translateService","commonActivities","commonActivitiesSubject","commonActivities$","asObservable","commonActivitiesDataDictionaryStateClone$","pipe","activitiesDataDictionaryState","cloneDeep","commonDataDictionary$","getCommonDataDictionary","clear","setCommonActivities","componentsDataDictionaryState","Object","values","activitiesDataDictionaryBranches","label","children","instant","icon","expression","hidden","expanded","getFunctionDataDictionaryBranch","getFunctionDescriptorsSync","setCommonActivitiesDataDictionaryBranch","guid","activityDataDictionaryBranch","subscribe","dataDictionaryBranch","assign","state","next","ɵfac","RxProcessDataDictionaryService_Factory","t","ɵɵinject","RxDataDictionaryUtils","RxDesignerCacheService","RxGlobalCacheService","RxIdService","RxObjectUtilsService","TranslateService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","specialActionTypeNames","connector","webRequest","jitterbit","mulesoft","processElementResourceTypes","boundaryEvent","callActivity","endEvent","errorEvent","exclusiveGateway","parallelGateway","processAction","receiveTask","sequenceFlow","startEvent","subProcess","textAnnotation","textAnnotationAssociation","timerEvent","userTask","processElementNamesByResourceType","ruleQualificationResourceType","standardProcessElementGroups","activities","name","priority","annotations","events","gateways","platformActions","default","standardProcessElements","group","resourceType","eventResourceType","actionTypeName","RX_PROCESS_DEFINITION","processElementDisplayNames","processElementTypes","processElementGroups","processElementConfigurationProperties","processVariableSubTypes","attachment","character","processVariableTypes","record","runAsUser","administrator","definitionValue","modelValue","currentUser","inheritFromProcess","RxProcessElementRegistryService","rxLogService","elementDescriptors","Map","get","_a","getAll","Array","from","register","descriptor","has","warning","joint","util","setByPath","shapes","rx","shapeType","shapeClass","viewShapeType","viewShapeClass","set","RxProcessElementRegistryService_Factory","RxLogService","RxCallActivityRegistryService","callActivityDescriptors","getRegisteredCallActivities","processDefinitionName","RxCallActivityRegistryService_Factory","ElementVisibilityOptions","RxProcessApiModule","rxCallActivityRegistryService","displayName","callActivityManagerServiceName","visibility","Always","RxProcessApiModule_Factory","ɵmod","ɵɵdefineNgModule","imports","ɵinj","ɵɵdefineInjector","processDefinitionDataPageQuery","RxProcessDefinitionDataPageService","injector","RxProcessDefinitionDataPageService_Factory","Injector","RxProcessDefinitionService","httpClient","rxGuidService","options","getUrl","getNew","allowOverlay","artifacts","contextKeyParam","description","flowElements","generate","inputParams","isEnabled","lastChangedBy","lastUpdateTime","layout","JSON","stringify","cells","localVariables","localizableStrings","outputParams","overlayDescriptor","overlayGroupId","owner","permissions","scope","definitionScopeTypes","bundle","synchronous","getServerActionModelType","replace","getServerActionTypeName","modelType","split","update","processDefinition","put","getOutputParams","encodeURIComponent","getInputParams","RxProcessDefinitionService_Factory","HttpClient","RxGuidService","ListFieldDefinitionSubType","RxProcessDefinitionCacheService","rxProcessDefinitionService","consumers","Set","processDefinitionCache","processDefinitionOutputParamCache","getProcessDefinition","processDefinition$","headers","processDefinitionOutputParams$","registerConsumer","consumerDestroy$","add","delete","clearCache","processDefinitionNames","RxProcessDefinitionCacheService_Factory","RxProcessElementSearchService","definition","predicate","processElement","findElementInDefinition","flattenElements","findOwner","result","element","findByGuid","iteratee","concat","push","RxProcessElementSearchService_Factory","RxProcessElementsService","rxActionTypeUtilsService","rxBundleCacheService","rxDefinitionNameService","rxStringService","getActionElements","actionResourceType","getActionTypes","getBundleDescriptors","actionTypes","bundleDescriptors","actionType","getActionTypeBundleFriendlyName","prettifyActionTypeName","value","getCallActivityElements","getVisibleCallActivities","visibleCallActivities","callActivityElements","visibleCallActivity","id","getBundleId","friendlyName","prettify","getDisplayName","calledProcessDefinitionName","getProcessElements","getStandardProcessElements","errorEventLabel","boundaryEventLabel","endEventLabel","RxProcessElementsService_Factory","RxActionTypeUtilsService","RxBundleCacheService","RxDefinitionNameService","RxStringService","RxProcessInstanceService","processInstanceId","getLog","downloadLog","responseType","RxProcessInstanceService_Factory","RxProcessInstanceCommandsService","rxCommandFactoryService","startProcessCommand","forResourceType","start","processInputValues","execute","observe","RxProcessInstanceCommandsService_Factory","RxCommandFactoryService","RxProcessInstanceDataPageService","RxProcessInstanceDataPageService_Factory","RxProcessInstanceCountsByStatusDataPageService","RxProcessInstanceCountsByStatusDataPageService_Factory"],"sources":["C:/projects/BMC-Helix-Angular-prod/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-process-api.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i3 from '@ngx-translate/core';\nimport { ReplaySubject, combineLatest, of, forkJoin } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { reject, isEmpty, omit, last, forEach, find, filter, flatten, transform, map as map$1, pick } from 'lodash';\nimport * as i2 from '@helix/platform/utils';\nimport * as i1 from '@helix/platform/shared/api';\nimport { DataPage, RX_BUNDLE } from '@helix/platform/shared/api';\nimport { CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\n\nclass RxProcessDataDictionaryService {\n    constructor(rxDataDictionaryUtils, rxDesignerCacheService, rxGlobalCacheService, rxIdService, rxObjectUtilsService, translateService) {\n        this.rxDataDictionaryUtils = rxDataDictionaryUtils;\n        this.rxDesignerCacheService = rxDesignerCacheService;\n        this.rxGlobalCacheService = rxGlobalCacheService;\n        this.rxIdService = rxIdService;\n        this.rxObjectUtilsService = rxObjectUtilsService;\n        this.translateService = translateService;\n        this.commonActivities = null;\n        this.commonActivitiesSubject = new ReplaySubject(1);\n        this.commonActivities$ = this.commonActivitiesSubject.asObservable();\n        this.commonActivitiesDataDictionaryStateClone$ = this.commonActivities$.pipe(map((activitiesDataDictionaryState) => activitiesDataDictionaryState ? this.rxObjectUtilsService.cloneDeep(activitiesDataDictionaryState) : {}), shareReplay(1));\n        this.commonDataDictionary$ = this.getCommonDataDictionary();\n    }\n    clear() {\n        this.setCommonActivities(null);\n    }\n    getCommonDataDictionary() {\n        return combineLatest([\n            this.commonActivitiesDataDictionaryStateClone$.pipe(map((componentsDataDictionaryState) => Object.values(componentsDataDictionaryState)))\n        ]).pipe(map(([activitiesDataDictionaryBranches]) => {\n            return [\n                {\n                    label: 'General',\n                    children: [\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-date.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$DATE$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-date-time.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$TIMESTAMP$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-group-ids.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$GROUPIDS$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-groups.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$GROUPS$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-roles.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$ROLES$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-server-urls.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$SERVERURL$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-time.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$TIME$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-user.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$USER$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-user-locale.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$LOCALE$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.current-week-day.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$WEEKDAY$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.new-line.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$NEWLINE$'\n                        },\n                        {\n                            label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.keywords.process-correlation-id.label'),\n                            icon: 'd-icon-dollar',\n                            expression: '$PROCESSCORRELATIONID$'\n                        },\n                        {\n                            label: 'NULL',\n                            icon: 'd-icon-dollar',\n                            expression: '$NULL$',\n                            hidden: true\n                        }\n                    ]\n                },\n                {\n                    label: 'Functions',\n                    expanded: true,\n                    children: reject(this.rxDataDictionaryUtils.getFunctionDataDictionaryBranch(this.rxDesignerCacheService.getFunctionDescriptorsSync()), { label: 'Rule Qualification' })\n                },\n                {\n                    label: 'Activities',\n                    expanded: true,\n                    children: activitiesDataDictionaryBranches\n                }\n            ];\n        }));\n    }\n    setCommonActivitiesDataDictionaryBranch(guid, activityDataDictionaryBranch) {\n        activityDataDictionaryBranch.pipe(take(1)).subscribe((dataDictionaryBranch) => {\n            this.setCommonActivities(isEmpty(dataDictionaryBranch)\n                ? omit(this.commonActivities, [guid])\n                : Object.assign(Object.assign({}, this.commonActivities), { [guid]: dataDictionaryBranch }));\n        });\n    }\n    setCommonActivities(state) {\n        this.commonActivities = state;\n        this.commonActivitiesSubject.next(this.commonActivities);\n    }\n}\nRxProcessDataDictionaryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDataDictionaryService, deps: [{ token: i1.RxDataDictionaryUtils }, { token: i1.RxDesignerCacheService }, { token: i1.RxGlobalCacheService }, { token: i2.RxIdService }, { token: i2.RxObjectUtilsService }, { token: i3.TranslateService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessDataDictionaryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDataDictionaryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDataDictionaryService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxDataDictionaryUtils }, { type: i1.RxDesignerCacheService }, { type: i1.RxGlobalCacheService }, { type: i2.RxIdService }, { type: i2.RxObjectUtilsService }, { type: i3.TranslateService }]; } });\n\nconst specialActionTypeNames = {\n    connector: 'connector',\n    webRequest: 'WebRequest',\n    jitterbit: 'iPaaS Jitterbit',\n    mulesoft: 'iPaaS MuleSoft'\n};\nconst processElementResourceTypes = {\n    boundaryEvent: 'com.bmc.arsys.rx.services.process.domain.BoundaryEventDefinition',\n    callActivity: 'com.bmc.arsys.rx.services.process.domain.CallActivityDefinition',\n    endEvent: 'com.bmc.arsys.rx.services.process.domain.EndEventDefinition',\n    errorEvent: 'com.bmc.arsys.rx.services.process.domain.ErrorEventDefinition',\n    exclusiveGateway: 'com.bmc.arsys.rx.services.process.domain.ExclusiveGatewayDefinition',\n    parallelGateway: 'com.bmc.arsys.rx.services.process.domain.ParallelGatewayDefinition',\n    processAction: 'com.bmc.arsys.rx.services.process.domain.ServiceTaskDefinition',\n    receiveTask: 'com.bmc.arsys.rx.services.process.domain.ReceiveTaskDefinition',\n    sequenceFlow: 'com.bmc.arsys.rx.services.process.domain.SequenceFlowDefinition',\n    startEvent: 'com.bmc.arsys.rx.services.process.domain.StartEventDefinition',\n    subProcess: 'com.bmc.arsys.rx.services.process.domain.SubProcessDefinition',\n    textAnnotation: 'com.bmc.arsys.rx.services.process.domain.TextAnnotation',\n    textAnnotationAssociation: 'com.bmc.arsys.rx.services.process.domain.TextAnnotationAssociation',\n    timerEvent: 'com.bmc.arsys.rx.services.process.domain.TimerEventDefinition',\n    userTask: 'com.bmc.arsys.rx.services.process.domain.UserTaskDefinition'\n};\nconst processElementNamesByResourceType = {\n    // process event resource types\n    [processElementResourceTypes.boundaryEvent]: 'Boundary',\n    [processElementResourceTypes.endEvent]: 'End',\n    [processElementResourceTypes.errorEvent]: 'Error',\n    [processElementResourceTypes.startEvent]: 'Start',\n    [processElementResourceTypes.timerEvent]: 'Timer',\n    // process element resource types\n    [processElementResourceTypes.callActivity]: 'Call Activity',\n    [processElementResourceTypes.exclusiveGateway]: 'Exclusive',\n    [processElementResourceTypes.parallelGateway]: 'Parallel',\n    [processElementResourceTypes.receiveTask]: 'Receive Task',\n    [processElementResourceTypes.subProcess]: 'Sub-Process',\n    [processElementResourceTypes.textAnnotation]: 'Annotation',\n    [processElementResourceTypes.userTask]: 'User Task',\n    // rule element resource types\n    'com.bmc.arsys.rx.services.rule.domain.CancelProcessInstanceAction': 'Cancel Process',\n    'com.bmc.arsys.rx.services.rule.domain.SignalProcessInstanceAction': 'Signal Process',\n    'com.bmc.arsys.rx.services.rule.domain.StartProcessInstanceAction': 'Start Process',\n    ruleQualificationResourceType: 'Qualification'\n};\nconst standardProcessElementGroups = {\n    activities: {\n        name: 'Activities',\n        priority: 1\n    },\n    annotations: {\n        name: 'Annotations',\n        priority: 2\n    },\n    events: {\n        name: 'Events',\n        priority: 3\n    },\n    gateways: {\n        name: 'Gateways',\n        priority: 4\n    },\n    platformActions: {\n        name: 'Platform actions',\n        priority: 5\n    },\n    default: {\n        priority: 6\n    }\n};\nconst standardProcessElements = [\n    {\n        group: standardProcessElementGroups.annotations.name,\n        resourceType: processElementResourceTypes.textAnnotation\n    },\n    {\n        group: standardProcessElementGroups.events.name,\n        resourceType: processElementResourceTypes.startEvent\n    },\n    {\n        group: standardProcessElementGroups.events.name,\n        resourceType: processElementResourceTypes.endEvent\n    },\n    {\n        group: standardProcessElementGroups.events.name,\n        resourceType: processElementResourceTypes.boundaryEvent,\n        eventResourceType: processElementResourceTypes.timerEvent\n    },\n    {\n        group: standardProcessElementGroups.events.name,\n        resourceType: processElementResourceTypes.boundaryEvent,\n        eventResourceType: processElementResourceTypes.errorEvent\n    },\n    {\n        group: standardProcessElementGroups.events.name,\n        resourceType: processElementResourceTypes.endEvent,\n        eventResourceType: processElementResourceTypes.errorEvent\n    },\n    {\n        group: standardProcessElementGroups.activities.name,\n        resourceType: processElementResourceTypes.callActivity\n    },\n    {\n        group: standardProcessElementGroups.activities.name,\n        resourceType: processElementResourceTypes.processAction,\n        actionTypeName: specialActionTypeNames.connector\n    },\n    {\n        group: standardProcessElementGroups.activities.name,\n        resourceType: processElementResourceTypes.receiveTask\n    },\n    {\n        group: standardProcessElementGroups.activities.name,\n        resourceType: processElementResourceTypes.subProcess\n    },\n    {\n        group: standardProcessElementGroups.activities.name,\n        resourceType: processElementResourceTypes.userTask\n    },\n    {\n        group: standardProcessElementGroups.activities.name,\n        resourceType: processElementResourceTypes.processAction,\n        actionTypeName: specialActionTypeNames.webRequest\n    },\n    {\n        group: standardProcessElementGroups.activities.name,\n        resourceType: processElementResourceTypes.processAction,\n        actionTypeName: specialActionTypeNames.jitterbit\n    },\n    {\n        group: standardProcessElementGroups.activities.name,\n        resourceType: processElementResourceTypes.processAction,\n        actionTypeName: specialActionTypeNames.mulesoft\n    },\n    {\n        group: standardProcessElementGroups.gateways.name,\n        resourceType: processElementResourceTypes.parallelGateway\n    },\n    {\n        group: standardProcessElementGroups.gateways.name,\n        resourceType: processElementResourceTypes.exclusiveGateway\n    }\n];\nconst RX_PROCESS_DEFINITION = {\n    processElementDisplayNames: {\n        endEvent: 'End',\n        startEvent: 'Start'\n    },\n    processElementNamesByResourceType,\n    processElementResourceTypes,\n    processElementTypes: {\n        endEvent: 'rx.EndEvent',\n        processAction: 'rx.ProcessAction',\n        startEvent: 'rx.StartEvent'\n    },\n    processElementGroups: [\n        standardProcessElementGroups.activities,\n        standardProcessElementGroups.annotations,\n        standardProcessElementGroups.events,\n        standardProcessElementGroups.gateways,\n        standardProcessElementGroups.platformActions\n    ],\n    standardProcessElements,\n    standardProcessElementGroups,\n    processElementConfigurationProperties: [\n        'actionTypeName',\n        'calledProcessDefinitionName',\n        'eventResourceType',\n        'resourceType'\n    ],\n    processVariableSubTypes: {\n        attachment: 11,\n        character: 4\n    },\n    processVariableTypes: {\n        record: 'com.bmc.arsys.rx.services.process.domain.record.RecordInstanceFieldType',\n        default: 'com.bmc.arsys.rx.services.record.domain.DefaultFieldType'\n    },\n    runAsUser: {\n        administrator: {\n            definitionValue: false,\n            modelValue: 'administrator'\n        },\n        currentUser: {\n            definitionValue: true,\n            modelValue: 'currentUser'\n        },\n        inheritFromProcess: {\n            definitionValue: null,\n            modelValue: 'inheritFromProcess'\n        }\n    }\n};\n\nclass RxProcessElementRegistryService {\n    constructor(rxLogService) {\n        this.rxLogService = rxLogService;\n        this.elementDescriptors = new Map();\n    }\n    get(type) {\n        var _a;\n        return ((_a = this.elementDescriptors.get(type)) !== null && _a !== void 0 ? _a : this.elementDescriptors.get(RX_PROCESS_DEFINITION.processElementTypes.processAction));\n    }\n    getAll() {\n        return Array.from(this.elementDescriptors.values());\n    }\n    register(descriptor) {\n        if (this.elementDescriptors.has(descriptor.type)) {\n            this.rxLogService.warning(`Process element ${descriptor.type} is already registered.`);\n        }\n        else {\n            joint.util.setByPath(joint.shapes.rx, descriptor.shapeType, descriptor.shapeClass, '.');\n            joint.util.setByPath(joint.shapes.rx, descriptor.viewShapeType, descriptor.viewShapeClass, '.');\n            this.elementDescriptors.set(descriptor.type, descriptor);\n        }\n    }\n}\nRxProcessElementRegistryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementRegistryService, deps: [{ token: i1.RxLogService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessElementRegistryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementRegistryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementRegistryService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxLogService }]; } });\n\nclass RxCallActivityRegistryService {\n    constructor() {\n        this.callActivityDescriptors = new Map();\n    }\n    getRegisteredCallActivities() {\n        return this.callActivityDescriptors.values();\n    }\n    register(...callActivityDescriptors) {\n        callActivityDescriptors.forEach((descriptor) => {\n            this.callActivityDescriptors.set(descriptor.processDefinitionName, descriptor);\n        });\n    }\n}\nRxCallActivityRegistryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCallActivityRegistryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxCallActivityRegistryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCallActivityRegistryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCallActivityRegistryService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nvar ElementVisibilityOptions;\n(function (ElementVisibilityOptions) {\n    ElementVisibilityOptions[\"Always\"] = \"Always\";\n    ElementVisibilityOptions[\"Never\"] = \"Never\";\n})(ElementVisibilityOptions || (ElementVisibilityOptions = {}));\n\nclass RxProcessApiModule {\n    constructor(rxCallActivityRegistryService) {\n        this.rxCallActivityRegistryService = rxCallActivityRegistryService;\n        this.rxCallActivityRegistryService.register({\n            displayName: 'Approval Process',\n            processDefinitionName: 'com.bmc.arsys.rx.approval:Approval Process V2',\n            callActivityManagerServiceName: 'apApprovalProcessCallActivityManager',\n            visibility: ElementVisibilityOptions.Always\n        });\n    }\n}\nRxProcessApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessApiModule, deps: [{ token: RxCallActivityRegistryService }], target: i0.ɵɵFactoryTarget.NgModule });\nRxProcessApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessApiModule, imports: [CommonModule] });\nRxProcessApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessApiModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessApiModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule]\n                }]\n        }], ctorParameters: function () { return [{ type: RxCallActivityRegistryService }]; } });\n\nconst processDefinitionDataPageQuery = 'com.bmc.arsys.rx.application.process.datapage.ProcessDefinitionDataPageQuery';\nclass RxProcessDefinitionDataPageService extends DataPage {\n    constructor(injector) {\n        super(injector, processDefinitionDataPageQuery);\n        this.injector = injector;\n    }\n}\nRxProcessDefinitionDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDefinitionDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessDefinitionDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDefinitionDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDefinitionDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\nclass RxProcessDefinitionService {\n    constructor(httpClient, rxGuidService) {\n        this.httpClient = httpClient;\n        this.rxGuidService = rxGuidService;\n    }\n    get(processDefinitionName, options) {\n        return this.httpClient.get(this.getUrl(processDefinitionName), options);\n    }\n    getNew() {\n        return of({\n            allowOverlay: false,\n            artifacts: [],\n            contextKeyParam: null,\n            description: '',\n            flowElements: [],\n            guid: this.rxGuidService.generate('rx-'),\n            inputParams: [],\n            isEnabled: true,\n            lastChangedBy: null,\n            lastUpdateTime: null,\n            layout: JSON.stringify({ cells: [] }),\n            localVariables: [],\n            localizableStrings: {},\n            name: '',\n            outputParams: [],\n            overlayDescriptor: null,\n            overlayGroupId: null,\n            owner: null,\n            permissions: [],\n            runAsUser: false,\n            scope: RX_BUNDLE.definitionScopeTypes.bundle,\n            synchronous: null\n        });\n    }\n    getServerActionModelType(actionTypeName) {\n        return `rx.ProcessActions.${actionTypeName.replace(':', '.')}`;\n    }\n    getServerActionTypeName(modelType) {\n        return last(modelType.split('.'));\n    }\n    update(processDefinition, options) {\n        return this.httpClient.put(this.getUrl(processDefinition.name), processDefinition, options);\n    }\n    getOutputParams(processDefinitionName, options) {\n        return this.httpClient.get(`/api/rx/application/process/processdefinition/${encodeURIComponent(processDefinitionName)}/outputParams`, options);\n    }\n    getInputParams(processDefinitionName, options) {\n        return this.httpClient.get(`/api/rx/application/process/processdefinition/${encodeURIComponent(processDefinitionName)}/inputParams`, options);\n    }\n    getUrl(processDefinitionName) {\n        return processDefinitionName\n            ? `/api/rx/application/process/processdefinition/${encodeURIComponent(processDefinitionName)}`\n            : '/api/rx/application/process/processdefinition';\n    }\n}\nRxProcessDefinitionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDefinitionService, deps: [{ token: i1$1.HttpClient }, { token: i2.RxGuidService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessDefinitionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDefinitionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDefinitionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.HttpClient }, { type: i2.RxGuidService }]; } });\n\nvar ListFieldDefinitionSubType;\n(function (ListFieldDefinitionSubType) {\n    ListFieldDefinitionSubType[ListFieldDefinitionSubType[\"Attachment\"] = 11] = \"Attachment\";\n    ListFieldDefinitionSubType[ListFieldDefinitionSubType[\"Character\"] = 4] = \"Character\";\n})(ListFieldDefinitionSubType || (ListFieldDefinitionSubType = {}));\n\nclass RxProcessDefinitionCacheService {\n    constructor(rxProcessDefinitionService) {\n        this.rxProcessDefinitionService = rxProcessDefinitionService;\n        this.consumers = new Set();\n        this.processDefinitionCache = new Map();\n        this.processDefinitionOutputParamCache = new Map();\n    }\n    getProcessDefinition(processDefinitionName) {\n        if (!this.processDefinitionCache.has(processDefinitionName)) {\n            const processDefinition$ = this.rxProcessDefinitionService\n                .get(processDefinitionName, {\n                headers: new HttpHeaders({ 'Design-Time': 'true' })\n            })\n                .pipe(shareReplay(1));\n            this.processDefinitionCache.set(processDefinitionName, processDefinition$);\n        }\n        return this.processDefinitionCache.get(processDefinitionName);\n    }\n    getOutputParams(processDefinitionName) {\n        if (!this.processDefinitionOutputParamCache.has(processDefinitionName)) {\n            const processDefinitionOutputParams$ = this.rxProcessDefinitionService\n                .getOutputParams(processDefinitionName, {\n                headers: new HttpHeaders({ 'Design-Time': 'true' })\n            })\n                .pipe(shareReplay(1));\n            this.processDefinitionOutputParamCache.set(processDefinitionName, processDefinitionOutputParams$);\n        }\n        return this.processDefinitionOutputParamCache.get(processDefinitionName);\n    }\n    registerConsumer(consumerDestroy$) {\n        this.consumers.add(consumerDestroy$);\n        consumerDestroy$.subscribe(() => {\n            this.consumers.delete(consumerDestroy$);\n            if (isEmpty(this.consumers)) {\n                this.clearCache();\n            }\n        });\n    }\n    clearCache(processDefinitionNames) {\n        if (processDefinitionNames) {\n            forEach(processDefinitionNames, (processDefinitionName) => {\n                this.processDefinitionCache.delete(processDefinitionName);\n                this.processDefinitionOutputParamCache.delete(processDefinitionName);\n            });\n        }\n        else {\n            this.processDefinitionCache.clear();\n            this.processDefinitionOutputParamCache.clear();\n        }\n    }\n}\nRxProcessDefinitionCacheService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDefinitionCacheService, deps: [{ token: RxProcessDefinitionService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessDefinitionCacheService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDefinitionCacheService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessDefinitionCacheService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxProcessDefinitionService }]; } });\n\nclass RxProcessElementSearchService {\n    find(definition, predicate) {\n        let processElement = this.findElementInDefinition(definition, predicate);\n        if (!processElement) {\n            processElement = find(this.flattenElements(definition), predicate);\n        }\n        return processElement;\n    }\n    findElementInDefinition(definition, predicate) {\n        return find(definition.flowElements, predicate) || find(definition.artifacts, predicate);\n    }\n    findOwner(definition, guid) {\n        const processElement = this.findElementInDefinition(definition, { guid: guid });\n        let result;\n        if (processElement) {\n            result = definition;\n        }\n        else {\n            result = find(this.flattenElements(definition), (element) => {\n                return this.findElementInDefinition(element, { guid: guid });\n            });\n        }\n        return result;\n    }\n    findByGuid(definition, guid) {\n        return this.find(definition, { guid: guid });\n    }\n    filter(definition, predicate) {\n        return filter(this.flattenElements(definition), predicate);\n    }\n    forEach(definition, iteratee) {\n        return forEach(this.flattenElements(definition), iteratee);\n    }\n    flattenElements(definition) {\n        return flatten(transform([].concat(definition.flowElements || [], definition.artifacts || []), (result, element) => {\n            result.push(element);\n            if (element.flowElements) {\n                result.push(this.flattenElements(element));\n            }\n        }, []));\n    }\n}\nRxProcessElementSearchService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementSearchService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessElementSearchService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementSearchService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementSearchService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass RxProcessElementsService {\n    constructor(rxActionTypeUtilsService, rxBundleCacheService, rxCallActivityRegistryService, rxDefinitionNameService, rxGlobalCacheService, rxStringService) {\n        this.rxActionTypeUtilsService = rxActionTypeUtilsService;\n        this.rxBundleCacheService = rxBundleCacheService;\n        this.rxCallActivityRegistryService = rxCallActivityRegistryService;\n        this.rxDefinitionNameService = rxDefinitionNameService;\n        this.rxGlobalCacheService = rxGlobalCacheService;\n        this.rxStringService = rxStringService;\n    }\n    getActionElements(actionResourceType) {\n        return forkJoin([\n            this.rxBundleCacheService.getActionTypes(),\n            this.rxGlobalCacheService.getBundleDescriptors()\n        ]).pipe(map(([actionTypes, bundleDescriptors]) => {\n            return map$1(actionTypes, (actionType) => {\n                return {\n                    group: this.rxActionTypeUtilsService.getActionTypeBundleFriendlyName(bundleDescriptors, actionType) ||\n                        'Platform actions',\n                    label: actionType.displayName || this.rxActionTypeUtilsService.prettifyActionTypeName(actionType.actionTypeName),\n                    value: {\n                        actionTypeName: actionType.actionTypeName,\n                        resourceType: actionResourceType\n                    }\n                };\n            });\n        }));\n    }\n    getCallActivityElements() {\n        return forkJoin([this.rxGlobalCacheService.getBundleDescriptors(), this.getVisibleCallActivities()]).pipe(map(([bundleDescriptors, visibleCallActivities]) => {\n            const callActivityElements = [];\n            forEach(visibleCallActivities, (visibleCallActivity) => {\n                const bundle = find(bundleDescriptors, {\n                    id: this.rxDefinitionNameService.getBundleId(visibleCallActivity.processDefinitionName)\n                });\n                if (bundle) {\n                    callActivityElements.push({\n                        group: bundle.friendlyName,\n                        label: visibleCallActivity.displayName ||\n                            this.rxStringService.prettify(this.rxDefinitionNameService.getDisplayName(visibleCallActivity.processDefinitionName)),\n                        value: {\n                            resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.callActivity,\n                            calledProcessDefinitionName: visibleCallActivity.processDefinitionName\n                        }\n                    });\n                }\n            });\n            return callActivityElements;\n        }));\n    }\n    getProcessElements() {\n        return [\n            this.getActionElements(RX_PROCESS_DEFINITION.processElementResourceTypes.processAction),\n            this.getCallActivityElements(),\n            this.getStandardProcessElements()\n        ];\n    }\n    getStandardProcessElements() {\n        return of(map$1(RX_PROCESS_DEFINITION.standardProcessElements, (element) => {\n            let label;\n            if (element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.processAction) {\n                label = this.rxActionTypeUtilsService.prettifyActionTypeName(element.actionTypeName);\n            }\n            else if (element.eventResourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.errorEvent) {\n                const errorEventLabel = RX_PROCESS_DEFINITION.processElementNamesByResourceType[RX_PROCESS_DEFINITION.processElementResourceTypes.errorEvent];\n                const boundaryEventLabel = RX_PROCESS_DEFINITION.processElementNamesByResourceType[RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent];\n                const endEventLabel = RX_PROCESS_DEFINITION.processElementNamesByResourceType[RX_PROCESS_DEFINITION.processElementResourceTypes.endEvent];\n                label =\n                    element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent\n                        ? `${errorEventLabel} ${boundaryEventLabel}`\n                        : `${errorEventLabel} ${endEventLabel}`;\n            }\n            else if (element.resourceType === RX_PROCESS_DEFINITION.processElementResourceTypes.boundaryEvent) {\n                label = RX_PROCESS_DEFINITION.processElementNamesByResourceType[element.eventResourceType];\n            }\n            else {\n                label = RX_PROCESS_DEFINITION.processElementNamesByResourceType[element.resourceType];\n            }\n            return {\n                group: element.group,\n                label: label,\n                value: pick(element, RX_PROCESS_DEFINITION.processElementConfigurationProperties)\n            };\n        }));\n    }\n    getVisibleCallActivities() {\n        return of(filter(Array.from(this.rxCallActivityRegistryService.getRegisteredCallActivities()), {\n            visibility: ElementVisibilityOptions.Always\n        }));\n    }\n}\nRxProcessElementsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementsService, deps: [{ token: i1.RxActionTypeUtilsService }, { token: i1.RxBundleCacheService }, { token: RxCallActivityRegistryService }, { token: i1.RxDefinitionNameService }, { token: i1.RxGlobalCacheService }, { token: i2.RxStringService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessElementsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementsService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessElementsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxActionTypeUtilsService }, { type: i1.RxBundleCacheService }, { type: RxCallActivityRegistryService }, { type: i1.RxDefinitionNameService }, { type: i1.RxGlobalCacheService }, { type: i2.RxStringService }]; } });\n\nclass RxProcessInstanceService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    get(processDefinitionName, processInstanceId) {\n        return this.httpClient.get(`/api/rx/application/process/processinstance/${encodeURIComponent(processDefinitionName)}/${processInstanceId}`);\n    }\n    getLog(processDefinitionName, processInstanceId) {\n        return this.httpClient.get(`/api/rx/application/process/processinstance/log/${encodeURIComponent(processDefinitionName)}/${processInstanceId}/view`);\n    }\n    downloadLog(processDefinitionName, processInstanceId) {\n        return this.httpClient.get(`/api/rx/application/process/processinstance/log/${encodeURIComponent(processDefinitionName)}/${processInstanceId}/download`, {\n            responseType: 'blob'\n        });\n    }\n}\nRxProcessInstanceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceService, deps: [{ token: i1$1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessInstanceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.HttpClient }]; } });\n\nclass RxProcessInstanceCommandsService {\n    constructor(rxCommandFactoryService) {\n        this.rxCommandFactoryService = rxCommandFactoryService;\n        this.startProcessCommand = this.rxCommandFactoryService.forResourceType('com.bmc.arsys.rx.application.process.command.StartProcessInstanceCommand');\n    }\n    start(processDefinitionName, processInputValues) {\n        return this.startProcessCommand.execute({\n            processDefinitionName,\n            processInputValues\n        }, {\n            observe: 'response',\n            responseType: 'text'\n        });\n    }\n}\nRxProcessInstanceCommandsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceCommandsService, deps: [{ token: i1.RxCommandFactoryService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessInstanceCommandsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceCommandsService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceCommandsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxCommandFactoryService }]; } });\n\nclass RxProcessInstanceDataPageService extends DataPage {\n    constructor(injector) {\n        super(injector, 'com.bmc.arsys.rx.application.process.datapage.ProcessInstanceDataPageQuery');\n        this.injector = injector;\n    }\n}\nRxProcessInstanceDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessInstanceDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\nclass RxProcessInstanceCountsByStatusDataPageService extends DataPage {\n    constructor(injector) {\n        super(injector, 'com.bmc.arsys.rx.application.process.datapage.ProcessInstanceCountsByStatusDataPageQuery');\n        this.injector = injector;\n    }\n}\nRxProcessInstanceCountsByStatusDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceCountsByStatusDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxProcessInstanceCountsByStatusDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceCountsByStatusDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxProcessInstanceCountsByStatusDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ElementVisibilityOptions, ListFieldDefinitionSubType, RX_PROCESS_DEFINITION, RxCallActivityRegistryService, RxProcessApiModule, RxProcessDataDictionaryService, RxProcessDefinitionCacheService, RxProcessDefinitionDataPageService, RxProcessDefinitionService, RxProcessElementRegistryService, RxProcessElementSearchService, RxProcessElementsService, RxProcessInstanceCommandsService, RxProcessInstanceCountsByStatusDataPageService, RxProcessInstanceDataPageService, RxProcessInstanceService };\n//# sourceMappingURL=helix-platform-process-api.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}