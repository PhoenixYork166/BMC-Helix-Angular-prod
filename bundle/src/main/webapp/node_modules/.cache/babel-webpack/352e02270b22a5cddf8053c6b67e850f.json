{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, ɵmakeDecorator, NgModule } from '@angular/core';\nimport * as i1$1 from '@helix/platform/shared/api';\nimport { ExpressionOperator, ExpressionParserToken, RX_APPLICATION, RX_BUNDLE, DataPage } from '@helix/platform/shared/api';\nimport * as i4 from '@helix/platform/utils';\nimport * as i1 from '@ngx-translate/core';\nimport { map, reduce, uniq, escapeRegExp, every, includes, size, isNil, isNaN, isUndefined, trim, find, isString, result, forEach, isFunction, isNull, isEmpty, some, transform, set, isObject, clone, flow, compact, get, has, head, findIndex } from 'lodash';\nimport * as jsep from 'jsep';\nimport BigNumber from 'bignumber.js';\nimport * as i4$1 from '@helix/platform/record/api';\nimport { defer, from, of, EMPTY, throwError, Subject, ReplaySubject, combineLatest } from 'rxjs';\nimport { map as map$1, shareReplay, pluck, switchMap, concatMap, tap } from 'rxjs/operators';\nimport * as i1$2 from '@angular/common/http';\nimport * as i2 from '@angular/router';\nimport * as i1$3 from '@bmc-ux/adapt-angular';\nvar RecordGridFilterDataLogic;\n(function (RecordGridFilterDataLogic) {\n  RecordGridFilterDataLogic[\"And\"] = \"and\";\n  RecordGridFilterDataLogic[\"Or\"] = \"or\";\n})(RecordGridFilterDataLogic || (RecordGridFilterDataLogic = {}));\nvar RecordGridFilterOperator;\n(function (RecordGridFilterOperator) {\n  RecordGridFilterOperator[\"Eq\"] = \"eq\";\n  RecordGridFilterOperator[\"Gte\"] = \"gte\";\n  RecordGridFilterOperator[\"Lte\"] = \"lte\";\n  RecordGridFilterOperator[\"Like\"] = \"like\";\n  RecordGridFilterOperator[\"Ne\"] = \"ne\";\n  RecordGridFilterOperator[\"Lt\"] = \"lt\";\n  RecordGridFilterOperator[\"Gt\"] = \"gt\";\n  RecordGridFilterOperator[\"In\"] = \"in\";\n})(RecordGridFilterOperator || (RecordGridFilterOperator = {}));\nconst RecordGridNamedFilterOptionKey = 'namedFilterOption';\nconst RowDataItemIdFieldName = '$ID$';\nvar ApplyGridFilterMode;\n(function (ApplyGridFilterMode) {\n  ApplyGridFilterMode[\"Append\"] = \"Append\";\n  ApplyGridFilterMode[\"Remove\"] = \"Remove\";\n  ApplyGridFilterMode[\"Overwrite\"] = \"Overwrite\";\n  ApplyGridFilterMode[\"Merge\"] = \"Merge\";\n  ApplyGridFilterMode[\"Clear\"] = \"Clear\";\n  ApplyGridFilterMode[\"Begin\"] = \"Begin\";\n  ApplyGridFilterMode[\"End\"] = \"End\";\n})(ApplyGridFilterMode || (ApplyGridFilterMode = {}));\nconst expressionAttributeName = 'rx-expression';\nconst RX_RICH_TEXT = {\n  expressionAttributeName\n};\nconst RX_RICH_TEXT_STYLES = 'skins/rich-text/';\nclass RxCkEditorConfiguratorService {\n  constructor(translateService, rxLocalizationService, rxUrlUtilsService) {\n    this.translateService = translateService;\n    this.rxLocalizationService = rxLocalizationService;\n    this.rxUrlUtilsService = rxUrlUtilsService;\n  }\n  getCKEditorConfig() {\n    return {\n      resize_enabled: false,\n      title: false,\n      skin: 'rich-text,' + RX_RICH_TEXT_STYLES,\n      toolbar: [['Bold', 'Italic', 'Strike', 'Underline', '-', 'NumberedList', 'BulletedList', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', '-', 'Format', 'Styles', 'Font', 'FontSize', 'TextColor']],\n      stylesSet: [{\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.italic-title'),\n        element: 'h2',\n        attributes: {\n          class: 'italic-title'\n        }\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.subtitle'),\n        element: 'h3',\n        attributes: {\n          class: 'subtitle'\n        }\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.special-container'),\n        element: 'div',\n        attributes: {\n          class: 'special-containers'\n        }\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.marker'),\n        element: 'span',\n        attributes: {\n          class: 'marker'\n        }\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.small'),\n        element: 'small'\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.computer-code'),\n        element: 'code'\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.keyboard-phrase'),\n        element: 'kbd'\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.sample-text'),\n        element: 'samp'\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.variable'),\n        element: 'var'\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.deleted-text'),\n        element: 'del'\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.inserted-text'),\n        element: 'ins'\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.cited-work'),\n        element: 'cite'\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.inline-quotation'),\n        element: 'q'\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.compact-table'),\n        element: 'table',\n        attributes: {\n          cellpadding: '5',\n          cellspacing: '0',\n          class: 'compact-table'\n        }\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.borderless-table'),\n        element: 'table',\n        attributes: {\n          class: 'borderless-table'\n        }\n      }, {\n        name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.square-bulleted-list'),\n        element: 'ul',\n        attributes: {\n          class: 'square-bulleted-list'\n        }\n      }],\n      language: this.rxLocalizationService.currentLocale,\n      format_tags: 'p;h1;h2;h3;pre',\n      height: '78px'\n    };\n  }\n  getContentRules() {\n    return {\n      p: true,\n      strong: true,\n      em: true,\n      s: true,\n      u: true,\n      ol: true,\n      ul: true,\n      li: true,\n      small: true,\n      code: true,\n      kbd: true,\n      samp: true,\n      var: true,\n      del: true,\n      ins: true,\n      cite: true,\n      q: true,\n      pre: true,\n      br: true,\n      span: {\n        classes: 'marker',\n        attributes: [RX_RICH_TEXT.expressionAttributeName, 'contenteditable', 'title'],\n        styles: 'color'\n      },\n      h1: true,\n      h2: {\n        classes: 'italic-title'\n      },\n      h3: {\n        classes: 'subtitle'\n      },\n      div: {\n        classes: 'special-containers'\n      },\n      a: {\n        match: element => this.rxUrlUtilsService.isUrlSafe(element.attributes.href),\n        attributes: ['target', 'id', 'dir', 'accesskey', 'lang', 'tabindex', 'title', 'type', 'charset', 'rel', 'href', 'name', 'style', 'class', 'download']\n      },\n      'div h1 h2 h3 p span pre li': {\n        styles: 'font-size, text-align, font-family'\n      }\n    };\n  }\n}\nRxCkEditorConfiguratorService.ɵfac = function RxCkEditorConfiguratorService_Factory(t) {\n  return new (t || RxCkEditorConfiguratorService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i1$1.RxLocalizationService), i0.ɵɵinject(i4.RxUrlUtilsService));\n};\nRxCkEditorConfiguratorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxCkEditorConfiguratorService,\n  factory: RxCkEditorConfiguratorService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxCkEditorConfiguratorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.TranslateService\n    }, {\n      type: i1$1.RxLocalizationService\n    }, {\n      type: i4.RxUrlUtilsService\n    }];\n  }, null);\n})();\nvar ViewComponentPropertyType;\n(function (ViewComponentPropertyType) {\n  ViewComponentPropertyType[\"Boolean\"] = \"boolean\";\n  ViewComponentPropertyType[\"String\"] = \"string\";\n  ViewComponentPropertyType[\"Number\"] = \"number\";\n  ViewComponentPropertyType[\"Array\"] = \"array\";\n  ViewComponentPropertyType[\"Object\"] = \"object\";\n})(ViewComponentPropertyType || (ViewComponentPropertyType = {}));\nvar RxDevice;\n(function (RxDevice) {\n  RxDevice[\"Desktop\"] = \"desktop\";\n  RxDevice[\"Tablet\"] = \"tablet\";\n  RxDevice[\"Mobile\"] = \"mobile\";\n})(RxDevice || (RxDevice = {}));\nconst RX_AVAILABLE_ON_DEVICES_ALL_VALUE = Object.values(RxDevice);\nconst RX_AVAILABLE_ON_DEVICES_PROP_NAME = 'availableOnDevices';\nconst RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE = {\n  [RX_AVAILABLE_ON_DEVICES_PROP_NAME]: RX_AVAILABLE_ON_DEVICES_ALL_VALUE\n};\nconst RX_AVAILABLE_ON_DEVICES_PROP_DESC = {\n  name: RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  type: ViewComponentPropertyType.Array,\n  designType: ViewComponentPropertyType.Array\n};\nconst RX_DISABLED_PROP_NAME = 'disabled';\nconst RX_DISABLED_PROP_DEFAULT_VALUE = {\n  [RX_DISABLED_PROP_NAME]: '0'\n};\nconst RX_DISABLED_PROP_DESC = {\n  name: RX_DISABLED_PROP_NAME,\n  enableExpressionEvaluation: true\n};\nconst RX_HIDDEN_PROP_NAME = 'hidden';\nconst RX_HIDDEN_PROP_DEFAULT_VALUE = {\n  [RX_HIDDEN_PROP_NAME]: '0'\n};\nconst RX_HIDDEN_PROP_DESC = {\n  name: RX_HIDDEN_PROP_NAME,\n  enableExpressionEvaluation: true\n};\nconst RX_STYLES_PROP_NAME = 'styles';\nconst RX_STYLES_PROP_DEFAULT_VALUE = {\n  [RX_STYLES_PROP_NAME]: null\n};\nconst RX_STYLES_PROP_DESC = {\n  name: RX_STYLES_PROP_NAME\n};\nconst RX_STANDARD_PROPS_DESC = [RX_HIDDEN_PROP_DESC, RX_STYLES_PROP_DESC, RX_AVAILABLE_ON_DEVICES_PROP_DESC];\nconst RX_STANDARD_PROPS_DEFAULT_VALUES = Object.assign(Object.assign(Object.assign({}, RX_HIDDEN_PROP_DEFAULT_VALUE), RX_STYLES_PROP_DEFAULT_VALUE), RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE);\nclass RxExpressionHelperService {\n  constructor() {\n    this.prepareHandlers = [];\n    function _convertNull(expression) {\n      return expression.replace(/null/gi, null);\n    }\n    function _convertNot(expression) {\n      return expression.replace(/not/gi, '!');\n    }\n    function _convertOr(expression) {\n      return expression.replace(/or/gi, ExpressionOperator.Or);\n    }\n    function _convertAnd(expression) {\n      return expression.replace(/and/gi, ExpressionOperator.And);\n    }\n    function _convertLike(expression) {\n      return expression.replace(/like/gi, ExpressionOperator.Like);\n    }\n    function _convertContains(expression) {\n      return expression.replace(/contains/gi, ExpressionOperator.Contains);\n    }\n    this.prepareHandlers.push(_convertNull, _convertNot, _convertAnd, _convertOr, _convertLike, _convertContains);\n  }\n  extractTokens(regex, key, expression) {\n    const matches = expression.match(regex);\n    return {\n      matches,\n      expression: expression.replace(regex, key)\n    };\n  }\n  insertTokens(matches, key, expression) {\n    if (matches !== null) {\n      matches.forEach(value => {\n        expression = expression.replace(key, value);\n      });\n    }\n    return expression;\n  }\n  prepare(expression) {\n    // replace all spaces with charCode 160 to 32 charCode which supported by jsep\n    const convertedExpression = expression.replace(new RegExp(String.fromCharCode(160), 'g'), ' ');\n    const stringExpressionsData = this.extractTokens(/'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"/g, 'RX_STRING_EXPRESSION', convertedExpression);\n    stringExpressionsData.matches = map(stringExpressionsData.matches, this.insertLiteralExpressions);\n    const expressionsData = this.extractTokens(/\\${[^}]+}/g, 'RX_EXPRESSION', stringExpressionsData.expression);\n    let preparedExpression = this.prepareOperators(expressionsData.expression);\n    preparedExpression = this.insertExpressions(expressionsData.matches, 'RX_EXPRESSION', preparedExpression);\n    return this.insertTokens(stringExpressionsData.matches, 'RX_STRING_EXPRESSION', preparedExpression);\n  }\n  prepareOperators(expression) {\n    return reduce(this.prepareHandlers, (result, handler) => handler(result), expression);\n  }\n  insertLiteralExpressions(expression) {\n    const literalExpressions = uniq(expression.match(/\\${[^}$]+}/g));\n    literalExpressions.forEach(literalExpression => {\n      const regexp = new RegExp(escapeRegExp(literalExpression), 'g');\n      expression = expression.replace(regexp, `rx-${literalExpression}`);\n    });\n    return expression;\n  }\n  insertExpressions(matches, key, expression) {\n    if (matches !== null) {\n      matches.forEach(value => {\n        expression = expression.replace(key, `\"rx-${value}\"`);\n      });\n    }\n    return expression;\n  }\n}\nRxExpressionHelperService.ɵfac = function RxExpressionHelperService_Factory(t) {\n  return new (t || RxExpressionHelperService)();\n};\nRxExpressionHelperService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxExpressionHelperService,\n  factory: RxExpressionHelperService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxExpressionHelperService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass RxExpressionSyntaxTreeBuilderService {\n  constructor() {\n    this.jsep = jsep;\n    this.jsep.addBinaryOp(ExpressionOperator.Contains, 7);\n    this.jsep.addBinaryOp(ExpressionOperator.Like, 7);\n    this.jsep.addBinaryOp(ExpressionOperator.And, 2);\n    this.jsep.addBinaryOp(ExpressionOperator.Or, 1);\n    this.jsep.addBinaryOp(ExpressionOperator.Equal, 6);\n    this.jsep.addBinaryOp(ExpressionOperator.In, 8);\n    // Remove default unused binary operators.\n    this.jsep.removeBinaryOp('||');\n    this.jsep.removeBinaryOp('&&');\n    this.jsep.removeBinaryOp('|');\n    this.jsep.removeBinaryOp('^');\n    this.jsep.removeBinaryOp('&');\n    this.jsep.removeBinaryOp('==');\n    this.jsep.removeBinaryOp('===');\n    this.jsep.removeBinaryOp('!==');\n    this.jsep.removeBinaryOp('<<');\n    this.jsep.removeBinaryOp('>>');\n    this.jsep.removeBinaryOp('>>>');\n    // Remove default unused unary operators.\n    this.jsep.removeUnaryOp('~');\n    // Remove _, but keep $ to match AR expressions, e.g. $USER$.\n    this.jsep.removeIdentifierChar('_');\n  }\n  buildTree(expression) {\n    return this.jsep(expression);\n  }\n}\nRxExpressionSyntaxTreeBuilderService.ɵfac = function RxExpressionSyntaxTreeBuilderService_Factory(t) {\n  return new (t || RxExpressionSyntaxTreeBuilderService)();\n};\nRxExpressionSyntaxTreeBuilderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxExpressionSyntaxTreeBuilderService,\n  factory: RxExpressionSyntaxTreeBuilderService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxExpressionSyntaxTreeBuilderService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nconst expressionFunctions = [{\n  name: 'SAME',\n  category: 'Array',\n  description: 'Returns true if all values in array are the same, else false.',\n  parameters: [{\n    name: 'array',\n    description: 'The array to inspect.'\n  }]\n}, {\n  name: 'INCLUDES',\n  category: 'Array',\n  description: 'Returns true if value is found in array, else false.',\n  parameters: [{\n    name: 'array',\n    description: 'The array to inspect.'\n  }, {\n    name: 'value',\n    description: 'The value to search for.'\n  }]\n}, {\n  name: 'SIZE',\n  category: 'Array',\n  description: 'Gets the size of array.',\n  parameters: [{\n    name: 'array',\n    description: 'The array to inspect.'\n  }]\n}];\nconst RX_EXPRESSION_FUNCTIONS = expressionFunctions.map(descriptor => {\n  const params = map(descriptor.parameters, 'name').join(', ');\n  return Object.assign(Object.assign({}, descriptor), {\n    signature: `${descriptor.name}(${params})`\n  });\n});\nconst RX_SUPPORTED_FUNCTION = {\n  SAME: collection => every(collection, value => value === collection[0]),\n  INCLUDES: (collection, value) => includes(collection, value),\n  SIZE: collection => size(collection)\n};\nclass RxDefaultExpressionEvaluatorService {\n  constructor(rxExpressionHelperService, rxStringService, rxExpressionSyntaxTreeBuilderService) {\n    this.rxExpressionHelperService = rxExpressionHelperService;\n    this.rxStringService = rxStringService;\n    this.rxExpressionSyntaxTreeBuilderService = rxExpressionSyntaxTreeBuilderService;\n    this.parsedExpressionCache = {};\n    this.operators = {\n      [ExpressionOperator.Equal]: (a, b) => {\n        if (BigNumber.isBigNumber(a)) {\n          return a.isEqualTo(b);\n        } else if (BigNumber.isBigNumber(b)) {\n          return b.isEqualTo(a);\n        } else {\n          // tslint:disable-next-line:triple-equals\n          return a == b;\n        }\n      },\n      [ExpressionOperator.Add]: (a, b) => {\n        if ((isNil(a) || isNaN(a)) && (isNil(b) || isNaN(b))) {\n          return null;\n        } else if ((isNil(a) || isNaN(a)) && !(isNil(b) || isNaN(b))) {\n          return BigNumber.isBigNumber(b) ? Number(b) : b;\n        } else if ((isNil(b) || isNaN(b)) && !(isNil(a) || isNaN(a))) {\n          return BigNumber.isBigNumber(a) ? Number(a) : a;\n        }\n        // Have to convert BigNumber values to Number in order to use mathimatical addition as opposed to\n        // string concatenation, which will otherwise happen due to BigNumber.valueOf() returning a string.\n        a = BigNumber.isBigNumber(a) ? Number(a) : a;\n        b = BigNumber.isBigNumber(b) ? Number(b) : b;\n        return a + b;\n      },\n      [ExpressionOperator.Subtract]: (a, b) => {\n        if (isUndefined(a) || isNaN(a)) {\n          a = 0;\n        }\n        if (isUndefined(b) || isNaN(b)) {\n          b = 0;\n        }\n        return a - b;\n      },\n      [ExpressionOperator.Multiply]: (a, b) => {\n        if (isUndefined(a) || isNaN(a)) {\n          a = 0;\n        }\n        if (isUndefined(b) || isNaN(b)) {\n          b = 0;\n        }\n        return a * b;\n      },\n      [ExpressionOperator.Divide]: (a, b) => {\n        if (isUndefined(a) || isUndefined(b) || isNaN(a) || isNaN(b)) {\n          return 0;\n        }\n        return a / b;\n      },\n      [ExpressionOperator.LessThan]: (a, b) => {\n        if (BigNumber.isBigNumber(a)) {\n          return a.lt(b);\n        } else if (BigNumber.isBigNumber(b)) {\n          return b.gt(a);\n        } else {\n          return a < b;\n        }\n      },\n      [ExpressionOperator.GreaterThan]: (a, b) => {\n        if (BigNumber.isBigNumber(a)) {\n          return a.gt(b);\n        } else if (BigNumber.isBigNumber(b)) {\n          return b.lt(a);\n        } else {\n          return a > b;\n        }\n      },\n      [ExpressionOperator.GreaterThanOrEqual]: (a, b) => {\n        if (BigNumber.isBigNumber(a)) {\n          return a.gte(b);\n        } else if (BigNumber.isBigNumber(b)) {\n          return b.lte(a);\n        } else {\n          return a >= b;\n        }\n      },\n      [ExpressionOperator.LessThanOrEqual]: (a, b) => {\n        if (BigNumber.isBigNumber(a)) {\n          return a.lte(b);\n        } else if (BigNumber.isBigNumber(b)) {\n          return b.gte(a);\n        } else {\n          return a <= b;\n        }\n      },\n      [ExpressionOperator.NotEqual]: (a, b) => {\n        if (BigNumber.isBigNumber(a)) {\n          return !a.isEqualTo(b);\n        } else if (BigNumber.isBigNumber(b)) {\n          return !b.isEqualTo(a);\n        } else {\n          // tslint:disable-next-line:triple-equals\n          return a != b;\n        }\n      },\n      [ExpressionOperator.Remainder]: (a, b) => {\n        if (isUndefined(a) || isUndefined(b) || isNaN(a) || isNaN(b)) {\n          return 0;\n        }\n        return a % b;\n      },\n      [ExpressionOperator.And]: this.andHandler,\n      [ExpressionOperator.And.toLowerCase()]: this.andHandler,\n      [ExpressionOperator.Or]: this.orHandler,\n      [ExpressionOperator.Or.toLowerCase()]: this.orHandler,\n      [ExpressionOperator.Like]: this.likeHandler,\n      [ExpressionOperator.Like.toLowerCase()]: this.likeHandler,\n      [ExpressionOperator.Contains]: this.likeHandler,\n      [ExpressionOperator.Contains.toLowerCase()]: this.likeHandler\n    };\n    this.unaryOperators = {\n      '-': value => {\n        if (isUndefined(value) || isNaN(value)) {\n          return 0;\n        } else {\n          return -Number(value);\n        }\n      },\n      '!': value => !Boolean(value)\n    };\n  }\n  parseExpression(expression) {\n    if (!this.parsedExpressionCache[expression]) {\n      const parsedExpression = this.rxExpressionSyntaxTreeBuilderService.buildTree(expression);\n      if (this.validateChildNodeTypes(parsedExpression)) {\n        this.parsedExpressionCache[expression] = parsedExpression;\n      } else {\n        throw new Error('Invalid syntax');\n      }\n    }\n    return this.parsedExpressionCache[expression];\n  }\n  evaluate(expression, data) {\n    let evaluatedExpression = expression;\n    expression = trim(expression);\n    if (this.rxStringService.isNonEmptyString(expression)) {\n      const preparedExpression = this.rxExpressionHelperService.prepare(expression);\n      let parsedExpression;\n      try {\n        parsedExpression = this.parseExpression(preparedExpression);\n      } catch (e) {\n        throw new Error(`Cannot parse expression \"${expression}\": ${e.message}.`);\n      }\n      try {\n        evaluatedExpression = this.evaluateNode(parsedExpression, data || {});\n      } catch (e) {\n        throw new Error(`Cannot evaluate expression \"${expression}\": ${e.message}.`);\n      }\n    } else {\n      evaluatedExpression = null;\n    }\n    return evaluatedExpression;\n  }\n  andHandler(a, b) {\n    return Boolean(a) && Boolean(b);\n  }\n  orHandler(a, b) {\n    return Boolean(a) || Boolean(b);\n  }\n  likeHandler(a, b) {\n    return includes(a, b);\n  }\n  validateChildNodeTypes(node) {\n    let isValid = false;\n    switch (node.type) {\n      case 'BinaryExpression':\n        isValid = this.validateChildNodeTypes(node.left) && this.validateChildNodeTypes(node.right);\n        break;\n      case 'UnaryExpression':\n        isValid = this.validateChildNodeTypes(node.argument);\n        break;\n      case 'CallExpression':\n        isValid = false;\n        const functionNode = node;\n        const functionDescriptor = find(RX_EXPRESSION_FUNCTIONS, {\n          name: functionNode.callee['name']\n        });\n        if (functionDescriptor && functionNode.arguments.length === functionDescriptor.parameters.length) {\n          isValid = every(functionNode.arguments, argument => this.validateChildNodeTypes(argument));\n        }\n        break;\n      case 'Literal':\n        isValid = true;\n        break;\n      case 'Identifier':\n        isValid = /^\\$[A-Za-z]+\\$$/.test(node.name);\n        break;\n    }\n    return isValid;\n  }\n  evaluateNode(node, data) {\n    switch (node.type) {\n      case 'BinaryExpression':\n        const left = this.evaluateNode(node.left, data);\n        const right = this.evaluateNode(node.right, data);\n        if (this.operators[node.operator]) {\n          const binaryResult = this.operators[node.operator](left, right);\n          if (isNaN(binaryResult)) {\n            throw new Error(`Operator: ${node.operator} has invalid arguments: ${left}, ${right}`);\n          } else {\n            return binaryResult;\n          }\n        } else {\n          throw new Error(`Unknown binary operator: ${node.operator}`);\n        }\n      case 'CallExpression':\n        let evaluatedArguments = [];\n        const functionName = node.callee['name'];\n        evaluatedArguments = node.arguments.map(argument => this.evaluateNode(argument, data));\n        if (RX_SUPPORTED_FUNCTION[functionName]) {\n          return RX_SUPPORTED_FUNCTION[functionName](...evaluatedArguments);\n        } else {\n          throw new Error(`Unknown function: ${functionName}`);\n        }\n      case 'Literal':\n        let nodeValue = node.value;\n        if (isString(nodeValue)) {\n          if (/^rx-\\${[^{}$]+}$/.test(nodeValue)) {\n            nodeValue = result(data, nodeValue.slice(5, -1));\n          } else {\n            const expressions = nodeValue.match(/(rx-\\${[^{}$]+})/g);\n            forEach(expressions, expression => {\n              const value = result(data, expression.slice(5, -1));\n              nodeValue = nodeValue.replace(expression, isNil(value) ? '' : value);\n            });\n          }\n        }\n        return nodeValue;\n      case 'UnaryExpression':\n        if (this.unaryOperators[node.operator]) {\n          const evaluatedResult = this.evaluateNode(node.argument, data);\n          const unaryResult = this.unaryOperators[node.operator](evaluatedResult);\n          if (isNaN(unaryResult)) {\n            throw new Error(`Operator: ${node.operator} has invalid argument: ${evaluatedResult}`);\n          } else {\n            return unaryResult;\n          }\n        } else {\n          throw new Error(`Unknown unary operator: ${node.operator}`);\n        }\n      default:\n        throw new Error('Invalid syntax');\n    }\n  }\n}\nRxDefaultExpressionEvaluatorService.ɵfac = function RxDefaultExpressionEvaluatorService_Factory(t) {\n  return new (t || RxDefaultExpressionEvaluatorService)(i0.ɵɵinject(RxExpressionHelperService), i0.ɵɵinject(i4.RxStringService), i0.ɵɵinject(RxExpressionSyntaxTreeBuilderService));\n};\nRxDefaultExpressionEvaluatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxDefaultExpressionEvaluatorService,\n  factory: RxDefaultExpressionEvaluatorService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxDefaultExpressionEvaluatorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxExpressionHelperService\n    }, {\n      type: i4.RxStringService\n    }, {\n      type: RxExpressionSyntaxTreeBuilderService\n    }];\n  }, null);\n})();\nclass RxDefaultExpressionValidatorService {\n  constructor(rxStringService, rxDefaultExpressionEvaluatorService, rxExpressionHelperService) {\n    this.rxStringService = rxStringService;\n    this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;\n    this.rxExpressionHelperService = rxExpressionHelperService;\n  }\n  isValid(expression, customEvaluatorService) {\n    const evaluator = customEvaluatorService || this.rxDefaultExpressionEvaluatorService;\n    let valid = true;\n    if (this.rxStringService.isNonEmptyString(expression) && isFunction(evaluator.parseExpression)) {\n      const preparedExpression = this.rxExpressionHelperService.prepare(expression);\n      try {\n        evaluator.parseExpression(preparedExpression);\n      } catch (e) {\n        valid = false;\n      }\n    }\n    return valid;\n  }\n}\nRxDefaultExpressionValidatorService.ɵfac = function RxDefaultExpressionValidatorService_Factory(t) {\n  return new (t || RxDefaultExpressionValidatorService)(i0.ɵɵinject(i4.RxStringService), i0.ɵɵinject(RxDefaultExpressionEvaluatorService), i0.ɵɵinject(RxExpressionHelperService));\n};\nRxDefaultExpressionValidatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxDefaultExpressionValidatorService,\n  factory: RxDefaultExpressionValidatorService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxDefaultExpressionValidatorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i4.RxStringService\n    }, {\n      type: RxDefaultExpressionEvaluatorService\n    }, {\n      type: RxExpressionHelperService\n    }];\n  }, null);\n})();\nclass RxExpressionEvaluatorService {\n  constructor(injector, rxLogService, rxDefaultExpressionEvaluatorService, rxDefaultExpressionValidatorService, rxNotificationService) {\n    this.injector = injector;\n    this.rxLogService = rxLogService;\n    this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;\n    this.rxDefaultExpressionValidatorService = rxDefaultExpressionValidatorService;\n    this.rxNotificationService = rxNotificationService;\n  }\n  evaluate(expression, data, customEvaluatorService) {\n    const evaluator = customEvaluatorService || this.rxDefaultExpressionEvaluatorService;\n    const evaluatedExpression = evaluator.evaluate(expression, data);\n    this.rxLogService.debug(`EVALUATED EXPRESSION ${expression}: ${evaluatedExpression}`);\n    return evaluatedExpression;\n  }\n  tryEvaluate(expression, data, customEvaluatorService, defaultValue = null) {\n    let result = defaultValue;\n    try {\n      result = this.evaluate(expression, data, customEvaluatorService);\n    } catch (error) {\n      this.rxNotificationService.addErrorMessage(error.message);\n    }\n    return result;\n  }\n  isValid(expression, customEvaluatorService) {\n    return this.rxDefaultExpressionValidatorService.isValid(expression, customEvaluatorService);\n  }\n}\nRxExpressionEvaluatorService.ɵfac = function RxExpressionEvaluatorService_Factory(t) {\n  return new (t || RxExpressionEvaluatorService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1$1.RxLogService), i0.ɵɵinject(RxDefaultExpressionEvaluatorService), i0.ɵɵinject(RxDefaultExpressionValidatorService), i0.ɵɵinject(i1$1.RxNotificationService));\n};\nRxExpressionEvaluatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxExpressionEvaluatorService,\n  factory: RxExpressionEvaluatorService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxExpressionEvaluatorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }, {\n      type: i1$1.RxLogService\n    }, {\n      type: RxDefaultExpressionEvaluatorService\n    }, {\n      type: RxDefaultExpressionValidatorService\n    }, {\n      type: i1$1.RxNotificationService\n    }];\n  }, null);\n})();\nconst RX_EXPRESSION_EVALUATOR = {\n  operands: {\n    null: '$NULL$',\n    undefined: '$UNDEFINED$'\n  },\n  associatedFieldIdPrefixPattern: 'recordContext\\\\._associations\\\\.([^\\\\.]+)\\\\.(\\\\w+)\\\\[0]\\\\.'\n};\nclass RxRecordQueryExpressionEvaluatorService {\n  constructor(rxDefaultExpressionEvaluatorService, rxExpressionHelper, rxStringService, rxRecordInstanceUtilsService) {\n    this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;\n    this.rxExpressionHelper = rxExpressionHelper;\n    this.rxStringService = rxStringService;\n    this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;\n    this.viewRegExp = /\\${(view.+?)}/g;\n    // extract strings surrounded by double quotes,\n    // extracted strings will include escaped double quotes characters (\"\")\n    this.stringMatchingRegExp = /\"((?:(?:\"\")*|(?:[^\"])*)*)\"/g;\n    // extract strings with associated field id surrounded by quotes\n    this.associationExpressionRegExp = new RegExp(\"(')(\\\\$\\\\{\" + RX_EXPRESSION_EVALUATOR.associatedFieldIdPrefixPattern + \"\\\\d+\\\\})(')\", 'g');\n  }\n  evaluate(expression, data) {\n    this.rxOperatorCounter = 0;\n    this.rxViewExpressionCounter = 0;\n    this.rxStringExpressionCounter = 0;\n    this.rxAssociationFilterExpressionCounter = 0;\n    let evaluatedExpression = null;\n    if (!this.rxStringService.isEmptySafe(expression)) {\n      // Replace strings in double quotes with RX_STRING_EXPRESSION token, e.g.\n      // \"text ${view.foo}\" = ${view.bar}\"text \"\"text in quotes\"\" text\" ->\n      // RX_EXPRESSION_STRING = ${view.bar}RX_EXPRESSION_STRING\n      this.rxStringsExpressionData = this.rxExpressionHelper.extractTokens(this.stringMatchingRegExp, ExpressionParserToken.RxStringExpression, expression);\n      // Replace RX association filter expressions with RX_ASSOCIATION_FILTER_EXPRESSION token, e.g.\n      // '7' = '${recordContext._associations...}' -> '7' = RX_ASSOCIATION_FILTER_EXPRESSION\n      this.arRecordAssociationFilterExpressionData = this.rxExpressionHelper.extractTokens(this.associationExpressionRegExp, 'RX_ASSOCIATION_FILTER_EXPRESSION', this.rxStringsExpressionData.expression);\n      // Replace RX view expressions with RX_VIEW_EXPRESSION token, e.g\n      // ${view.foo} = ${view.bar} -> RX_VIEW_EXPRESSION = RX_VIEW_EXPRESSION\n      this.rxExpressionsData = this.rxExpressionHelper.extractTokens(this.viewRegExp, 'RX_VIEW_EXPRESSION', this.arRecordAssociationFilterExpressionData.expression);\n      // Prepare operators, e.g\n      // RX_VIEW_EXPRESSION = NOTRX_VIEW_EXPRESSION -> RX_VIEW_EXPRESSION = !RX_VIEW_EXPRESSION\n      this.rxExpressionHelper.prepareOperators(this.rxExpressionsData.expression);\n      const rxOperatorsData = this.rxExpressionHelper.extractTokens(/(\\s+(AND|OR)\\s+)|(\\s*(\\(|\\))\\s*)/g, ExpressionParserToken.RxOperator, this.rxExpressionsData.expression);\n      evaluatedExpression = map(rxOperatorsData.expression.split(ExpressionParserToken.RxOperator), operand => {\n        const likeExpressionMatch = /(.*)\\s+LIKE\\s+(.*)/g.exec(operand);\n        // does operand use the LIKE operator?\n        if (likeExpressionMatch) {\n          const leftOperandValue = this.evaluateOperand(likeExpressionMatch[1], data),\n            rightOperandValue = `\"${this.evaluateOperand(likeExpressionMatch[2], data, true)}\"`;\n          return `${leftOperandValue} LIKE ${rightOperandValue}`;\n        } else {\n          return this.evaluateOperand(operand, data);\n        }\n      }).join(ExpressionParserToken.RxOperator).replace(new RegExp(`${ExpressionParserToken.RxOperator}`, 'g'), () => rxOperatorsData.matches[this.rxOperatorCounter++]);\n    }\n    return evaluatedExpression;\n  }\n  // Evaluate operand by replacing expression tokens with evaluated values.\n  // e.g\n  // RX_EXPRESSION = RX_EXPRESSION_STRING ->\n  // \"${view.foo}\" = \"text ${view.bar}\" ->\n  // \"Foo\" LIKE \"text Bar\"\n  // or\n  // RX_ASSOCIATION_FILTER_EXPRESSION LIKE %RX_STRING_EXPRESSION% ->\n  // '${recordContext.associations...}' LIKE %\"some ${view.textFieldValue}\"% ->\n  // ${recordContext.associations...} LIKE \"%some text \"\" with \\% escaped \\_ wildcards%\"\n  evaluateOperand(operand, data, isLikeOperand = false) {\n    return reduce([this.evaluateRxViewExpressions.bind(this), this.evaluateRxStringExpressions.bind(this), this.prepareRxAssociationFilterExpressions.bind(this)], (expression, evaluator) => evaluator(expression, data, isLikeOperand), operand);\n  }\n  evaluateRxViewExpressions(operand, data, isLikeOperand = false) {\n    return operand.replace(/RX_VIEW_EXPRESSION/g, () => {\n      return this.rxExpressionsData.matches[this.rxViewExpressionCounter++].replace(this.viewRegExp, (match, submatch) => {\n        let value = result(data, submatch);\n        if (isUndefined(value)) {\n          return RX_EXPRESSION_EVALUATOR.operands.undefined;\n        } else if (isNull(value) || value === '') {\n          return isLikeOperand ? '' : RX_EXPRESSION_EVALUATOR.operands.null;\n        } else if (isString(value)) {\n          value = isLikeOperand ? this.rxRecordInstanceUtilsService.escapeTextWildcards(value) : value.replace(/\"/g, '\"\"');\n        }\n        return isLikeOperand ? value : `\"${value}\"`;\n      });\n    });\n  }\n  evaluateRxStringExpressions(operand, data, isLikeOperand = false) {\n    return operand.replace(new RegExp(`${ExpressionParserToken.RxStringExpression}`, 'g'), () => {\n      let stringExpression = this.rxStringsExpressionData.matches[this.rxStringExpressionCounter++];\n      if (isLikeOperand) {\n        stringExpression = stringExpression.replace(this.stringMatchingRegExp, '$1');\n      }\n      stringExpression = stringExpression.replace(this.viewRegExp, (match, submatch) => {\n        const value = result(data, submatch);\n        if (isNil(value)) {\n          return '';\n        } else if (isLikeOperand && isString(value)) {\n          return this.rxRecordInstanceUtilsService.escapeTextWildcards(value);\n        }\n        return value;\n      });\n      if (isEmpty(stringExpression) && !isLikeOperand) {\n        stringExpression = RX_EXPRESSION_EVALUATOR.operands.null;\n      }\n      return stringExpression;\n    });\n  }\n  prepareRxAssociationFilterExpressions(operand) {\n    return operand.replace(/RX_ASSOCIATION_FILTER_EXPRESSION/g, () => this.arRecordAssociationFilterExpressionData.matches[this.rxAssociationFilterExpressionCounter++].replace(this.associationExpressionRegExp, (match, firstQuote, associationExpression, lastQuote) => associationExpression));\n  }\n}\nRxRecordQueryExpressionEvaluatorService.ɵfac = function RxRecordQueryExpressionEvaluatorService_Factory(t) {\n  return new (t || RxRecordQueryExpressionEvaluatorService)(i0.ɵɵinject(RxDefaultExpressionEvaluatorService), i0.ɵɵinject(RxExpressionHelperService), i0.ɵɵinject(i4.RxStringService), i0.ɵɵinject(i4$1.RxRecordInstanceUtilsService));\n};\nRxRecordQueryExpressionEvaluatorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRecordQueryExpressionEvaluatorService,\n  factory: RxRecordQueryExpressionEvaluatorService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRecordQueryExpressionEvaluatorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxDefaultExpressionEvaluatorService\n    }, {\n      type: RxExpressionHelperService\n    }, {\n      type: i4.RxStringService\n    }, {\n      type: i4$1.RxRecordInstanceUtilsService\n    }];\n  }, null);\n})();\nconst RX_LEGACY_ICONS = {\n  add: 'plus',\n  addCircle: 'plus_circle',\n  back: 'undo',\n  copy: 'files_copy_o',\n  delete: 'cross',\n  deleteCircle: 'cross_circle',\n  edit: 'pencil',\n  exclamationCircle: 'exclamation_circle',\n  exclamationTriangle: 'exclamation_triangle',\n  help: 'question_circle',\n  preview: 'layout_preview',\n  mail: 'envelope',\n  print: 'printer',\n  thumbsDown: 'thumbs_down',\n  thumbsUp: 'thumbs_up'\n};\nclass RxViewComponentRegistryService {\n  constructor(componentFactoryResolver, rxGlobalCacheService, rxBundleCacheService, rxStringService, rxLogService) {\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.rxGlobalCacheService = rxGlobalCacheService;\n    this.rxBundleCacheService = rxBundleCacheService;\n    this.rxStringService = rxStringService;\n    this.rxLogService = rxLogService;\n    // contains all registered component descriptors\n    this.componentDescriptors = new Map();\n    this.asyncComponentDescriptors = [];\n    this.ownerBundleIds$ = this.rxGlobalCacheService.getBundleDescriptors().pipe(map$1(bundleDescriptors => bundleDescriptors.reduce((ownerBundleIds, bundleDescriptor) => {\n      var _a;\n      (_a = bundleDescriptor.uiOptions.viewComponents) === null || _a === void 0 ? void 0 : _a.forEach(viewComponentName => {\n        ownerBundleIds[viewComponentName] = bundleDescriptor.id;\n      });\n      return ownerBundleIds;\n    }, {})), shareReplay(1));\n  }\n  resolveAsyncDescriptors() {\n    if (this.asyncComponentDescriptors.length) {\n      this.rxLogService.debug(`Resolving ${this.asyncComponentDescriptors.length} view component descriptor(s)...`);\n      return defer(() => from(Promise.all(this.asyncComponentDescriptors).then(descriptors => {\n        descriptors.forEach(descriptor => {\n          this.registerSync(descriptor);\n        });\n        this.rxLogService.debug(`Resolved ${descriptors.length} view component descriptors: ${descriptors.map(desc => desc.type).join(', ')}.`);\n        return this.componentDescriptors;\n      })));\n    } else {\n      return of(this.componentDescriptors);\n    }\n  }\n  getRegisteredComponents() {\n    return this.componentDescriptors;\n  }\n  get(type) {\n    return this.componentDescriptors.get(type);\n  }\n  register(...componentDescriptors) {\n    componentDescriptors.forEach(descriptor => {\n      this.asyncComponentDescriptors.push(Promise.resolve(descriptor));\n    });\n  }\n  registerSync(descriptor) {\n    var _a, _b;\n    if ((_a = descriptor.aliases) === null || _a === void 0 ? void 0 : _a.includes(descriptor.type)) {\n      this.rxLogService.warning(`Component ${descriptor.type} should not have its type listed in descriptor's aliases property.`);\n      descriptor.aliases = descriptor.aliases.filter(type => type !== descriptor.type);\n    }\n    this.componentDescriptors.set(descriptor.type, descriptor);\n    (_b = descriptor.aliases) === null || _b === void 0 ? void 0 : _b.forEach(type => {\n      this.componentDescriptors.set(type, descriptor);\n    });\n  }\n  isDataComponentDescriptor(componentDescriptor) {\n    return Boolean(componentDescriptor.isDataComponent);\n  }\n  getBundlePageComponents(bundleId, includeAliases = false) {\n    return this.getDescriptors(includeAliases).filter(componentDescriptor => componentDescriptor.isPageComponent && isEmpty(componentDescriptor.availableInBundles) ? componentDescriptor.bundleId === bundleId : this.rxStringService.isIncluded(bundleId, componentDescriptor.availableInBundles));\n  }\n  getLicensedComponents(includeAliases = false) {\n    return this.rxGlobalCacheService.getLicensedBundleDescriptors().pipe(map$1(bundleDescriptors => this.getDescriptors(includeAliases).filter(componentDescriptor => this.isBundleLicensed(componentDescriptor.bundleId, bundleDescriptors) && this.isComponentAvailableInCurrentBundle(componentDescriptor))));\n  }\n  getComponentOwnerBundleId(viewComponentType) {\n    return this.ownerBundleIds$.pipe(map$1(ownerBundleIds => ownerBundleIds[viewComponentType]));\n  }\n  isBundleLicensed(bundleId, bundleDescriptors) {\n    return bundleId === RX_APPLICATION.platformBundleId || some(bundleDescriptors, {\n      id: bundleId\n    });\n  }\n  isComponentAvailableInCurrentBundle(componentDescriptor) {\n    return isEmpty(componentDescriptor.availableInBundles) || this.rxStringService.isIncluded(this.rxBundleCacheService.bundleId, componentDescriptor.availableInBundles);\n  }\n  getDescriptors(includeAliases = false) {\n    return [...this.componentDescriptors.entries()].reduce((result, [type, descriptor]) => {\n      var _a;\n      if (includeAliases || !((_a = descriptor.aliases) === null || _a === void 0 ? void 0 : _a.includes(type))) {\n        result.push(descriptor);\n      }\n      return result;\n    }, []);\n  }\n}\nRxViewComponentRegistryService.ɵfac = function RxViewComponentRegistryService_Factory(t) {\n  return new (t || RxViewComponentRegistryService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i1$1.RxGlobalCacheService), i0.ɵɵinject(i1$1.RxBundleCacheService), i0.ɵɵinject(i4.RxStringService), i0.ɵɵinject(i1$1.RxLogService));\n};\nRxViewComponentRegistryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewComponentRegistryService,\n  factory: RxViewComponentRegistryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewComponentRegistryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i1$1.RxGlobalCacheService\n    }, {\n      type: i1$1.RxBundleCacheService\n    }, {\n      type: i4.RxStringService\n    }, {\n      type: i1$1.RxLogService\n    }];\n  }, null);\n})();\nvar ViewDefinitionType;\n(function (ViewDefinitionType) {\n  ViewDefinitionType[\"Regular\"] = \"REGULAR\";\n  ViewDefinitionType[\"Shell\"] = \"SHELL\";\n})(ViewDefinitionType || (ViewDefinitionType = {}));\nconst RX_VIEW_DEFINITION = {\n  types: {\n    regular: ViewDefinitionType.Regular,\n    shell: ViewDefinitionType.Shell\n  },\n  resourceTypes: {\n    viewComponent: 'com.bmc.arsys.rx.services.view.domain.ViewComponentDefinition',\n    containerViewComponent: 'com.bmc.arsys.rx.services.view.domain.ContainerViewComponentDefinition'\n  },\n  defaultOutletName: 'DEFAULT',\n  unknownPageComponent: {\n    name: 'Unknown Component'\n  },\n  defaultLayoutTemplateId: 5,\n  styles: [{\n    id: 'rx-no-margin',\n    name: 'No Margin'\n  }, {\n    id: 'rx-default-border',\n    name: '1px Border'\n  }, {\n    id: 'rx-white-background',\n    name: 'White Background'\n  }]\n};\nclass RxViewDefinitionParserService {\n  constructor(rxTreeService) {\n    this.rxTreeService = rxTreeService;\n  }\n  getComponents(definition, skipInitial = false) {\n    const components = [];\n    if (!skipInitial) {\n      components.push({\n        componentDefinition: definition,\n        parentComponentDefinition: null\n      });\n    }\n    this.processComponents(definition.componentDefinitions, components, definition);\n    return components;\n  }\n  processComponents(componentDefinitions, components, parentComponentDefinition) {\n    componentDefinitions.forEach(componentDefinition => {\n      components.push({\n        componentDefinition,\n        parentComponentDefinition\n      });\n      if (this.isContainerViewComponentDefinition(componentDefinition)) {\n        this.processComponents(componentDefinition.componentDefinitions, components, componentDefinition);\n      }\n    });\n  }\n  isContainerViewComponentDefinition(componentDefinition) {\n    return componentDefinition.componentDefinitions !== undefined;\n  }\n  findParentComponentDefinition(viewDefinition, childComponentDefinition, predicate) {\n    const componentDefinitionsWithParent = this.getComponents(viewDefinition);\n    let parentComponentDefinition;\n    let childComponentDefinitionWithParent = componentDefinitionsWithParent.find(pair => pair.componentDefinition.guid === childComponentDefinition.guid);\n    while (childComponentDefinitionWithParent && !parentComponentDefinition) {\n      if (predicate(childComponentDefinitionWithParent.componentDefinition)) {\n        parentComponentDefinition = childComponentDefinitionWithParent.componentDefinition;\n      } else {\n        childComponentDefinitionWithParent = componentDefinitionsWithParent.find(pair => pair.componentDefinition.guid === childComponentDefinitionWithParent.parentComponentDefinition.guid);\n      }\n    }\n    return parentComponentDefinition;\n  }\n  findViewComponent(viewComponentContainer, predicate) {\n    return find(this.rxTreeService.flattenTree(viewComponentContainer, 'componentDefinitions'), predicate);\n  }\n}\nRxViewDefinitionParserService.ɵfac = function RxViewDefinitionParserService_Factory(t) {\n  return new (t || RxViewDefinitionParserService)(i0.ɵɵinject(i4.RxTreeService));\n};\nRxViewDefinitionParserService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewDefinitionParserService,\n  factory: RxViewDefinitionParserService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewDefinitionParserService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i4.RxTreeService\n    }];\n  }, null);\n})();\nclass RxViewActionRegistryService {\n  constructor(rxGlobalCacheService, rxStringService, rxBundleCacheService) {\n    this.rxGlobalCacheService = rxGlobalCacheService;\n    this.rxStringService = rxStringService;\n    this.rxBundleCacheService = rxBundleCacheService;\n    this.viewActionDescriptors = new Map();\n    this.designManagers = new Map();\n    this.ownerBundleIds$ = this.rxGlobalCacheService.getBundleDescriptors().pipe(map$1(bundleDescriptors => bundleDescriptors.reduce((ownerBundleIds, bundleDescriptor) => {\n      var _a;\n      (_a = bundleDescriptor.uiOptions.viewActions) === null || _a === void 0 ? void 0 : _a.forEach(viewActionName => {\n        ownerBundleIds[viewActionName] = bundleDescriptor.id;\n      });\n      return ownerBundleIds;\n    }, {})), shareReplay(1));\n  }\n  register(viewActionDescriptor) {\n    if (!viewActionDescriptor.label) {\n      viewActionDescriptor.label = viewActionDescriptor.name;\n    }\n    viewActionDescriptor.parameters = viewActionDescriptor.parameters || [];\n    viewActionDescriptor.parameters.push({\n      name: '$condition$',\n      enableExpressionEvaluation: true\n    });\n    viewActionDescriptor.parameters.push({\n      name: 'index',\n      designType: ViewComponentPropertyType.Number\n    });\n    this.viewActionDescriptors.set(viewActionDescriptor.name, viewActionDescriptor);\n  }\n  get(actionName) {\n    return this.viewActionDescriptors.get(actionName);\n  }\n  getRegisteredActions() {\n    return this.viewActionDescriptors;\n  }\n  getLicensedActions() {\n    return this.rxGlobalCacheService.getLicensedBundleDescriptors().pipe(map$1(bundleDescriptors => {\n      return Array.from(this.viewActionDescriptors.values()).filter(actionDescriptor => {\n        return this.isBundleLicensed(actionDescriptor.bundleId, bundleDescriptors) && this.isActionAvailableInCurrentBundle(actionDescriptor);\n      });\n    }));\n  }\n  getActionOwnerBundleId(viewActionName) {\n    return this.ownerBundleIds$.pipe(map$1(ownerBundleIds => ownerBundleIds[viewActionName]));\n  }\n  isBundleLicensed(bundleId, bundleDescriptors) {\n    return bundleId === RX_APPLICATION.platformBundleId || some(bundleDescriptors, {\n      id: bundleId\n    });\n  }\n  isActionAvailableInCurrentBundle(actionDescriptor) {\n    return isEmpty(actionDescriptor.availableInBundles) || this.rxStringService.isIncluded(this.rxBundleCacheService.bundleId, actionDescriptor.availableInBundles);\n  }\n  registerUnknownAction(unknownActionName) {\n    let unknownActionDescriptor = this.get(unknownActionName);\n    if (!unknownActionDescriptor) {\n      unknownActionDescriptor = Object.assign(Object.assign({}, this.get('rxUnknownViewAction')), {\n        name: unknownActionName\n      });\n      this.register(unknownActionDescriptor);\n    }\n    return unknownActionDescriptor;\n  }\n  registerDesignManager(actionName, designManagerService) {\n    this.designManagers.set(actionName, designManagerService);\n  }\n  getDesignManager(actionName) {\n    var _a, _b;\n    return (_a = this.designManagers.get(actionName)) !== null && _a !== void 0 ? _a : (_b = this.viewActionDescriptors.get(actionName)) === null || _b === void 0 ? void 0 : _b.designManager;\n  }\n}\nRxViewActionRegistryService.ɵfac = function RxViewActionRegistryService_Factory(t) {\n  return new (t || RxViewActionRegistryService)(i0.ɵɵinject(i1$1.RxGlobalCacheService), i0.ɵɵinject(i4.RxStringService), i0.ɵɵinject(i1$1.RxBundleCacheService));\n};\nRxViewActionRegistryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewActionRegistryService,\n  factory: RxViewActionRegistryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewActionRegistryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxGlobalCacheService\n    }, {\n      type: i4.RxStringService\n    }, {\n      type: i1$1.RxBundleCacheService\n    }];\n  }, null);\n})();\nvar RxViewComponentType;\n(function (RxViewComponentType) {\n  RxViewComponentType[\"ButtonBar\"] = \"rx-button-bar\";\n  RxViewComponentType[\"RecordEditor\"] = \"rx-record-editor\";\n  RxViewComponentType[\"ActionButton\"] = \"rx-action-button\";\n  RxViewComponentType[\"Action\"] = \"rx-action\";\n  RxViewComponentType[\"Page\"] = \"rx-page\";\n  RxViewComponentType[\"ExtensionContainer\"] = \"rx-extension-container\";\n  RxViewComponentType[\"Container\"] = \"rx-container\";\n  RxViewComponentType[\"RichText\"] = \"rx-rich-text\";\n  RxViewComponentType[\"TabPanel\"] = \"rx-tab-panel\";\n  RxViewComponentType[\"TabContainer\"] = \"rx-tab-container\";\n  RxViewComponentType[\"Image\"] = \"rx-image\";\n  RxViewComponentType[\"ServiceList\"] = \"rx-service-list\";\n  RxViewComponentType[\"Unknown\"] = \"rx-unknown\";\n  RxViewComponentType[\"Association\"] = \"rx-association\";\n  RxViewComponentType[\"AssociatedRecordField\"] = \"rx-associated-record-field\";\n  RxViewComponentType[\"DateTime\"] = \"rx-date-time-field\";\n  RxViewComponentType[\"Selection\"] = \"rx-selection-field\";\n  RxViewComponentType[\"Date\"] = \"rx-date-field\";\n  RxViewComponentType[\"Time\"] = \"rx-time-field\";\n  RxViewComponentType[\"Integer\"] = \"rx-integer-field\";\n  RxViewComponentType[\"Floating\"] = \"rx-floating-field\";\n  RxViewComponentType[\"Decimal\"] = \"rx-decimal-field\";\n  RxViewComponentType[\"Boolean\"] = \"rx-boolean-field\";\n  RxViewComponentType[\"Attachment\"] = \"rx-attachment-field\";\n  RxViewComponentType[\"Character\"] = \"rx-character-field\";\n  RxViewComponentType[\"LocalizedCharacter\"] = \"rx-localized-character-field\";\n  RxViewComponentType[\"Textarea\"] = \"rx-textarea-field\";\n  RxViewComponentType[\"SelectGroup\"] = \"rx-select-group\";\n  RxViewComponentType[\"SelectGroupField\"] = \"rx-select-group-field\";\n  RxViewComponentType[\"RichTextarea\"] = \"rx-rich-textarea-field\";\n  RxViewComponentType[\"ViewPresetSelector\"] = \"rx-view-preset-selector\";\n  RxViewComponentType[\"ViewPreset\"] = \"rx-view-preset\";\n})(RxViewComponentType || (RxViewComponentType = {}));\nvar BwfViewComponentType;\n(function (BwfViewComponentType) {\n  BwfViewComponentType[\"DynamicNamedList\"] = \"ux-dynamic-named-list\";\n})(BwfViewComponentType || (BwfViewComponentType = {}));\nconst RxViewComponent = ɵmakeDecorator('RxViewComponent');\nclass RxViewDefinitionLocalizationService {\n  constructor(rxViewDefinitionParserService, rxViewComponentRegistryService, rxViewActionRegistryService, rxGuidService, rxTreeService) {\n    this.rxViewDefinitionParserService = rxViewDefinitionParserService;\n    this.rxViewComponentRegistryService = rxViewComponentRegistryService;\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxGuidService = rxGuidService;\n    this.rxTreeService = rxTreeService;\n  }\n  applyLocalization(viewDefinition) {\n    const componentDefinitions = this.rxTreeService.flatten(viewDefinition, 'componentDefinitions');\n    const localizableStringGuidsByComponentGuid = {};\n    // converting Select Group localization for AngularJS views\n    // todo can be removed after dropping support of AngularJS version\n    this.convertOldSelectGroupLocalization(viewDefinition, componentDefinitions);\n    componentDefinitions.forEach(componentDefinition => {\n      const localizableStrings = viewDefinition.localizableStringsByComponentId[componentDefinition.guid];\n      const propertyNameToStringGuidMap = this.applyComponentDefinitionLocalization(componentDefinition, localizableStrings);\n      if (!isEmpty(propertyNameToStringGuidMap)) {\n        localizableStringGuidsByComponentGuid[componentDefinition.guid] = propertyNameToStringGuidMap;\n      }\n    });\n    viewDefinition.localizablePropertyToStringGuidMap = localizableStringGuidsByComponentGuid;\n    return viewDefinition;\n  }\n  extractLocalizableStrings(viewDefinition) {\n    const localizableStrings = {};\n    const localizablePropertyToStringGuidMap = viewDefinition.localizablePropertyToStringGuidMap || {};\n    this.rxViewDefinitionParserService.getComponents(viewDefinition, true).map(item => item.componentDefinition).filter(component => component.type && component.type !== RxViewComponentType.Page).forEach(component => {\n      const componentDescriptor = this.rxViewComponentRegistryService.get(component.type);\n      const propertyNameToStringGuidMap = localizablePropertyToStringGuidMap[component.guid] || {};\n      const componentStrings = {};\n      let localizablePropertyNames;\n      if (componentDescriptor.type === RxViewComponentType.Action) {\n        const actionDescriptor = this.rxViewActionRegistryService.get(component.propertiesByName.name);\n        localizablePropertyNames = this.getLocalizableActionParameterNames(actionDescriptor);\n      } else {\n        localizablePropertyNames = this.getLocalizableComponentPropertyNames(componentDescriptor);\n      }\n      localizablePropertyNames.forEach(localizablePropertyName => {\n        if (component.propertiesByName[localizablePropertyName]) {\n          const stringGuid = propertyNameToStringGuidMap[localizablePropertyName] || this.rxGuidService.generate();\n          componentStrings[stringGuid] = component.propertiesByName[localizablePropertyName];\n          component.propertiesByName[localizablePropertyName] = stringGuid;\n        }\n      });\n      if (!isEmpty(componentStrings)) {\n        localizableStrings[component.guid] = componentStrings;\n      }\n    });\n    return localizableStrings;\n  }\n  applyComponentDefinitionLocalization(componentDefinition, localizableStrings = {}) {\n    return transform(componentDefinition.propertiesByName, (result, propertyValue, propertyName) => {\n      if (localizableStrings[propertyValue]) {\n        componentDefinition.propertiesByName[propertyName] = localizableStrings[propertyValue];\n        result[propertyName] = propertyValue;\n      }\n    }, {});\n  }\n  getLocalizableActionParameterNames(actionDescriptor) {\n    return (actionDescriptor.parameters || []).reduce((parameterNames, parameter) => {\n      if (parameter.localizable) {\n        parameterNames.push(parameter.name);\n      } else if (parameter.attributes) {\n        forEach(parameter.attributes, attribute => {\n          if (attribute.localizable) {\n            parameterNames.push(`${parameter.name}.${attribute.name}`);\n          }\n        });\n      }\n      return parameterNames;\n    }, []);\n  }\n  getLocalizableComponentPropertyNames(componentDescriptor) {\n    return (componentDescriptor.properties || []).filter(prop => prop.localizable).map(prop => prop.name);\n  }\n  // this method used to move SelectGroupField localization from SelectGroup localization object\n  // to own one in same way as this done for any other component.\n  // Method should handle only AngularJS views that has legacy labelId property in SelectGroupField\n  convertOldSelectGroupLocalization(viewDefinition, componentDefinitions) {\n    componentDefinitions.filter(component => component.type === RxViewComponentType.SelectGroup).forEach(selectGroup => {\n      selectGroup.componentDefinitions.forEach(selectGroupField => {\n        if (selectGroupField.propertiesByName.labelId) {\n          const oldStringGuid = selectGroupField.propertiesByName.labelId;\n          const newStringGuid = this.rxGuidService.generate();\n          const localizedLabel = viewDefinition.localizableStringsByComponentId[selectGroup.guid][oldStringGuid];\n          // setting localized string guid same way as for other components\n          selectGroupField.propertiesByName.label = newStringGuid;\n          // moving localization from SelectGroup to SelectGroupField object with new guid\n          // to avoid unexpected server behaviour\n          set(viewDefinition.localizableStringsByComponentId, [selectGroupField.guid, newStringGuid], localizedLabel);\n          // removing legacy labelId\n          delete selectGroupField.propertiesByName.labelId;\n          // removing string from select group localization object\n          delete viewDefinition.localizableStringsByComponentId[selectGroup.guid][oldStringGuid];\n        }\n      });\n      // removing select group localization object if empty\n      if (isEmpty(viewDefinition.localizableStringsByComponentId[selectGroup.guid])) {\n        delete viewDefinition.localizableStringsByComponentId[selectGroup.guid];\n      }\n    });\n  }\n}\nRxViewDefinitionLocalizationService.ɵfac = function RxViewDefinitionLocalizationService_Factory(t) {\n  return new (t || RxViewDefinitionLocalizationService)(i0.ɵɵinject(RxViewDefinitionParserService), i0.ɵɵinject(RxViewComponentRegistryService), i0.ɵɵinject(RxViewActionRegistryService), i0.ɵɵinject(i4.RxGuidService), i0.ɵɵinject(i4.RxTreeService));\n};\nRxViewDefinitionLocalizationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewDefinitionLocalizationService,\n  factory: RxViewDefinitionLocalizationService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewDefinitionLocalizationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxViewDefinitionParserService\n    }, {\n      type: RxViewComponentRegistryService\n    }, {\n      type: RxViewActionRegistryService\n    }, {\n      type: i4.RxGuidService\n    }, {\n      type: i4.RxTreeService\n    }];\n  }, null);\n})();\nvar ViewLayoutRole;\n(function (ViewLayoutRole) {\n  ViewLayoutRole[\"Header\"] = \"header\";\n  ViewLayoutRole[\"Content\"] = \"content\";\n  ViewLayoutRole[\"Footer\"] = \"footer\";\n})(ViewLayoutRole || (ViewLayoutRole = {}));\nvar LayoutTypes;\n(function (LayoutTypes) {\n  LayoutTypes[\"Flexible\"] = \"Flexible\";\n  LayoutTypes[\"Fixed\"] = \"Fixed\";\n})(LayoutTypes || (LayoutTypes = {}));\nconst defaultHeaderOutlet = {\n  name: ViewLayoutRole.Header,\n  height: 60,\n  columns: [getEmptyColumn()]\n};\nconst defaultFooterOutlet = {\n  name: ViewLayoutRole.Footer,\n  height: 60,\n  columns: [getEmptyColumn()]\n};\nconst RX_VIEW_LAYOUTS = [{\n  id: 1,\n  label: 'Header and 1 Column',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet()]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 2,\n  label: 'Header and 2 Columns (50/50)',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet(6, 6)]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 3,\n  label: 'Header and 2 Columns (60/40)',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet(7, 5)]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 4,\n  label: 'Header and 2 Columns (40/60)',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet(5, 7)]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 16,\n  label: 'Header and 2 Columns (70/30)',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet(8, 4)]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 5,\n  label: 'Container',\n  layout: {\n    outlets: [getContentOutlet()]\n  },\n  layoutType: LayoutTypes.Flexible\n}, {\n  id: 6,\n  label: '2 Columns (50/50)',\n  layout: {\n    outlets: [getContentOutlet(6, 6)]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 7,\n  label: '2 Columns (60/40)',\n  layout: {\n    outlets: [getContentOutlet(7, 5)]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 8,\n  label: '2 Columns (40/60)',\n  layout: {\n    outlets: [getContentOutlet(5, 7)]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 14,\n  label: '2 Columns (70/30)',\n  layout: {\n    outlets: [getContentOutlet(8, 4)]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 9,\n  label: '3 Equal Columns',\n  layout: {\n    outlets: [getContentOutlet(4, 4, 4)]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 10,\n  label: 'Header, Footer and 1 Column',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet(), defaultFooterOutlet]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 11,\n  label: 'Header, Footer and 2 Columns (50/50)',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet(6, 6), defaultFooterOutlet]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 12,\n  label: 'Header, Footer and 2 Columns (60/40)',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet(7, 5), defaultFooterOutlet]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 13,\n  label: 'Header, Footer and 2 Columns (40/60)',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet(5, 7), defaultFooterOutlet]\n  },\n  layoutType: LayoutTypes.Fixed\n}, {\n  id: 15,\n  label: 'Header, Footer and 2 Columns (70/30)',\n  layout: {\n    outlets: [defaultHeaderOutlet, getContentOutlet(8, 4), defaultFooterOutlet]\n  },\n  layoutType: LayoutTypes.Fixed\n}].map(layout => {\n  layout.checksum = getLayoutChecksum(layout.layout);\n  return layout;\n});\nfunction getLayoutChecksum(layout) {\n  const contentOutlet = layout.outlets.find(outlet => outlet.name === RX_VIEW_DEFINITION.defaultOutletName);\n  let checksum = layout.outlets.find(outlet => outlet.name === ViewLayoutRole.Header) ? 'h' : '';\n  checksum += layout.outlets.find(outlet => outlet.name === ViewLayoutRole.Footer) ? 'f' : '';\n  contentOutlet.columns.forEach(column => checksum += `c${column.span || 12}`);\n  return checksum;\n}\nfunction getContentOutlet(...columnSpan) {\n  return {\n    name: RX_VIEW_DEFINITION.defaultOutletName,\n    columns: columnSpan.length ? columnSpan.map(span => getEmptyColumn({\n      span\n    })) : [getEmptyColumn()]\n  };\n}\nfunction getEmptyColumn(props) {\n  return Object.assign({\n    children: []\n  }, props);\n}\n\n// @dynamic\nclass RxViewLayout {\n  static getViewLayoutForDefaultOutlet(children) {\n    return {\n      outlets: [this.getOutlet(RX_VIEW_DEFINITION.defaultOutletName, children)]\n    };\n  }\n  static getEmptyViewLayoutForOutletNames(list) {\n    return {\n      outlets: list.map(({\n        name\n      }) => this.getOutlet(name))\n    };\n  }\n  static getEmptyViewLayoutForOutlets(outlets) {\n    return {\n      outlets: outlets.map(outlet => {\n        return Object.assign(Object.assign({}, outlet), {\n          columns: outlet.columns.map(column => Object.assign(Object.assign({}, column), {\n            children: []\n          }))\n        });\n      })\n    };\n  }\n  static getOutlet(name = RX_VIEW_DEFINITION.defaultOutletName, children = []) {\n    return {\n      name,\n      columns: [{\n        children\n      }]\n    };\n  }\n  static getViewLayoutChildGuids(layout, outletName) {\n    return reduce(layout.outlets, (guids, outlet) => {\n      if (!outletName || outletName === outlet.name) {\n        outlet.columns.forEach(column => {\n          guids.push(...column.children);\n        });\n      }\n      return guids;\n    }, []);\n  }\n  static hasChild(layout, guid) {\n    return Boolean(layout.outlets.find(outlet => this.outletHasChild(outlet, guid)));\n  }\n  static outletHasChild(outlet, guid) {\n    return Boolean(outlet.columns.find(column => column.children.includes(guid)));\n  }\n  static getViewLayoutTemplate(layoutTemplate) {\n    const layoutItem = RX_VIEW_LAYOUTS.find(item => item.id === layoutTemplate) || RX_VIEW_LAYOUTS.find(item => item.id === RX_VIEW_DEFINITION.defaultLayoutTemplateId);\n    return layoutItem.layout;\n  }\n  static getLayoutName(layout) {\n    const checksum = getLayoutChecksum(layout);\n    const layoutTemplate = RX_VIEW_LAYOUTS.find(item => item.checksum === checksum);\n    return layoutTemplate ? layoutTemplate.label : '';\n  }\n  static removeChildFromLayout(layout, guidToRemove) {\n    return {\n      outlets: layout.outlets.map(outlet => Object.assign(Object.assign({}, outlet), {\n        columns: outlet.columns.map(column => Object.assign(Object.assign({}, column), {\n          children: column.children.filter(childGuid => childGuid !== guidToRemove)\n        }))\n      }))\n    };\n  }\n}\nconst renameViewDefinitionCommand = 'com.bmc.arsys.rx.application.view.command.RenameViewDefinitionCommand';\nconst revertCustomizationResourceType = 'com.bmc.arsys.rx.application.view.command.RevertViewDefinitionCommand';\nclass RxViewDefinitionService {\n  constructor(httpClient, rxGuidService, rxCommandFactoryService, rxViewDefinitionLocalizationService, rxLocalizationService) {\n    this.httpClient = httpClient;\n    this.rxGuidService = rxGuidService;\n    this.rxCommandFactoryService = rxCommandFactoryService;\n    this.rxViewDefinitionLocalizationService = rxViewDefinitionLocalizationService;\n    this.rxLocalizationService = rxLocalizationService;\n    this.renameCommand = rxCommandFactoryService.forResourceType(renameViewDefinitionCommand);\n    this.revertCustomizationCommand = rxCommandFactoryService.forResourceType(revertCustomizationResourceType);\n  }\n  get(viewDefinitionName, options) {\n    const defaultOptions = {\n      params: {\n        locale: this.rxLocalizationService.currentLocale\n      }\n    };\n    return this.httpClient.get(this.getUrl(viewDefinitionName), Object.assign(Object.assign({}, defaultOptions), options)).pipe(map$1(viewDefinition => this.rxViewDefinitionLocalizationService.applyLocalization(viewDefinition)));\n  }\n  getNew(layoutTemplate) {\n    return of(this.getNewViewDefinition.call(this, layoutTemplate));\n  }\n  create(viewDefinition) {\n    return this.httpClient.post(this.getUrl(), viewDefinition, {\n      responseType: 'text',\n      observe: 'response'\n    });\n  }\n  update(viewDefinitionName, viewDefinition, options) {\n    return this.httpClient.put(this.getUrl(viewDefinitionName), viewDefinition, options);\n  }\n  delete(viewDefinitionName) {\n    return this.httpClient.delete(this.getUrl(viewDefinitionName));\n  }\n  rename(oldViewDefinitionName, newViewDefinitionName) {\n    return this.renameCommand.execute({\n      name: oldViewDefinitionName,\n      newName: newViewDefinitionName\n    });\n  }\n  isPageView(viewDefinition) {\n    return viewDefinition.componentDefinitions.length === 1 && viewDefinition.componentDefinitions[0].type === RxViewComponentType.Page;\n  }\n  revertCustomization(viewDefinitionName) {\n    return this.revertCustomizationCommand.execute({\n      viewDefinitionName\n    });\n  }\n  getUrl(viewDefinitionName) {\n    return viewDefinitionName ? `/api/rx/application/view/viewdefinition/${encodeURIComponent(viewDefinitionName)}` : '/api/rx/application/view/viewdefinition';\n  }\n  getNewViewDefinition(layoutTemplate = RX_VIEW_DEFINITION.defaultLayoutTemplateId) {\n    return {\n      guid: this.rxGuidService.generate(),\n      name: null,\n      description: null,\n      componentDefinitions: [],\n      inputParams: [],\n      outputParams: [],\n      allowOverlay: false,\n      layout: JSON.stringify(RxViewLayout.getViewLayoutTemplate(layoutTemplate)),\n      permissions: [{\n        ownerId: {\n          value: 0,\n          name: 'Public',\n          type: 'GROUP'\n        },\n        type: 'VISIBLE'\n      }],\n      type: RX_VIEW_DEFINITION.types.regular,\n      scope: RX_BUNDLE.definitionScopeTypes.bundle,\n      targetViewDefinitionName: null,\n      targetExtensionContainerGuid: null,\n      styles: null\n    };\n  }\n}\nRxViewDefinitionService.ɵfac = function RxViewDefinitionService_Factory(t) {\n  return new (t || RxViewDefinitionService)(i0.ɵɵinject(i1$2.HttpClient), i0.ɵɵinject(i4.RxGuidService), i0.ɵɵinject(i1$1.RxCommandFactoryService), i0.ɵɵinject(RxViewDefinitionLocalizationService), i0.ɵɵinject(i1$1.RxLocalizationService));\n};\nRxViewDefinitionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewDefinitionService,\n  factory: RxViewDefinitionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewDefinitionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.HttpClient\n    }, {\n      type: i4.RxGuidService\n    }, {\n      type: i1$1.RxCommandFactoryService\n    }, {\n      type: RxViewDefinitionLocalizationService\n    }, {\n      type: i1$1.RxLocalizationService\n    }];\n  }, null);\n})();\nconst viewDefinitionDataPageQuery = 'com.bmc.arsys.rx.application.view.datapage.ViewDefinitionDataPageQuery';\nclass RxViewDefinitionDataPageService extends DataPage {\n  constructor(injector) {\n    super(injector, viewDefinitionDataPageQuery, {\n      params: {\n        excludeExtensionViews: true\n      }\n    });\n    this.injector = injector;\n  }\n}\nRxViewDefinitionDataPageService.ɵfac = function RxViewDefinitionDataPageService_Factory(t) {\n  return new (t || RxViewDefinitionDataPageService)(i0.ɵɵinject(i0.Injector));\n};\nRxViewDefinitionDataPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewDefinitionDataPageService,\n  factory: RxViewDefinitionDataPageService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewDefinitionDataPageService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.Injector\n    }];\n  }, null);\n})();\nclass RxViewDefinitionCacheService {\n  constructor(rxViewDefinitionService, viewDefinitionDataPageService) {\n    this.rxViewDefinitionService = rxViewDefinitionService;\n    this.viewDefinitionDataPageService = viewDefinitionDataPageService;\n    this.viewDefinitionCache = new Map();\n    this.viewDefinitionNamesCache = new Map();\n    this.consumers = new Set();\n  }\n  getViewDefinitionNames(bundleId) {\n    if (!this.viewDefinitionNamesCache.has(bundleId)) {\n      const viewDefinitionNames$ = this.viewDefinitionDataPageService.get({\n        headers: {\n          'default-bundle-scope': bundleId\n        },\n        params: {\n          propertySelection: ['name'],\n          viewType: 'REGULAR'\n        }\n      }).pipe(pluck('data'), map$1(viewDefinitionsNames => viewDefinitionsNames.map(viewDefinition => viewDefinition.name)), shareReplay(1));\n      this.viewDefinitionNamesCache.set(bundleId, viewDefinitionNames$);\n    }\n    return this.viewDefinitionNamesCache.get(bundleId);\n  }\n  getViewDefinition(viewDefinitionName, options) {\n    if (!this.viewDefinitionCache.has(viewDefinitionName)) {\n      const viewDefinition$ = this.rxViewDefinitionService.get(viewDefinitionName, options).pipe(shareReplay(1));\n      this.viewDefinitionCache.set(viewDefinitionName, viewDefinition$);\n    }\n    return this.viewDefinitionCache.get(viewDefinitionName);\n  }\n  registerConsumer(consumerDestroy$) {\n    this.consumers.add(consumerDestroy$);\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n  clearCache() {\n    this.viewDefinitionCache.clear();\n    this.viewDefinitionNamesCache.clear();\n  }\n}\nRxViewDefinitionCacheService.ɵfac = function RxViewDefinitionCacheService_Factory(t) {\n  return new (t || RxViewDefinitionCacheService)(i0.ɵɵinject(RxViewDefinitionService), i0.ɵɵinject(RxViewDefinitionDataPageService));\n};\nRxViewDefinitionCacheService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewDefinitionCacheService,\n  factory: RxViewDefinitionCacheService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewDefinitionCacheService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxViewDefinitionService\n    }, {\n      type: RxViewDefinitionDataPageService\n    }];\n  }, null);\n})();\nclass ViewModule {\n  static registerComponents(components) {\n    return {\n      ngModule: ViewModule,\n      providers: [{\n        provide: 'components',\n        useValue: [...components]\n      }]\n    };\n  }\n}\nViewModule.ɵfac = function ViewModule_Factory(t) {\n  return new (t || ViewModule)();\n};\nViewModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ViewModule\n});\nViewModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewModule, [{\n    type: NgModule\n  }], null, null);\n})();\nclass RxViewActionService {\n  constructor(rxViewActionRegistryService, rxLogService) {\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxLogService = rxLogService;\n  }\n  execute(actionName, parameters) {\n    const viewActionDescriptor = this.rxViewActionRegistryService.get(actionName);\n    if (viewActionDescriptor) {\n      if (parameters.$condition$ !== false) {\n        return viewActionDescriptor.service.execute(parameters);\n      } else {\n        this.rxLogService.debug(`View Action ${actionName} skipped.`);\n        return EMPTY;\n      }\n    } else {\n      return throwError(`View Action ${actionName} not found.`);\n    }\n  }\n}\nRxViewActionService.ɵfac = function RxViewActionService_Factory(t) {\n  return new (t || RxViewActionService)(i0.ɵɵinject(RxViewActionRegistryService), i0.ɵɵinject(i1$1.RxLogService));\n};\nRxViewActionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewActionService,\n  factory: RxViewActionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewActionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxViewActionRegistryService\n    }, {\n      type: i1$1.RxLogService\n    }];\n  }, null);\n})();\nconst RX_VIEW_ACTION = {\n  viewActionNames: {\n    openView: 'rxOpenViewAction',\n    launchUrl: 'rxLaunchUrlAction'\n  }\n};\nvar OpenViewActionLaunchBehavior;\n(function (OpenViewActionLaunchBehavior) {\n  OpenViewActionLaunchBehavior[\"SameWindow\"] = \"sameWindow\";\n  OpenViewActionLaunchBehavior[\"NewWindow\"] = \"newWindow\";\n})(OpenViewActionLaunchBehavior || (OpenViewActionLaunchBehavior = {}));\nvar OpenViewActionModalSize;\n(function (OpenViewActionModalSize) {\n  OpenViewActionModalSize[\"Xsmall\"] = \"rx-xs\";\n  OpenViewActionModalSize[\"Small\"] = \"rx-sm\";\n  OpenViewActionModalSize[\"Medium\"] = \"rx-md\";\n  OpenViewActionModalSize[\"Large\"] = \"rx-lg\";\n  OpenViewActionModalSize[\"Xlarge\"] = \"rx-xl\";\n  OpenViewActionModalSize[\"Xxlarge\"] = \"rx-xxl\";\n  OpenViewActionModalSize[\"FullSize\"] = \"rx-full-size\";\n})(OpenViewActionModalSize || (OpenViewActionModalSize = {}));\nvar OpenViewActionType;\n(function (OpenViewActionType) {\n  OpenViewActionType[\"FullWidth\"] = \"fullWidth\";\n  OpenViewActionType[\"CenteredModal\"] = \"centeredModal\";\n  OpenViewActionType[\"DockedLeftModal\"] = \"dockedLeftModal\";\n  OpenViewActionType[\"DockedRightModal\"] = \"dockedRightModal\";\n})(OpenViewActionType || (OpenViewActionType = {}));\nconst RxViewAction = ɵmakeDecorator('RxViewAction');\nconst RX_LAUNCH_BEHAVIOR = {\n  newWindow: {\n    content: 'Open in a new tab',\n    value: 'newWindow',\n    target: '_blank'\n  },\n  sameWindow: {\n    content: 'Open in the same tab',\n    value: 'sameWindow',\n    target: '_self'\n  },\n  parentFrame: {\n    content: 'Open in the parent frame',\n    value: 'parentFrame',\n    target: '_parent'\n  },\n  windowFullBody: {\n    content: 'Open in the full body of the window',\n    value: 'windowFullBody',\n    target: '_top'\n  }\n};\nclass RxViewActionDesignAdapterService {\n  adaptDefinition(componentDefinition) {\n    var _a;\n    componentDefinition.propertiesByName.$condition$ = (_a = componentDefinition.propertiesByName.$condition$) !== null && _a !== void 0 ? _a : null;\n  }\n}\nRxViewActionDesignAdapterService.ɵfac = function RxViewActionDesignAdapterService_Factory(t) {\n  return new (t || RxViewActionDesignAdapterService)();\n};\nRxViewActionDesignAdapterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewActionDesignAdapterService,\n  factory: RxViewActionDesignAdapterService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewActionDesignAdapterService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass ViewActionDesignModule {\n  constructor(rxViewComponentRegistryService, rxDefinitionAdapterRegistryService, rxViewActionDesignAdapterService) {\n    rxDefinitionAdapterRegistryService.registerDesignAdapter(RxViewComponentType.Action, rxViewActionDesignAdapterService);\n    rxViewComponentRegistryService.register({\n      type: RxViewComponentType.Action,\n      isDataComponent: true,\n      isContainerComponent: true\n    });\n  }\n}\nViewActionDesignModule.ɵfac = function ViewActionDesignModule_Factory(t) {\n  return new (t || ViewActionDesignModule)(i0.ɵɵinject(RxViewComponentRegistryService), i0.ɵɵinject(i1$1.RxDefinitionAdapterRegistryService), i0.ɵɵinject(RxViewActionDesignAdapterService));\n};\nViewActionDesignModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ViewActionDesignModule\n});\nViewActionDesignModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [RxViewActionDesignAdapterService]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewActionDesignModule, [{\n    type: NgModule,\n    args: [{\n      providers: [RxViewActionDesignAdapterService]\n    }]\n  }], function () {\n    return [{\n      type: RxViewComponentRegistryService\n    }, {\n      type: i1$1.RxDefinitionAdapterRegistryService\n    }, {\n      type: RxViewActionDesignAdapterService\n    }];\n  }, null);\n})();\nclass RxViewActionDefinitionAdapterRegistryService {\n  constructor() {\n    this.runtimeAdapters = new Map();\n    this.designAdapters = new Map();\n  }\n  registerRuntimeAdapter(actionName, adapter) {\n    this.runtimeAdapters.set(actionName, adapter);\n  }\n  registerDesignAdapter(actionName, adapter) {\n    this.designAdapters.set(actionName, adapter);\n  }\n  getRuntimeAdapter(actionName) {\n    return this.runtimeAdapters.get(actionName);\n  }\n  getDesignAdapter(actionName) {\n    return this.designAdapters.get(actionName);\n  }\n}\nRxViewActionDefinitionAdapterRegistryService.ɵfac = function RxViewActionDefinitionAdapterRegistryService_Factory(t) {\n  return new (t || RxViewActionDefinitionAdapterRegistryService)();\n};\nRxViewActionDefinitionAdapterRegistryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewActionDefinitionAdapterRegistryService,\n  factory: RxViewActionDefinitionAdapterRegistryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewActionDefinitionAdapterRegistryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nvar ViewDisplayType;\n(function (ViewDisplayType) {\n  ViewDisplayType[\"Preview\"] = \"preview\";\n  ViewDisplayType[\"Regular\"] = \"view\";\n  ViewDisplayType[\"NoShell\"] = \"iview\";\n})(ViewDisplayType || (ViewDisplayType = {}));\nclass RxViewActionUtilsService {\n  constructor(rxBundleCacheService, router, rxStringService, rxUrlUtilsService) {\n    this.rxBundleCacheService = rxBundleCacheService;\n    this.router = router;\n    this.rxStringService = rxStringService;\n    this.rxUrlUtilsService = rxUrlUtilsService;\n  }\n  generateViewUrl(viewDefinitionName, inputParams = {}) {\n    const currentUrl = this.router.routerState.snapshot.url;\n    let displayType = ViewDisplayType.Regular;\n    if (currentUrl.includes(`/${ViewDisplayType.Preview}/`)) {\n      displayType = ViewDisplayType.Preview;\n    } else if (currentUrl.includes(`/${ViewDisplayType.NoShell}/`)) {\n      displayType = ViewDisplayType.NoShell;\n    }\n    return this.rxUrlUtilsService.buildUrl(`/${this.rxBundleCacheService.bundleId}/${displayType}/${viewDefinitionName}`, inputParams);\n  }\n  extractRecordIds(source) {\n    let ids = [];\n    if (isFunction(source.getSelectedRows)) {\n      ids = this.getIdsFromGridRows(source.getSelectedRows());\n    } else if (isObject(source) && this.rxStringService.isNonEmptyString(source[RowDataItemIdFieldName])) {\n      ids.push(source[RowDataItemIdFieldName]);\n    } else if (Array.isArray(source) && some(source, isObject)) {\n      ids = this.getIdsFromGridRows(source);\n    } else if (this.rxStringService.isNonEmptyString(source)) {\n      ids.push(source);\n    } else if (Array.isArray(source) && some(source, this.rxStringService.isNonEmptyString)) {\n      ids = clone(source);\n    }\n    return ids;\n  }\n  getIdsFromGridRows(rows) {\n    return flow(rowsArray => map(rowsArray, RowDataItemIdFieldName), compact, uniq)(rows);\n  }\n}\nRxViewActionUtilsService.ɵfac = function RxViewActionUtilsService_Factory(t) {\n  return new (t || RxViewActionUtilsService)(i0.ɵɵinject(i1$1.RxBundleCacheService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i4.RxStringService), i0.ɵɵinject(i4.RxUrlUtilsService));\n};\nRxViewActionUtilsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewActionUtilsService,\n  factory: RxViewActionUtilsService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewActionUtilsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxBundleCacheService\n    }, {\n      type: i2.Router\n    }, {\n      type: i4.RxStringService\n    }, {\n      type: i4.RxUrlUtilsService\n    }];\n  }, null);\n})();\nclass RxOldViewLayoutAdapterService {\n  constructor(rxJsonParserService) {\n    this.rxJsonParserService = rxJsonParserService;\n  }\n  convertLayout(componentDefinitionItem) {\n    if (this.isViewDefinitionItem(componentDefinitionItem)) {\n      this.convertViewLayout(componentDefinitionItem.componentDefinition);\n    } else if (this.isContainerComponentDefinition(componentDefinitionItem.componentDefinition)) {\n      this.convertComponentLayout(componentDefinitionItem.componentDefinition);\n    }\n  }\n  isViewDefinitionItem(componentDefinition) {\n    return !componentDefinition.parentComponentDefinition;\n  }\n  convertViewLayout(viewDefinition) {\n    const layout = this.rxJsonParserService.tryParseJson(viewDefinition.layout);\n    if (isNil(layout.layoutTemplate) || get(layout, 'columns[0].role')) {\n      // for views from new designer, or for views with 1 or more columns\n      this.convertComponentLayout(viewDefinition);\n    } else {\n      // for views with header and/or footer\n      const childrenWithRoles = get(layout, 'columns[0].children', []);\n      const outlets = childrenWithRoles.map((child, i) => {\n        let outletItem;\n        if (child.role) {\n          outletItem = {\n            name: child.role === ViewLayoutRole.Content ? RX_VIEW_DEFINITION.defaultOutletName : child.role,\n            static: child.static || null,\n            height: child.height || null,\n            role: child.role || null,\n            columns: (child.columns || []).map(this.convertColumns.bind(this))\n          };\n        } else {\n          // creating outlets for case when components are sibling to header/footer\n          outletItem = {\n            name: `outlet-${i}`,\n            columns: [{\n              children: [child.componentDefinitionId]\n            }]\n          };\n        }\n        return outletItem;\n      });\n      const newLayout = {\n        outlets\n      };\n      viewDefinition.layout = JSON.stringify(newLayout);\n    }\n  }\n  convertComponentLayout(componentDefinition) {\n    if (componentDefinition.layout) {\n      const layout = this.rxJsonParserService.tryParseJson(componentDefinition.layout);\n      // add columns to views created in new designer\n      // todo remove after new designer will save layouts with columns\n      const children = get(layout, 'outlets[0].children');\n      if (children) {\n        componentDefinition.layout = JSON.stringify(this.convertNewDesignerLayout(layout));\n      }\n      if (layout && layout.componentDefinitionId) {\n        const newLayout = {\n          outlets: [{\n            name: RX_VIEW_DEFINITION.defaultOutletName,\n            columns: layout.columns.map(this.convertColumns.bind(this))\n          }]\n        };\n        componentDefinition.layout = JSON.stringify(newLayout);\n      }\n    }\n  }\n  convertNewDesignerLayout(layout) {\n    const children = get(layout, 'outlets[0].children');\n    if (children) {\n      layout.outlets[0].columns = [{\n        children\n      }];\n      delete layout.outlets[0].children;\n    }\n    return layout;\n  }\n  convertColumns(column) {\n    // rx-tab-container was placed 1 lever deeper in the layout of rx-tab-panel in views\n    // created in AngularJS view designer. 'columns[0].children[0]' should extract it.\n    return {\n      span: column.span || null,\n      cssClass: `col-sm-${column.span || 12}`,\n      children: column.children.map(child => get(child, 'columns[0].children[0].componentDefinitionId') || child.componentDefinitionId)\n    };\n  }\n  isContainerComponentDefinition(componentDefinition) {\n    return componentDefinition.componentDefinitions !== undefined;\n  }\n}\nRxOldViewLayoutAdapterService.ɵfac = function RxOldViewLayoutAdapterService_Factory(t) {\n  return new (t || RxOldViewLayoutAdapterService)(i0.ɵɵinject(i4.RxJsonParserService));\n};\nRxOldViewLayoutAdapterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxOldViewLayoutAdapterService,\n  factory: RxOldViewLayoutAdapterService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxOldViewLayoutAdapterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i4.RxJsonParserService\n    }];\n  }, null);\n})();\nconst RX_SHELL = {\n  componentName: 'rx-shell',\n  navBar: {\n    menuItem: 'rx-shell-menu-item',\n    action: 'rx-shell-action',\n    menuGroup: 'rx-shell-menu-group',\n    userMenu: 'rx-shell-user-menu'\n  },\n  actions: {\n    launchURL: 'rxShellLaunchUrlAction',\n    navigateToView: 'rxShellNavigateToViewAction',\n    navigateToState: 'rxShellNavigateToStateAction',\n    navigateToSmartReporting: 'rxShellNavigateToSmartReportingAction'\n  },\n  outlets: {\n    actions: 'actions'\n  }\n};\nclass RxShellService {\n  constructor(translateService, rxCurrentUserService, rxExpressionEvaluatorService, rxJsonParserService, rxNotificationService, rxObjectUtilsService, rxUrlUtilsService, rxViewDefinitionCacheService, rxViewDefinitionParserService, rxOldViewLayoutAdapterService, rxFeatureService) {\n    this.translateService = translateService;\n    this.rxCurrentUserService = rxCurrentUserService;\n    this.rxExpressionEvaluatorService = rxExpressionEvaluatorService;\n    this.rxJsonParserService = rxJsonParserService;\n    this.rxNotificationService = rxNotificationService;\n    this.rxObjectUtilsService = rxObjectUtilsService;\n    this.rxUrlUtilsService = rxUrlUtilsService;\n    this.rxViewDefinitionCacheService = rxViewDefinitionCacheService;\n    this.rxViewDefinitionParserService = rxViewDefinitionParserService;\n    this.rxOldViewLayoutAdapterService = rxOldViewLayoutAdapterService;\n    this.rxFeatureService = rxFeatureService;\n    this.menuItemId = 0;\n    this.navigateToSmartReportingSubject = new Subject();\n    this.navigateToViewSubject = new Subject();\n    this.openUserPreferencesSubject = new Subject();\n    this.openUserAvailabilitySubject = new Subject();\n    this.shellConfigSubject = new ReplaySubject(1);\n    this.openGainsightPreferencesSubject = new Subject();\n    this.navigateToSmartReporting$ = this.navigateToSmartReportingSubject.asObservable();\n    this.navigateToView$ = this.navigateToViewSubject.asObservable();\n    this.openUserPreferences$ = this.openUserPreferencesSubject.asObservable();\n    this.openUserAvailability$ = this.openUserAvailabilitySubject.asObservable();\n    this.shellConfig$ = this.shellConfigSubject.asObservable();\n    this.openGainsightPreferences$ = this.openGainsightPreferencesSubject.asObservable();\n  }\n  resetMenuItemCount() {\n    this.menuItemId = 0;\n  }\n  updateMenuItemCount() {\n    return this.menuItemId++;\n  }\n  getChildGuids(layout, outletName = RX_VIEW_DEFINITION.defaultOutletName) {\n    return RxViewLayout.getViewLayoutChildGuids(layout, outletName);\n  }\n  getIconClass(icon, left = true) {\n    const iconId = get(RX_LEGACY_ICONS, icon, icon);\n    return iconId ? `d-icon-${left ? 'left-' : ''}` + iconId : '';\n  }\n  getShellConfig(bundleId) {\n    const navigationBarItems = [];\n    const flattenedMenuItems = [];\n    const navigationActions = [];\n    const preferenceMenuItem = {\n      name: this.translateService.instant('com.bmc.arsys.rx.client.shell.my-preferences.label'),\n      action: this.openUserPreferences.bind(this),\n      className: 'd-icon-wrench_o',\n      hide: false,\n      subMenu: []\n    };\n    const gainsightPreferenceMenuItem = {\n      name: this.translateService.instant('com.bmc.arsys.rx.client.shell.analytics.label'),\n      action: this.openGainsightPreferences.bind(this),\n      className: 'd-icon-app_chart_bar',\n      hide: false,\n      id: 0,\n      subMenu: []\n    };\n    const myAvailabilityMenuItem = {\n      name: this.translateService.instant('com.bmc.arsys.rx.client.shell.my-availability.label'),\n      action: this.openUserAvailability.bind(this),\n      hide: false,\n      className: 'd-icon-user_clock_o',\n      subMenu: []\n    };\n    let navBarProperties;\n    let userMenu = null;\n    this.currentUser = this.rxCurrentUserService.get();\n    return this.rxViewDefinitionCacheService.getViewDefinition(`${bundleId}:${RX_APPLICATION.shellDefinitionName}`).pipe(switchMap(shellDefinition => {\n      this.rxViewDefinitionParserService.getComponents(shellDefinition).forEach(definition => this.rxOldViewLayoutAdapterService.convertLayout(definition));\n      if (shellDefinition && shellDefinition.componentDefinitions[0]) {\n        const navBar = shellDefinition.componentDefinitions[0];\n        const layout = this.rxJsonParserService.tryParseJson(navBar.layout);\n        navBarProperties = navBar.propertiesByName || {\n          allowAppSwitching: null,\n          globalSearchUseDefault: null,\n          globalSearchDisabled: null,\n          globalSearchRecords: null,\n          globalSearchCustomSearchState: null\n        };\n        forEach(this.getChildGuids(layout), guid => {\n          const menuItemDefinition = find(navBar.componentDefinitions, {\n            guid\n          });\n          if (menuItemDefinition) {\n            let menuItem;\n            switch (menuItemDefinition.type) {\n              case RX_SHELL.navBar.menuGroup:\n              case RX_SHELL.navBar.userMenu:\n                const subMenu = [];\n                const childLayout = this.rxJsonParserService.tryParseJson(menuItemDefinition.layout) || RxViewLayout.getViewLayoutForDefaultOutlet(menuItemDefinition.componentDefinitions.map(item => item.guid));\n                forEach(this.getChildGuids(childLayout), childGuid => {\n                  const subItemDefinition = find(menuItemDefinition.componentDefinitions, {\n                    guid: childGuid\n                  });\n                  if (subItemDefinition) {\n                    const subItem = this.getMenuProperties(subItemDefinition);\n                    if (!isEmpty(subItem)) {\n                      // concatenating className with listClassName, as listClassName not available for subMenu\n                      if (menuItemDefinition.type === RX_SHELL.navBar.userMenu) {\n                        subItem.className += ' ' + subItem.listClassName;\n                      } else {\n                        flattenedMenuItems.push(subItem);\n                      }\n                      subMenu.push(subItem);\n                    }\n                  }\n                });\n                if (subMenu.length > 0) {\n                  // LMA:: TODO:: Even if we set the className in a first level menu the icon is not displayed\n                  menuItem = {\n                    hide: has(menuItemDefinition.propertiesByName, 'hidden') ? this.rxJsonParserService.tryParseJson(menuItemDefinition.propertiesByName.hidden) : false,\n                    listClassName: get(menuItemDefinition.propertiesByName, 'styles'),\n                    className: this.getIconClass(get(menuItemDefinition.propertiesByName, 'menuItemIcon')),\n                    name: menuItemDefinition.propertiesByName.menuGroupName,\n                    subMenu: subMenu,\n                    id: this.updateMenuItemCount()\n                  };\n                }\n                break;\n              case RX_SHELL.navBar.menuItem:\n                menuItem = this.getMenuProperties(menuItemDefinition);\n                break;\n            }\n            if (!isEmpty(menuItem)) {\n              if (menuItemDefinition.type === RX_SHELL.navBar.userMenu) {\n                userMenu = menuItem;\n              } else {\n                flattenedMenuItems.push(menuItem);\n                navigationBarItems.push(menuItem);\n              }\n            }\n          }\n        });\n        forEach(this.getChildGuids(layout, RX_SHELL.outlets.actions), guid => {\n          const menuItemDefinition = navBar.componentDefinitions.find(definition => definition.guid === guid);\n          if (menuItemDefinition) {\n            navigationActions.push(this.getMenuProperties(menuItemDefinition));\n          }\n        });\n      }\n      if (this.rxCurrentUserService.isSupportStaff()) {\n        myAvailabilityMenuItem.id = this.updateMenuItemCount();\n        if (!userMenu) {\n          userMenu = {\n            subMenu: []\n          };\n        }\n        userMenu.subMenu.push(myAvailabilityMenuItem);\n      }\n      if (this.currentUser.fullName) {\n        preferenceMenuItem.id = this.updateMenuItemCount();\n        if (!userMenu) {\n          userMenu = {\n            subMenu: []\n          };\n        }\n        userMenu.subMenu.push(preferenceMenuItem);\n      }\n      if (this.rxFeatureService.isFeatureEnabled('DRD21-11744')) {\n        userMenu.subMenu.push(gainsightPreferenceMenuItem);\n      }\n      const rxData = {\n        flattenedMenuItems,\n        navigationBarItems,\n        navigationActions,\n        userMenu: userMenu || [],\n        allowAppSwitching: has(navBarProperties, 'allowAppSwitching') ? this.rxJsonParserService.tryParseJson(navBarProperties.allowAppSwitching) : false,\n        globalSearchUseDefault: has(navBarProperties, 'globalSearchUseDefault') ? this.rxJsonParserService.tryParseJson(navBarProperties.globalSearchUseDefault) : true,\n        globalSearchCustomSearchState: navBarProperties.globalSearchCustomSearchState || '',\n        globalSearchDisabled: has(navBarProperties, 'globalSearchDisabled') ? this.rxJsonParserService.tryParseJson(navBarProperties.globalSearchDisabled) : true,\n        globalSearchRecords: has(navBarProperties, 'globalSearchRecords') ? this.rxJsonParserService.tryParseJson(navBarProperties.globalSearchRecords) : [],\n        // LMA:: TODO:: Later... See:\n        // standardlib/src/main/webapp/scripts/view-components/shell/shell-config.resource.js\n        // ,\n        // globalSearchState: rxSearchResultsState.get(),\n        // administrationSettingsState: rxAdministrationSettingsState.get()\n        globalSearchState: 'globalSearchState',\n        administrationSettingsState: 'adminSettingsState'\n      };\n      // In case server already had previously saved shell config with global search not configured,\n      // we want to disable global search by default\n      if (!rxData.globalSearchDisabled && (rxData.globalSearchUseDefault && rxData.globalSearchRecords.length === 0 || !rxData.globalSearchUseDefault && rxData.globalSearchCustomSearchState.length === 0)) {\n        rxData.globalSearchDisabled = true;\n      }\n      this.shellConfigSubject.next(rxData);\n      return of(rxData);\n    }));\n  }\n  openUserPreferences() {\n    this.openUserPreferencesSubject.next();\n  }\n  openGainsightPreferences() {\n    this.openGainsightPreferencesSubject.next();\n  }\n  openUserAvailability() {\n    this.openUserAvailabilitySubject.next();\n  }\n  navigateToView(viewParams) {\n    this.navigateToViewSubject.next(viewParams);\n  }\n  navigateToState() {\n    this.rxNotificationService.addWarningMessage('This feature is not supported.');\n  }\n  navigateToSmartReporting() {\n    this.navigateToSmartReportingSubject.next();\n  }\n  getMenuProperties(itemDefinition) {\n    const menuItem = {};\n    const properties = this.rxObjectUtilsService.expandProperties(itemDefinition.propertiesByName);\n    menuItem.type = properties.actionName;\n    menuItem.id = this.updateMenuItemCount();\n    menuItem.closeOnClick = true;\n    switch (properties.actionName) {\n      case RX_SHELL.actions.launchURL:\n        menuItem.name = properties.menuItemName;\n        menuItem.target = RX_LAUNCH_BEHAVIOR[properties.launchBehavior || OpenViewActionLaunchBehavior.NewWindow].target;\n        if (itemDefinition.type === RX_SHELL.navBar.action) {\n          menuItem.action = () => {\n            window.open(properties.url, menuItem.target);\n          };\n        } else {\n          menuItem.link = properties.url;\n        }\n        break;\n      case RX_SHELL.actions.navigateToView:\n        const viewParams = properties.viewParams;\n        forEach(viewParams, (expression, parameterName) => {\n          const paramValue = this.rxExpressionEvaluatorService.tryEvaluate(expression, {\n            keywords: {\n              userId: this.currentUser.userId,\n              personId: this.currentUser.personInstanceId\n            }\n          });\n          viewParams[parameterName] = paramValue;\n          return paramValue;\n        });\n        const url = this.rxUrlUtilsService.buildUrl(`${properties.viewDefinitionName}`, viewParams);\n        menuItem.name = properties.menuItemName;\n        menuItem.viewUrl = url;\n        menuItem.action = this.navigateToView.bind(this, menuItem);\n        menuItem.openViewParams = {\n          viewDefinitionName: properties.viewDefinitionName,\n          presentation: Object.assign({\n            type: OpenViewActionType.FullWidth,\n            launchBehavior: OpenViewActionLaunchBehavior.SameWindow\n          }, get(properties, 'presentation', {})),\n          viewParams\n        };\n        break;\n      case RX_SHELL.actions.navigateToState:\n        // LMA:: TODO:: Implement it later\n        // if (!isRuntime || rxAuthorization.isStateAuthorized(properties.state)) {\n        menuItem.name = properties.menuItemName;\n        const stateParameters = {\n          state: properties.state,\n          menuItemId: menuItem.id\n        };\n        menuItem.stateParameters = stateParameters;\n        menuItem.action = this.navigateToState.bind(this, stateParameters);\n        break;\n      case RX_SHELL.actions.navigateToSmartReporting:\n        menuItem.name = properties.menuItemName;\n        menuItem.action = this.navigateToSmartReporting.bind(this);\n        break;\n    }\n    menuItem.hide = has(properties, 'hidden') ? this.rxJsonParserService.tryParseJson(properties.hidden) : false;\n    menuItem.listClassName = properties.styles;\n    menuItem.className = this.getIconClass(properties.menuItemIcon, itemDefinition.type !== RX_SHELL.navBar.action);\n    return menuItem;\n  }\n}\nRxShellService.ɵfac = function RxShellService_Factory(t) {\n  return new (t || RxShellService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i1$1.RxCurrentUserService), i0.ɵɵinject(RxExpressionEvaluatorService), i0.ɵɵinject(i4.RxJsonParserService), i0.ɵɵinject(i1$1.RxNotificationService), i0.ɵɵinject(i4.RxObjectUtilsService), i0.ɵɵinject(i4.RxUrlUtilsService), i0.ɵɵinject(RxViewDefinitionCacheService), i0.ɵɵinject(RxViewDefinitionParserService), i0.ɵɵinject(RxOldViewLayoutAdapterService), i0.ɵɵinject(i1$1.RxFeatureService));\n};\nRxShellService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxShellService,\n  factory: RxShellService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxShellService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.TranslateService\n    }, {\n      type: i1$1.RxCurrentUserService\n    }, {\n      type: RxExpressionEvaluatorService\n    }, {\n      type: i4.RxJsonParserService\n    }, {\n      type: i1$1.RxNotificationService\n    }, {\n      type: i4.RxObjectUtilsService\n    }, {\n      type: i4.RxUrlUtilsService\n    }, {\n      type: RxViewDefinitionCacheService\n    }, {\n      type: RxViewDefinitionParserService\n    }, {\n      type: RxOldViewLayoutAdapterService\n    }, {\n      type: i1$1.RxFeatureService\n    }];\n  }, null);\n})();\nclass RxHomepageResolver {\n  constructor(rxGlobalCacheService, rxShellService, rxTreeService, router, rxSessionService, rxComponentCanDeactivateGuard, rxLocalizationService) {\n    this.rxGlobalCacheService = rxGlobalCacheService;\n    this.rxShellService = rxShellService;\n    this.rxTreeService = rxTreeService;\n    this.router = router;\n    this.rxSessionService = rxSessionService;\n    this.rxComponentCanDeactivateGuard = rxComponentCanDeactivateGuard;\n    this.rxLocalizationService = rxLocalizationService;\n    this.unknownApplicationRoute = '/unknown-application';\n  }\n  canActivate(route, state) {\n    const bundleId = route.paramMap.get('bundleId');\n    const applicationId = head(route.url).path;\n    const useDefaultLang = applicationId === RX_APPLICATION.innovationStudioBundleId;\n    const initTranslations$ = this.rxLocalizationService.initTranslations(useDefaultLang);\n    // waiting for translations to resolve to make getShellConfig call with correct lang\n    return combineLatest([this.rxSessionService.sessionActive$, initTranslations$]).pipe(switchMap(() => {\n      return this.rxGlobalCacheService.getBundleDescriptors().pipe(concatMap(bundleDescriptors => this.getBundleUrl(bundleDescriptors, bundleId)));\n    }), tap(() => this.rxComponentCanDeactivateGuard.disable()));\n  }\n  getBundleUrl(bundleDescriptors, bundleId) {\n    if (findIndex(bundleDescriptors, {\n      id: bundleId\n    }) !== -1) {\n      return this.rxShellService.getShellConfig(bundleId).pipe(map$1(shellConfiguration => {\n        const menuItems = get(this.rxTreeService.flattenTree(shellConfiguration, 'navigationBarItems'), '[0].flattenedMenuItems');\n        const defaultView = find(menuItems, {\n          type: RX_SHELL.actions.navigateToView\n        });\n        return this.generateUrl(defaultView, bundleId);\n      }));\n    } else {\n      return of(this.router.parseUrl(this.unknownApplicationRoute));\n    }\n  }\n  generateUrl(defaultView, bundleId) {\n    return this.router.parseUrl(defaultView ? `/${bundleId}/view/${defaultView.viewUrl}` : `/${bundleId}/view/${RX_APPLICATION.settingsBundleId}:Unknown Default View Error)}`);\n  }\n}\nRxHomepageResolver.ɵfac = function RxHomepageResolver_Factory(t) {\n  return new (t || RxHomepageResolver)(i0.ɵɵinject(i1$1.RxGlobalCacheService), i0.ɵɵinject(RxShellService), i0.ɵɵinject(i4.RxTreeService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i1$1.RxSessionService), i0.ɵɵinject(i1$1.RxComponentCanDeactivateGuard), i0.ɵɵinject(i1$1.RxLocalizationService));\n};\nRxHomepageResolver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxHomepageResolver,\n  factory: RxHomepageResolver.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxHomepageResolver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.RxGlobalCacheService\n    }, {\n      type: RxShellService\n    }, {\n      type: i4.RxTreeService\n    }, {\n      type: i2.Router\n    }, {\n      type: i1$1.RxSessionService\n    }, {\n      type: i1$1.RxComponentCanDeactivateGuard\n    }, {\n      type: i1$1.RxLocalizationService\n    }];\n  }, null);\n})();\nclass RxViewComponentResolver {\n  constructor(rxViewComponentRegistryService) {\n    this.rxViewComponentRegistryService = rxViewComponentRegistryService;\n  }\n  resolve() {\n    return this.rxViewComponentRegistryService.resolveAsyncDescriptors();\n  }\n}\nRxViewComponentResolver.ɵfac = function RxViewComponentResolver_Factory(t) {\n  return new (t || RxViewComponentResolver)(i0.ɵɵinject(RxViewComponentRegistryService));\n};\nRxViewComponentResolver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewComponentResolver,\n  factory: RxViewComponentResolver.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewComponentResolver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: RxViewComponentRegistryService\n    }];\n  }, null);\n})();\nclass RxDeviceDetectionService {\n  constructor(adaptDeviceDetectionService) {\n    var _a;\n    this.adaptDeviceDetectionService = adaptDeviceDetectionService;\n    this.devices = [{\n      type: RxDevice.Desktop,\n      isDetected: this.adaptDeviceDetectionService.deviceDesktop()\n    }, {\n      type: RxDevice.Tablet,\n      isDetected: this.adaptDeviceDetectionService.deviceTablet()\n    }, {\n      type: RxDevice.Mobile,\n      isDetected: this.adaptDeviceDetectionService.deviceMobile()\n    }];\n    this.currentDevice = (_a = this.devices.find(item => item.isDetected)) === null || _a === void 0 ? void 0 : _a.type;\n  }\n}\nRxDeviceDetectionService.ɵfac = function RxDeviceDetectionService_Factory(t) {\n  return new (t || RxDeviceDetectionService)(i0.ɵɵinject(i1$3.AdaptDeviceDetectionService));\n};\nRxDeviceDetectionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxDeviceDetectionService,\n  factory: RxDeviceDetectionService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxDeviceDetectionService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$3.AdaptDeviceDetectionService\n    }];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ApplyGridFilterMode, BwfViewComponentType, LayoutTypes, OpenViewActionLaunchBehavior, OpenViewActionModalSize, OpenViewActionType, RX_AVAILABLE_ON_DEVICES_ALL_VALUE, RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE, RX_AVAILABLE_ON_DEVICES_PROP_DESC, RX_AVAILABLE_ON_DEVICES_PROP_NAME, RX_DISABLED_PROP_DEFAULT_VALUE, RX_DISABLED_PROP_DESC, RX_DISABLED_PROP_NAME, RX_EXPRESSION_EVALUATOR, RX_EXPRESSION_FUNCTIONS, RX_HIDDEN_PROP_DEFAULT_VALUE, RX_HIDDEN_PROP_DESC, RX_HIDDEN_PROP_NAME, RX_LAUNCH_BEHAVIOR, RX_LEGACY_ICONS, RX_RICH_TEXT, RX_SHELL, RX_STANDARD_PROPS_DEFAULT_VALUES, RX_STANDARD_PROPS_DESC, RX_STYLES_PROP_DEFAULT_VALUE, RX_STYLES_PROP_DESC, RX_STYLES_PROP_NAME, RX_SUPPORTED_FUNCTION, RX_VIEW_ACTION, RX_VIEW_DEFINITION, RX_VIEW_LAYOUTS, RecordGridFilterDataLogic, RecordGridFilterOperator, RecordGridNamedFilterOptionKey, RowDataItemIdFieldName, RxCkEditorConfiguratorService, RxDefaultExpressionEvaluatorService, RxDefaultExpressionValidatorService, RxDevice, RxDeviceDetectionService, RxExpressionEvaluatorService, RxExpressionHelperService, RxExpressionSyntaxTreeBuilderService, RxHomepageResolver, RxOldViewLayoutAdapterService, RxRecordQueryExpressionEvaluatorService, RxShellService, RxViewAction, RxViewActionDefinitionAdapterRegistryService, RxViewActionRegistryService, RxViewActionService, RxViewActionUtilsService, RxViewComponent, RxViewComponentRegistryService, RxViewComponentResolver, RxViewComponentType, RxViewDefinitionCacheService, RxViewDefinitionDataPageService, RxViewDefinitionLocalizationService, RxViewDefinitionParserService, RxViewDefinitionService, RxViewLayout, ViewActionDesignModule, ViewComponentPropertyType, ViewDefinitionType, ViewDisplayType, ViewLayoutRole, ViewModule, getLayoutChecksum, renameViewDefinitionCommand, revertCustomizationResourceType };\n//# sourceMappingURL=helix-platform-view-api.js.map","map":{"version":3,"names":["i0","Injectable","ɵmakeDecorator","NgModule","i1$1","ExpressionOperator","ExpressionParserToken","RX_APPLICATION","RX_BUNDLE","DataPage","i4","i1","map","reduce","uniq","escapeRegExp","every","includes","size","isNil","isNaN","isUndefined","trim","find","isString","result","forEach","isFunction","isNull","isEmpty","some","transform","set","isObject","clone","flow","compact","get","has","head","findIndex","jsep","BigNumber","i4$1","defer","from","of","EMPTY","throwError","Subject","ReplaySubject","combineLatest","map$1","shareReplay","pluck","switchMap","concatMap","tap","i1$2","i2","i1$3","RecordGridFilterDataLogic","RecordGridFilterOperator","RecordGridNamedFilterOptionKey","RowDataItemIdFieldName","ApplyGridFilterMode","expressionAttributeName","RX_RICH_TEXT","RX_RICH_TEXT_STYLES","RxCkEditorConfiguratorService","constructor","translateService","rxLocalizationService","rxUrlUtilsService","getCKEditorConfig","resize_enabled","title","skin","toolbar","stylesSet","name","instant","element","attributes","class","cellpadding","cellspacing","language","currentLocale","format_tags","height","getContentRules","p","strong","em","s","u","ol","ul","li","small","code","kbd","samp","var","del","ins","cite","q","pre","br","span","classes","styles","h1","h2","h3","div","a","match","isUrlSafe","href","ɵfac","RxCkEditorConfiguratorService_Factory","t","ɵɵinject","TranslateService","RxLocalizationService","RxUrlUtilsService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","ViewComponentPropertyType","RxDevice","RX_AVAILABLE_ON_DEVICES_ALL_VALUE","Object","values","RX_AVAILABLE_ON_DEVICES_PROP_NAME","RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE","RX_AVAILABLE_ON_DEVICES_PROP_DESC","Array","designType","RX_DISABLED_PROP_NAME","RX_DISABLED_PROP_DEFAULT_VALUE","RX_DISABLED_PROP_DESC","enableExpressionEvaluation","RX_HIDDEN_PROP_NAME","RX_HIDDEN_PROP_DEFAULT_VALUE","RX_HIDDEN_PROP_DESC","RX_STYLES_PROP_NAME","RX_STYLES_PROP_DEFAULT_VALUE","RX_STYLES_PROP_DESC","RX_STANDARD_PROPS_DESC","RX_STANDARD_PROPS_DEFAULT_VALUES","assign","RxExpressionHelperService","prepareHandlers","_convertNull","expression","replace","_convertNot","_convertOr","Or","_convertAnd","And","_convertLike","Like","_convertContains","Contains","push","extractTokens","regex","key","matches","insertTokens","value","prepare","convertedExpression","RegExp","String","fromCharCode","stringExpressionsData","insertLiteralExpressions","expressionsData","preparedExpression","prepareOperators","insertExpressions","handler","literalExpressions","literalExpression","regexp","RxExpressionHelperService_Factory","RxExpressionSyntaxTreeBuilderService","addBinaryOp","Equal","In","removeBinaryOp","removeUnaryOp","removeIdentifierChar","buildTree","RxExpressionSyntaxTreeBuilderService_Factory","expressionFunctions","category","description","parameters","RX_EXPRESSION_FUNCTIONS","descriptor","params","join","signature","RX_SUPPORTED_FUNCTION","SAME","collection","INCLUDES","SIZE","RxDefaultExpressionEvaluatorService","rxExpressionHelperService","rxStringService","rxExpressionSyntaxTreeBuilderService","parsedExpressionCache","operators","b","isBigNumber","isEqualTo","Add","Number","Subtract","Multiply","Divide","LessThan","lt","gt","GreaterThan","GreaterThanOrEqual","gte","lte","LessThanOrEqual","NotEqual","Remainder","andHandler","toLowerCase","orHandler","likeHandler","unaryOperators","Boolean","parseExpression","parsedExpression","validateChildNodeTypes","Error","evaluate","data","evaluatedExpression","isNonEmptyString","e","message","evaluateNode","node","isValid","left","right","argument","functionNode","functionDescriptor","callee","arguments","length","test","operator","binaryResult","evaluatedArguments","functionName","nodeValue","slice","expressions","evaluatedResult","unaryResult","RxDefaultExpressionEvaluatorService_Factory","RxStringService","RxDefaultExpressionValidatorService","rxDefaultExpressionEvaluatorService","customEvaluatorService","evaluator","valid","RxDefaultExpressionValidatorService_Factory","RxExpressionEvaluatorService","injector","rxLogService","rxDefaultExpressionValidatorService","rxNotificationService","debug","tryEvaluate","defaultValue","error","addErrorMessage","RxExpressionEvaluatorService_Factory","Injector","RxLogService","RxNotificationService","RX_EXPRESSION_EVALUATOR","operands","null","undefined","associatedFieldIdPrefixPattern","RxRecordQueryExpressionEvaluatorService","rxExpressionHelper","rxRecordInstanceUtilsService","viewRegExp","stringMatchingRegExp","associationExpressionRegExp","rxOperatorCounter","rxViewExpressionCounter","rxStringExpressionCounter","rxAssociationFilterExpressionCounter","isEmptySafe","rxStringsExpressionData","RxStringExpression","arRecordAssociationFilterExpressionData","rxExpressionsData","rxOperatorsData","RxOperator","split","operand","likeExpressionMatch","exec","leftOperandValue","evaluateOperand","rightOperandValue","isLikeOperand","evaluateRxViewExpressions","bind","evaluateRxStringExpressions","prepareRxAssociationFilterExpressions","submatch","escapeTextWildcards","stringExpression","firstQuote","associationExpression","lastQuote","RxRecordQueryExpressionEvaluatorService_Factory","RxRecordInstanceUtilsService","RX_LEGACY_ICONS","add","addCircle","back","copy","delete","deleteCircle","edit","exclamationCircle","exclamationTriangle","help","preview","mail","print","thumbsDown","thumbsUp","RxViewComponentRegistryService","componentFactoryResolver","rxGlobalCacheService","rxBundleCacheService","componentDescriptors","Map","asyncComponentDescriptors","ownerBundleIds$","getBundleDescriptors","pipe","bundleDescriptors","ownerBundleIds","bundleDescriptor","_a","uiOptions","viewComponents","viewComponentName","id","resolveAsyncDescriptors","Promise","all","then","descriptors","registerSync","desc","getRegisteredComponents","register","resolve","_b","aliases","warning","filter","isDataComponentDescriptor","componentDescriptor","isDataComponent","getBundlePageComponents","bundleId","includeAliases","getDescriptors","isPageComponent","availableInBundles","isIncluded","getLicensedComponents","getLicensedBundleDescriptors","isBundleLicensed","isComponentAvailableInCurrentBundle","getComponentOwnerBundleId","viewComponentType","platformBundleId","entries","RxViewComponentRegistryService_Factory","ComponentFactoryResolver","RxGlobalCacheService","RxBundleCacheService","ViewDefinitionType","RX_VIEW_DEFINITION","types","regular","Regular","shell","Shell","resourceTypes","viewComponent","containerViewComponent","defaultOutletName","unknownPageComponent","defaultLayoutTemplateId","RxViewDefinitionParserService","rxTreeService","getComponents","definition","skipInitial","components","componentDefinition","parentComponentDefinition","processComponents","componentDefinitions","isContainerViewComponentDefinition","findParentComponentDefinition","viewDefinition","childComponentDefinition","predicate","componentDefinitionsWithParent","childComponentDefinitionWithParent","pair","guid","findViewComponent","viewComponentContainer","flattenTree","RxViewDefinitionParserService_Factory","RxTreeService","RxViewActionRegistryService","viewActionDescriptors","designManagers","viewActions","viewActionName","viewActionDescriptor","label","actionName","getRegisteredActions","getLicensedActions","actionDescriptor","isActionAvailableInCurrentBundle","getActionOwnerBundleId","registerUnknownAction","unknownActionName","unknownActionDescriptor","registerDesignManager","designManagerService","getDesignManager","designManager","RxViewActionRegistryService_Factory","RxViewComponentType","BwfViewComponentType","RxViewComponent","RxViewDefinitionLocalizationService","rxViewDefinitionParserService","rxViewComponentRegistryService","rxViewActionRegistryService","rxGuidService","applyLocalization","flatten","localizableStringGuidsByComponentGuid","convertOldSelectGroupLocalization","localizableStrings","localizableStringsByComponentId","propertyNameToStringGuidMap","applyComponentDefinitionLocalization","localizablePropertyToStringGuidMap","extractLocalizableStrings","item","component","Page","componentStrings","localizablePropertyNames","Action","propertiesByName","getLocalizableActionParameterNames","getLocalizableComponentPropertyNames","localizablePropertyName","stringGuid","generate","propertyValue","propertyName","parameterNames","parameter","localizable","attribute","properties","prop","SelectGroup","selectGroup","selectGroupField","labelId","oldStringGuid","newStringGuid","localizedLabel","RxViewDefinitionLocalizationService_Factory","RxGuidService","ViewLayoutRole","LayoutTypes","defaultHeaderOutlet","Header","columns","getEmptyColumn","defaultFooterOutlet","Footer","RX_VIEW_LAYOUTS","layout","outlets","getContentOutlet","layoutType","Fixed","Flexible","checksum","getLayoutChecksum","contentOutlet","outlet","column","columnSpan","props","children","RxViewLayout","getViewLayoutForDefaultOutlet","getOutlet","getEmptyViewLayoutForOutletNames","list","getEmptyViewLayoutForOutlets","getViewLayoutChildGuids","outletName","guids","hasChild","outletHasChild","getViewLayoutTemplate","layoutTemplate","layoutItem","getLayoutName","removeChildFromLayout","guidToRemove","childGuid","renameViewDefinitionCommand","revertCustomizationResourceType","RxViewDefinitionService","httpClient","rxCommandFactoryService","rxViewDefinitionLocalizationService","renameCommand","forResourceType","revertCustomizationCommand","viewDefinitionName","options","defaultOptions","locale","getUrl","getNew","getNewViewDefinition","call","create","post","responseType","observe","update","put","rename","oldViewDefinitionName","newViewDefinitionName","execute","newName","isPageView","revertCustomization","encodeURIComponent","inputParams","outputParams","allowOverlay","JSON","stringify","permissions","ownerId","scope","definitionScopeTypes","bundle","targetViewDefinitionName","targetExtensionContainerGuid","RxViewDefinitionService_Factory","HttpClient","RxCommandFactoryService","viewDefinitionDataPageQuery","RxViewDefinitionDataPageService","excludeExtensionViews","RxViewDefinitionDataPageService_Factory","RxViewDefinitionCacheService","rxViewDefinitionService","viewDefinitionDataPageService","viewDefinitionCache","viewDefinitionNamesCache","consumers","Set","getViewDefinitionNames","viewDefinitionNames$","headers","propertySelection","viewType","viewDefinitionsNames","getViewDefinition","viewDefinition$","registerConsumer","consumerDestroy$","subscribe","clearCache","clear","RxViewDefinitionCacheService_Factory","ViewModule","registerComponents","ngModule","providers","provide","useValue","ViewModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","RxViewActionService","$condition$","service","RxViewActionService_Factory","RX_VIEW_ACTION","viewActionNames","openView","launchUrl","OpenViewActionLaunchBehavior","OpenViewActionModalSize","OpenViewActionType","RxViewAction","RX_LAUNCH_BEHAVIOR","newWindow","content","target","sameWindow","parentFrame","windowFullBody","RxViewActionDesignAdapterService","adaptDefinition","RxViewActionDesignAdapterService_Factory","ViewActionDesignModule","rxDefinitionAdapterRegistryService","rxViewActionDesignAdapterService","registerDesignAdapter","isContainerComponent","ViewActionDesignModule_Factory","RxDefinitionAdapterRegistryService","RxViewActionDefinitionAdapterRegistryService","runtimeAdapters","designAdapters","registerRuntimeAdapter","adapter","getRuntimeAdapter","getDesignAdapter","RxViewActionDefinitionAdapterRegistryService_Factory","ViewDisplayType","RxViewActionUtilsService","router","generateViewUrl","currentUrl","routerState","snapshot","url","displayType","Preview","NoShell","buildUrl","extractRecordIds","source","ids","getSelectedRows","getIdsFromGridRows","isArray","rows","rowsArray","RxViewActionUtilsService_Factory","Router","RxOldViewLayoutAdapterService","rxJsonParserService","convertLayout","componentDefinitionItem","isViewDefinitionItem","convertViewLayout","isContainerComponentDefinition","convertComponentLayout","tryParseJson","childrenWithRoles","child","i","outletItem","role","Content","static","convertColumns","componentDefinitionId","newLayout","convertNewDesignerLayout","cssClass","RxOldViewLayoutAdapterService_Factory","RxJsonParserService","RX_SHELL","componentName","navBar","menuItem","action","menuGroup","userMenu","actions","launchURL","navigateToView","navigateToState","navigateToSmartReporting","RxShellService","rxCurrentUserService","rxExpressionEvaluatorService","rxObjectUtilsService","rxViewDefinitionCacheService","rxOldViewLayoutAdapterService","rxFeatureService","menuItemId","navigateToSmartReportingSubject","navigateToViewSubject","openUserPreferencesSubject","openUserAvailabilitySubject","shellConfigSubject","openGainsightPreferencesSubject","navigateToSmartReporting$","asObservable","navigateToView$","openUserPreferences$","openUserAvailability$","shellConfig$","openGainsightPreferences$","resetMenuItemCount","updateMenuItemCount","getChildGuids","getIconClass","icon","iconId","getShellConfig","navigationBarItems","flattenedMenuItems","navigationActions","preferenceMenuItem","openUserPreferences","className","hide","subMenu","gainsightPreferenceMenuItem","openGainsightPreferences","myAvailabilityMenuItem","openUserAvailability","navBarProperties","currentUser","shellDefinitionName","shellDefinition","allowAppSwitching","globalSearchUseDefault","globalSearchDisabled","globalSearchRecords","globalSearchCustomSearchState","menuItemDefinition","childLayout","subItemDefinition","subItem","getMenuProperties","listClassName","hidden","menuGroupName","isSupportStaff","fullName","isFeatureEnabled","rxData","globalSearchState","administrationSettingsState","next","viewParams","addWarningMessage","itemDefinition","expandProperties","closeOnClick","menuItemName","launchBehavior","NewWindow","window","open","link","parameterName","paramValue","keywords","userId","personId","personInstanceId","viewUrl","openViewParams","presentation","FullWidth","SameWindow","stateParameters","state","menuItemIcon","RxShellService_Factory","RxCurrentUserService","RxObjectUtilsService","RxFeatureService","RxHomepageResolver","rxShellService","rxSessionService","rxComponentCanDeactivateGuard","unknownApplicationRoute","canActivate","route","paramMap","applicationId","path","useDefaultLang","innovationStudioBundleId","initTranslations$","initTranslations","sessionActive$","getBundleUrl","disable","shellConfiguration","menuItems","defaultView","generateUrl","parseUrl","settingsBundleId","RxHomepageResolver_Factory","RxSessionService","RxComponentCanDeactivateGuard","RxViewComponentResolver","RxViewComponentResolver_Factory","RxDeviceDetectionService","adaptDeviceDetectionService","devices","Desktop","isDetected","deviceDesktop","Tablet","deviceTablet","Mobile","deviceMobile","currentDevice","RxDeviceDetectionService_Factory","AdaptDeviceDetectionService"],"sources":["C:/projects/innovation-studio-developer/22.1/test210500/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-view-api.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, ɵmakeDecorator, NgModule } from '@angular/core';\nimport * as i1$1 from '@helix/platform/shared/api';\nimport { ExpressionOperator, ExpressionParserToken, RX_APPLICATION, RX_BUNDLE, DataPage } from '@helix/platform/shared/api';\nimport * as i4 from '@helix/platform/utils';\nimport * as i1 from '@ngx-translate/core';\nimport { map, reduce, uniq, escapeRegExp, every, includes, size, isNil, isNaN, isUndefined, trim, find, isString, result, forEach, isFunction, isNull, isEmpty, some, transform, set, isObject, clone, flow, compact, get, has, head, findIndex } from 'lodash';\nimport * as jsep from 'jsep';\nimport BigNumber from 'bignumber.js';\nimport * as i4$1 from '@helix/platform/record/api';\nimport { defer, from, of, EMPTY, throwError, Subject, ReplaySubject, combineLatest } from 'rxjs';\nimport { map as map$1, shareReplay, pluck, switchMap, concatMap, tap } from 'rxjs/operators';\nimport * as i1$2 from '@angular/common/http';\nimport * as i2 from '@angular/router';\nimport * as i1$3 from '@bmc-ux/adapt-angular';\n\nvar RecordGridFilterDataLogic;\n(function (RecordGridFilterDataLogic) {\n    RecordGridFilterDataLogic[\"And\"] = \"and\";\n    RecordGridFilterDataLogic[\"Or\"] = \"or\";\n})(RecordGridFilterDataLogic || (RecordGridFilterDataLogic = {}));\nvar RecordGridFilterOperator;\n(function (RecordGridFilterOperator) {\n    RecordGridFilterOperator[\"Eq\"] = \"eq\";\n    RecordGridFilterOperator[\"Gte\"] = \"gte\";\n    RecordGridFilterOperator[\"Lte\"] = \"lte\";\n    RecordGridFilterOperator[\"Like\"] = \"like\";\n    RecordGridFilterOperator[\"Ne\"] = \"ne\";\n    RecordGridFilterOperator[\"Lt\"] = \"lt\";\n    RecordGridFilterOperator[\"Gt\"] = \"gt\";\n    RecordGridFilterOperator[\"In\"] = \"in\";\n})(RecordGridFilterOperator || (RecordGridFilterOperator = {}));\nconst RecordGridNamedFilterOptionKey = 'namedFilterOption';\n\nconst RowDataItemIdFieldName = '$ID$';\nvar ApplyGridFilterMode;\n(function (ApplyGridFilterMode) {\n    ApplyGridFilterMode[\"Append\"] = \"Append\";\n    ApplyGridFilterMode[\"Remove\"] = \"Remove\";\n    ApplyGridFilterMode[\"Overwrite\"] = \"Overwrite\";\n    ApplyGridFilterMode[\"Merge\"] = \"Merge\";\n    ApplyGridFilterMode[\"Clear\"] = \"Clear\";\n    ApplyGridFilterMode[\"Begin\"] = \"Begin\";\n    ApplyGridFilterMode[\"End\"] = \"End\";\n})(ApplyGridFilterMode || (ApplyGridFilterMode = {}));\n\nconst expressionAttributeName = 'rx-expression';\nconst RX_RICH_TEXT = {\n    expressionAttributeName\n};\n\nconst RX_RICH_TEXT_STYLES = 'skins/rich-text/';\nclass RxCkEditorConfiguratorService {\n    constructor(translateService, rxLocalizationService, rxUrlUtilsService) {\n        this.translateService = translateService;\n        this.rxLocalizationService = rxLocalizationService;\n        this.rxUrlUtilsService = rxUrlUtilsService;\n    }\n    getCKEditorConfig() {\n        return {\n            resize_enabled: false,\n            title: false,\n            skin: 'rich-text,' + RX_RICH_TEXT_STYLES,\n            toolbar: [\n                [\n                    'Bold',\n                    'Italic',\n                    'Strike',\n                    'Underline',\n                    '-',\n                    'NumberedList',\n                    'BulletedList',\n                    'Outdent',\n                    'Indent',\n                    '-',\n                    'JustifyLeft',\n                    'JustifyCenter',\n                    'JustifyRight',\n                    '-',\n                    'Format',\n                    'Styles',\n                    'Font',\n                    'FontSize',\n                    'TextColor'\n                ]\n            ],\n            stylesSet: [\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.italic-title'),\n                    element: 'h2',\n                    attributes: {\n                        class: 'italic-title'\n                    }\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.subtitle'),\n                    element: 'h3',\n                    attributes: {\n                        class: 'subtitle'\n                    }\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.special-container'),\n                    element: 'div',\n                    attributes: {\n                        class: 'special-containers'\n                    }\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.marker'),\n                    element: 'span',\n                    attributes: {\n                        class: 'marker'\n                    }\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.small'),\n                    element: 'small'\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.computer-code'),\n                    element: 'code'\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.keyboard-phrase'),\n                    element: 'kbd'\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.sample-text'),\n                    element: 'samp'\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.variable'),\n                    element: 'var'\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.deleted-text'),\n                    element: 'del'\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.inserted-text'),\n                    element: 'ins'\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.cited-work'),\n                    element: 'cite'\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.inline-quotation'),\n                    element: 'q'\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.compact-table'),\n                    element: 'table',\n                    attributes: {\n                        cellpadding: '5',\n                        cellspacing: '0',\n                        class: 'compact-table'\n                    }\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.borderless-table'),\n                    element: 'table',\n                    attributes: {\n                        class: 'borderless-table'\n                    }\n                },\n                {\n                    name: this.translateService.instant('com.bmc.arsys.rx.client.ckeditor.styles-set.square-bulleted-list'),\n                    element: 'ul',\n                    attributes: {\n                        class: 'square-bulleted-list'\n                    }\n                }\n            ],\n            language: this.rxLocalizationService.currentLocale,\n            format_tags: 'p;h1;h2;h3;pre',\n            height: '78px'\n        };\n    }\n    getContentRules() {\n        return {\n            p: true,\n            strong: true,\n            em: true,\n            s: true,\n            u: true,\n            ol: true,\n            ul: true,\n            li: true,\n            small: true,\n            code: true,\n            kbd: true,\n            samp: true,\n            var: true,\n            del: true,\n            ins: true,\n            cite: true,\n            q: true,\n            pre: true,\n            br: true,\n            span: {\n                classes: 'marker',\n                attributes: [RX_RICH_TEXT.expressionAttributeName, 'contenteditable', 'title'],\n                styles: 'color'\n            },\n            h1: true,\n            h2: {\n                classes: 'italic-title'\n            },\n            h3: {\n                classes: 'subtitle'\n            },\n            div: {\n                classes: 'special-containers'\n            },\n            a: {\n                match: (element) => this.rxUrlUtilsService.isUrlSafe(element.attributes.href),\n                attributes: [\n                    'target',\n                    'id',\n                    'dir',\n                    'accesskey',\n                    'lang',\n                    'tabindex',\n                    'title',\n                    'type',\n                    'charset',\n                    'rel',\n                    'href',\n                    'name',\n                    'style',\n                    'class',\n                    'download'\n                ]\n            },\n            'div h1 h2 h3 p span pre li': {\n                styles: 'font-size, text-align, font-family'\n            }\n        };\n    }\n}\nRxCkEditorConfiguratorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCkEditorConfiguratorService, deps: [{ token: i1.TranslateService }, { token: i1$1.RxLocalizationService }, { token: i4.RxUrlUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxCkEditorConfiguratorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCkEditorConfiguratorService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxCkEditorConfiguratorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i1$1.RxLocalizationService }, { type: i4.RxUrlUtilsService }]; } });\n\nvar ViewComponentPropertyType;\n(function (ViewComponentPropertyType) {\n    ViewComponentPropertyType[\"Boolean\"] = \"boolean\";\n    ViewComponentPropertyType[\"String\"] = \"string\";\n    ViewComponentPropertyType[\"Number\"] = \"number\";\n    ViewComponentPropertyType[\"Array\"] = \"array\";\n    ViewComponentPropertyType[\"Object\"] = \"object\";\n})(ViewComponentPropertyType || (ViewComponentPropertyType = {}));\n\nvar RxDevice;\n(function (RxDevice) {\n    RxDevice[\"Desktop\"] = \"desktop\";\n    RxDevice[\"Tablet\"] = \"tablet\";\n    RxDevice[\"Mobile\"] = \"mobile\";\n})(RxDevice || (RxDevice = {}));\n\nconst RX_AVAILABLE_ON_DEVICES_ALL_VALUE = Object.values(RxDevice);\nconst RX_AVAILABLE_ON_DEVICES_PROP_NAME = 'availableOnDevices';\nconst RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE = {\n    [RX_AVAILABLE_ON_DEVICES_PROP_NAME]: RX_AVAILABLE_ON_DEVICES_ALL_VALUE\n};\nconst RX_AVAILABLE_ON_DEVICES_PROP_DESC = {\n    name: RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n    type: ViewComponentPropertyType.Array,\n    designType: ViewComponentPropertyType.Array\n};\n\nconst RX_DISABLED_PROP_NAME = 'disabled';\nconst RX_DISABLED_PROP_DEFAULT_VALUE = {\n    [RX_DISABLED_PROP_NAME]: '0'\n};\nconst RX_DISABLED_PROP_DESC = {\n    name: RX_DISABLED_PROP_NAME,\n    enableExpressionEvaluation: true\n};\n\nconst RX_HIDDEN_PROP_NAME = 'hidden';\nconst RX_HIDDEN_PROP_DEFAULT_VALUE = {\n    [RX_HIDDEN_PROP_NAME]: '0'\n};\nconst RX_HIDDEN_PROP_DESC = {\n    name: RX_HIDDEN_PROP_NAME,\n    enableExpressionEvaluation: true\n};\n\nconst RX_STYLES_PROP_NAME = 'styles';\nconst RX_STYLES_PROP_DEFAULT_VALUE = {\n    [RX_STYLES_PROP_NAME]: null\n};\nconst RX_STYLES_PROP_DESC = {\n    name: RX_STYLES_PROP_NAME\n};\n\nconst RX_STANDARD_PROPS_DESC = [RX_HIDDEN_PROP_DESC, RX_STYLES_PROP_DESC, RX_AVAILABLE_ON_DEVICES_PROP_DESC];\nconst RX_STANDARD_PROPS_DEFAULT_VALUES = Object.assign(Object.assign(Object.assign({}, RX_HIDDEN_PROP_DEFAULT_VALUE), RX_STYLES_PROP_DEFAULT_VALUE), RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE);\n\nclass RxExpressionHelperService {\n    constructor() {\n        this.prepareHandlers = [];\n        function _convertNull(expression) {\n            return expression.replace(/null/gi, null);\n        }\n        function _convertNot(expression) {\n            return expression.replace(/not/gi, '!');\n        }\n        function _convertOr(expression) {\n            return expression.replace(/or/gi, ExpressionOperator.Or);\n        }\n        function _convertAnd(expression) {\n            return expression.replace(/and/gi, ExpressionOperator.And);\n        }\n        function _convertLike(expression) {\n            return expression.replace(/like/gi, ExpressionOperator.Like);\n        }\n        function _convertContains(expression) {\n            return expression.replace(/contains/gi, ExpressionOperator.Contains);\n        }\n        this.prepareHandlers.push(_convertNull, _convertNot, _convertAnd, _convertOr, _convertLike, _convertContains);\n    }\n    extractTokens(regex, key, expression) {\n        const matches = expression.match(regex);\n        return {\n            matches,\n            expression: expression.replace(regex, key)\n        };\n    }\n    insertTokens(matches, key, expression) {\n        if (matches !== null) {\n            matches.forEach((value) => {\n                expression = expression.replace(key, value);\n            });\n        }\n        return expression;\n    }\n    prepare(expression) {\n        // replace all spaces with charCode 160 to 32 charCode which supported by jsep\n        const convertedExpression = expression.replace(new RegExp(String.fromCharCode(160), 'g'), ' ');\n        const stringExpressionsData = this.extractTokens(/'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'|\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"/g, 'RX_STRING_EXPRESSION', convertedExpression);\n        stringExpressionsData.matches = map(stringExpressionsData.matches, this.insertLiteralExpressions);\n        const expressionsData = this.extractTokens(/\\${[^}]+}/g, 'RX_EXPRESSION', stringExpressionsData.expression);\n        let preparedExpression = this.prepareOperators(expressionsData.expression);\n        preparedExpression = this.insertExpressions(expressionsData.matches, 'RX_EXPRESSION', preparedExpression);\n        return this.insertTokens(stringExpressionsData.matches, 'RX_STRING_EXPRESSION', preparedExpression);\n    }\n    prepareOperators(expression) {\n        return reduce(this.prepareHandlers, (result, handler) => handler(result), expression);\n    }\n    insertLiteralExpressions(expression) {\n        const literalExpressions = uniq(expression.match(/\\${[^}$]+}/g));\n        literalExpressions.forEach((literalExpression) => {\n            const regexp = new RegExp(escapeRegExp(literalExpression), 'g');\n            expression = expression.replace(regexp, `rx-${literalExpression}`);\n        });\n        return expression;\n    }\n    insertExpressions(matches, key, expression) {\n        if (matches !== null) {\n            matches.forEach((value) => {\n                expression = expression.replace(key, `\"rx-${value}\"`);\n            });\n        }\n        return expression;\n    }\n}\nRxExpressionHelperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionHelperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxExpressionHelperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionHelperService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionHelperService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass RxExpressionSyntaxTreeBuilderService {\n    constructor() {\n        this.jsep = jsep;\n        this.jsep.addBinaryOp(ExpressionOperator.Contains, 7);\n        this.jsep.addBinaryOp(ExpressionOperator.Like, 7);\n        this.jsep.addBinaryOp(ExpressionOperator.And, 2);\n        this.jsep.addBinaryOp(ExpressionOperator.Or, 1);\n        this.jsep.addBinaryOp(ExpressionOperator.Equal, 6);\n        this.jsep.addBinaryOp(ExpressionOperator.In, 8);\n        // Remove default unused binary operators.\n        this.jsep.removeBinaryOp('||');\n        this.jsep.removeBinaryOp('&&');\n        this.jsep.removeBinaryOp('|');\n        this.jsep.removeBinaryOp('^');\n        this.jsep.removeBinaryOp('&');\n        this.jsep.removeBinaryOp('==');\n        this.jsep.removeBinaryOp('===');\n        this.jsep.removeBinaryOp('!==');\n        this.jsep.removeBinaryOp('<<');\n        this.jsep.removeBinaryOp('>>');\n        this.jsep.removeBinaryOp('>>>');\n        // Remove default unused unary operators.\n        this.jsep.removeUnaryOp('~');\n        // Remove _, but keep $ to match AR expressions, e.g. $USER$.\n        this.jsep.removeIdentifierChar('_');\n    }\n    buildTree(expression) {\n        return this.jsep(expression);\n    }\n}\nRxExpressionSyntaxTreeBuilderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionSyntaxTreeBuilderService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxExpressionSyntaxTreeBuilderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionSyntaxTreeBuilderService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionSyntaxTreeBuilderService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nconst expressionFunctions = [\n    {\n        name: 'SAME',\n        category: 'Array',\n        description: 'Returns true if all values in array are the same, else false.',\n        parameters: [\n            {\n                name: 'array',\n                description: 'The array to inspect.'\n            }\n        ]\n    },\n    {\n        name: 'INCLUDES',\n        category: 'Array',\n        description: 'Returns true if value is found in array, else false.',\n        parameters: [\n            {\n                name: 'array',\n                description: 'The array to inspect.'\n            },\n            {\n                name: 'value',\n                description: 'The value to search for.'\n            }\n        ]\n    },\n    {\n        name: 'SIZE',\n        category: 'Array',\n        description: 'Gets the size of array.',\n        parameters: [\n            {\n                name: 'array',\n                description: 'The array to inspect.'\n            }\n        ]\n    }\n];\nconst RX_EXPRESSION_FUNCTIONS = expressionFunctions.map((descriptor) => {\n    const params = map(descriptor.parameters, 'name').join(', ');\n    return Object.assign(Object.assign({}, descriptor), { signature: `${descriptor.name}(${params})` });\n});\nconst RX_SUPPORTED_FUNCTION = {\n    SAME: (collection) => every(collection, (value) => value === collection[0]),\n    INCLUDES: (collection, value) => includes(collection, value),\n    SIZE: (collection) => size(collection)\n};\n\nclass RxDefaultExpressionEvaluatorService {\n    constructor(rxExpressionHelperService, rxStringService, rxExpressionSyntaxTreeBuilderService) {\n        this.rxExpressionHelperService = rxExpressionHelperService;\n        this.rxStringService = rxStringService;\n        this.rxExpressionSyntaxTreeBuilderService = rxExpressionSyntaxTreeBuilderService;\n        this.parsedExpressionCache = {};\n        this.operators = {\n            [ExpressionOperator.Equal]: (a, b) => {\n                if (BigNumber.isBigNumber(a)) {\n                    return a.isEqualTo(b);\n                }\n                else if (BigNumber.isBigNumber(b)) {\n                    return b.isEqualTo(a);\n                }\n                else {\n                    // tslint:disable-next-line:triple-equals\n                    return a == b;\n                }\n            },\n            [ExpressionOperator.Add]: (a, b) => {\n                if ((isNil(a) || isNaN(a)) && (isNil(b) || isNaN(b))) {\n                    return null;\n                }\n                else if ((isNil(a) || isNaN(a)) && !(isNil(b) || isNaN(b))) {\n                    return BigNumber.isBigNumber(b) ? Number(b) : b;\n                }\n                else if ((isNil(b) || isNaN(b)) && !(isNil(a) || isNaN(a))) {\n                    return BigNumber.isBigNumber(a) ? Number(a) : a;\n                }\n                // Have to convert BigNumber values to Number in order to use mathimatical addition as opposed to\n                // string concatenation, which will otherwise happen due to BigNumber.valueOf() returning a string.\n                a = BigNumber.isBigNumber(a) ? Number(a) : a;\n                b = BigNumber.isBigNumber(b) ? Number(b) : b;\n                return a + b;\n            },\n            [ExpressionOperator.Subtract]: (a, b) => {\n                if (isUndefined(a) || isNaN(a)) {\n                    a = 0;\n                }\n                if (isUndefined(b) || isNaN(b)) {\n                    b = 0;\n                }\n                return a - b;\n            },\n            [ExpressionOperator.Multiply]: (a, b) => {\n                if (isUndefined(a) || isNaN(a)) {\n                    a = 0;\n                }\n                if (isUndefined(b) || isNaN(b)) {\n                    b = 0;\n                }\n                return a * b;\n            },\n            [ExpressionOperator.Divide]: (a, b) => {\n                if (isUndefined(a) || isUndefined(b) || isNaN(a) || isNaN(b)) {\n                    return 0;\n                }\n                return a / b;\n            },\n            [ExpressionOperator.LessThan]: (a, b) => {\n                if (BigNumber.isBigNumber(a)) {\n                    return a.lt(b);\n                }\n                else if (BigNumber.isBigNumber(b)) {\n                    return b.gt(a);\n                }\n                else {\n                    return a < b;\n                }\n            },\n            [ExpressionOperator.GreaterThan]: (a, b) => {\n                if (BigNumber.isBigNumber(a)) {\n                    return a.gt(b);\n                }\n                else if (BigNumber.isBigNumber(b)) {\n                    return b.lt(a);\n                }\n                else {\n                    return a > b;\n                }\n            },\n            [ExpressionOperator.GreaterThanOrEqual]: (a, b) => {\n                if (BigNumber.isBigNumber(a)) {\n                    return a.gte(b);\n                }\n                else if (BigNumber.isBigNumber(b)) {\n                    return b.lte(a);\n                }\n                else {\n                    return a >= b;\n                }\n            },\n            [ExpressionOperator.LessThanOrEqual]: (a, b) => {\n                if (BigNumber.isBigNumber(a)) {\n                    return a.lte(b);\n                }\n                else if (BigNumber.isBigNumber(b)) {\n                    return b.gte(a);\n                }\n                else {\n                    return a <= b;\n                }\n            },\n            [ExpressionOperator.NotEqual]: (a, b) => {\n                if (BigNumber.isBigNumber(a)) {\n                    return !a.isEqualTo(b);\n                }\n                else if (BigNumber.isBigNumber(b)) {\n                    return !b.isEqualTo(a);\n                }\n                else {\n                    // tslint:disable-next-line:triple-equals\n                    return a != b;\n                }\n            },\n            [ExpressionOperator.Remainder]: (a, b) => {\n                if (isUndefined(a) || isUndefined(b) || isNaN(a) || isNaN(b)) {\n                    return 0;\n                }\n                return a % b;\n            },\n            [ExpressionOperator.And]: this.andHandler,\n            [ExpressionOperator.And.toLowerCase()]: this.andHandler,\n            [ExpressionOperator.Or]: this.orHandler,\n            [ExpressionOperator.Or.toLowerCase()]: this.orHandler,\n            [ExpressionOperator.Like]: this.likeHandler,\n            [ExpressionOperator.Like.toLowerCase()]: this.likeHandler,\n            [ExpressionOperator.Contains]: this.likeHandler,\n            [ExpressionOperator.Contains.toLowerCase()]: this.likeHandler\n        };\n        this.unaryOperators = {\n            '-': (value) => {\n                if (isUndefined(value) || isNaN(value)) {\n                    return 0;\n                }\n                else {\n                    return -Number(value);\n                }\n            },\n            '!': (value) => !Boolean(value)\n        };\n    }\n    parseExpression(expression) {\n        if (!this.parsedExpressionCache[expression]) {\n            const parsedExpression = this.rxExpressionSyntaxTreeBuilderService.buildTree(expression);\n            if (this.validateChildNodeTypes(parsedExpression)) {\n                this.parsedExpressionCache[expression] = parsedExpression;\n            }\n            else {\n                throw new Error('Invalid syntax');\n            }\n        }\n        return this.parsedExpressionCache[expression];\n    }\n    evaluate(expression, data) {\n        let evaluatedExpression = expression;\n        expression = trim(expression);\n        if (this.rxStringService.isNonEmptyString(expression)) {\n            const preparedExpression = this.rxExpressionHelperService.prepare(expression);\n            let parsedExpression;\n            try {\n                parsedExpression = this.parseExpression(preparedExpression);\n            }\n            catch (e) {\n                throw new Error(`Cannot parse expression \"${expression}\": ${e.message}.`);\n            }\n            try {\n                evaluatedExpression = this.evaluateNode(parsedExpression, data || {});\n            }\n            catch (e) {\n                throw new Error(`Cannot evaluate expression \"${expression}\": ${e.message}.`);\n            }\n        }\n        else {\n            evaluatedExpression = null;\n        }\n        return evaluatedExpression;\n    }\n    andHandler(a, b) {\n        return Boolean(a) && Boolean(b);\n    }\n    orHandler(a, b) {\n        return Boolean(a) || Boolean(b);\n    }\n    likeHandler(a, b) {\n        return includes(a, b);\n    }\n    validateChildNodeTypes(node) {\n        let isValid = false;\n        switch (node.type) {\n            case 'BinaryExpression':\n                isValid =\n                    this.validateChildNodeTypes(node.left) &&\n                        this.validateChildNodeTypes(node.right);\n                break;\n            case 'UnaryExpression':\n                isValid = this.validateChildNodeTypes(node.argument);\n                break;\n            case 'CallExpression':\n                isValid = false;\n                const functionNode = node;\n                const functionDescriptor = find(RX_EXPRESSION_FUNCTIONS, { name: functionNode.callee['name'] });\n                if (functionDescriptor && functionNode.arguments.length === functionDescriptor.parameters.length) {\n                    isValid = every(functionNode.arguments, (argument) => this.validateChildNodeTypes(argument));\n                }\n                break;\n            case 'Literal':\n                isValid = true;\n                break;\n            case 'Identifier':\n                isValid = /^\\$[A-Za-z]+\\$$/.test(node.name);\n                break;\n        }\n        return isValid;\n    }\n    evaluateNode(node, data) {\n        switch (node.type) {\n            case 'BinaryExpression':\n                const left = this.evaluateNode(node.left, data);\n                const right = this.evaluateNode(node.right, data);\n                if (this.operators[node.operator]) {\n                    const binaryResult = this.operators[node.operator](left, right);\n                    if (isNaN(binaryResult)) {\n                        throw new Error(`Operator: ${node.operator} has invalid arguments: ${left}, ${right}`);\n                    }\n                    else {\n                        return binaryResult;\n                    }\n                }\n                else {\n                    throw new Error(`Unknown binary operator: ${node.operator}`);\n                }\n            case 'CallExpression':\n                let evaluatedArguments = [];\n                const functionName = node.callee['name'];\n                evaluatedArguments = node.arguments.map((argument) => this.evaluateNode(argument, data));\n                if (RX_SUPPORTED_FUNCTION[functionName]) {\n                    return RX_SUPPORTED_FUNCTION[functionName](...evaluatedArguments);\n                }\n                else {\n                    throw new Error(`Unknown function: ${functionName}`);\n                }\n            case 'Literal':\n                let nodeValue = node.value;\n                if (isString(nodeValue)) {\n                    if (/^rx-\\${[^{}$]+}$/.test(nodeValue)) {\n                        nodeValue = result(data, nodeValue.slice(5, -1));\n                    }\n                    else {\n                        const expressions = nodeValue.match(/(rx-\\${[^{}$]+})/g);\n                        forEach(expressions, (expression) => {\n                            const value = result(data, expression.slice(5, -1));\n                            nodeValue = nodeValue.replace(expression, isNil(value) ? '' : value);\n                        });\n                    }\n                }\n                return nodeValue;\n            case 'UnaryExpression':\n                if (this.unaryOperators[node.operator]) {\n                    const evaluatedResult = this.evaluateNode(node.argument, data);\n                    const unaryResult = this.unaryOperators[node.operator](evaluatedResult);\n                    if (isNaN(unaryResult)) {\n                        throw new Error(`Operator: ${node.operator} has invalid argument: ${evaluatedResult}`);\n                    }\n                    else {\n                        return unaryResult;\n                    }\n                }\n                else {\n                    throw new Error(`Unknown unary operator: ${node.operator}`);\n                }\n            default:\n                throw new Error('Invalid syntax');\n        }\n    }\n}\nRxDefaultExpressionEvaluatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDefaultExpressionEvaluatorService, deps: [{ token: RxExpressionHelperService }, { token: i4.RxStringService }, { token: RxExpressionSyntaxTreeBuilderService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxDefaultExpressionEvaluatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDefaultExpressionEvaluatorService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDefaultExpressionEvaluatorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxExpressionHelperService }, { type: i4.RxStringService }, { type: RxExpressionSyntaxTreeBuilderService }]; } });\n\nclass RxDefaultExpressionValidatorService {\n    constructor(rxStringService, rxDefaultExpressionEvaluatorService, rxExpressionHelperService) {\n        this.rxStringService = rxStringService;\n        this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;\n        this.rxExpressionHelperService = rxExpressionHelperService;\n    }\n    isValid(expression, customEvaluatorService) {\n        const evaluator = customEvaluatorService || this.rxDefaultExpressionEvaluatorService;\n        let valid = true;\n        if (this.rxStringService.isNonEmptyString(expression) && isFunction(evaluator.parseExpression)) {\n            const preparedExpression = this.rxExpressionHelperService.prepare(expression);\n            try {\n                evaluator.parseExpression(preparedExpression);\n            }\n            catch (e) {\n                valid = false;\n            }\n        }\n        return valid;\n    }\n}\nRxDefaultExpressionValidatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDefaultExpressionValidatorService, deps: [{ token: i4.RxStringService }, { token: RxDefaultExpressionEvaluatorService }, { token: RxExpressionHelperService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxDefaultExpressionValidatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDefaultExpressionValidatorService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDefaultExpressionValidatorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i4.RxStringService }, { type: RxDefaultExpressionEvaluatorService }, { type: RxExpressionHelperService }]; } });\n\nclass RxExpressionEvaluatorService {\n    constructor(injector, rxLogService, rxDefaultExpressionEvaluatorService, rxDefaultExpressionValidatorService, rxNotificationService) {\n        this.injector = injector;\n        this.rxLogService = rxLogService;\n        this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;\n        this.rxDefaultExpressionValidatorService = rxDefaultExpressionValidatorService;\n        this.rxNotificationService = rxNotificationService;\n    }\n    evaluate(expression, data, customEvaluatorService) {\n        const evaluator = customEvaluatorService || this.rxDefaultExpressionEvaluatorService;\n        const evaluatedExpression = evaluator.evaluate(expression, data);\n        this.rxLogService.debug(`EVALUATED EXPRESSION ${expression}: ${evaluatedExpression}`);\n        return evaluatedExpression;\n    }\n    tryEvaluate(expression, data, customEvaluatorService, defaultValue = null) {\n        let result = defaultValue;\n        try {\n            result = this.evaluate(expression, data, customEvaluatorService);\n        }\n        catch (error) {\n            this.rxNotificationService.addErrorMessage(error.message);\n        }\n        return result;\n    }\n    isValid(expression, customEvaluatorService) {\n        return this.rxDefaultExpressionValidatorService.isValid(expression, customEvaluatorService);\n    }\n}\nRxExpressionEvaluatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionEvaluatorService, deps: [{ token: i0.Injector }, { token: i1$1.RxLogService }, { token: RxDefaultExpressionEvaluatorService }, { token: RxDefaultExpressionValidatorService }, { token: i1$1.RxNotificationService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxExpressionEvaluatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionEvaluatorService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxExpressionEvaluatorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$1.RxLogService }, { type: RxDefaultExpressionEvaluatorService }, { type: RxDefaultExpressionValidatorService }, { type: i1$1.RxNotificationService }]; } });\n\nconst RX_EXPRESSION_EVALUATOR = {\n    operands: {\n        null: '$NULL$',\n        undefined: '$UNDEFINED$'\n    },\n    associatedFieldIdPrefixPattern: 'recordContext\\\\._associations\\\\.([^\\\\.]+)\\\\.(\\\\w+)\\\\[0]\\\\.'\n};\n\nclass RxRecordQueryExpressionEvaluatorService {\n    constructor(rxDefaultExpressionEvaluatorService, rxExpressionHelper, rxStringService, rxRecordInstanceUtilsService) {\n        this.rxDefaultExpressionEvaluatorService = rxDefaultExpressionEvaluatorService;\n        this.rxExpressionHelper = rxExpressionHelper;\n        this.rxStringService = rxStringService;\n        this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;\n        this.viewRegExp = /\\${(view.+?)}/g;\n        // extract strings surrounded by double quotes,\n        // extracted strings will include escaped double quotes characters (\"\")\n        this.stringMatchingRegExp = /\"((?:(?:\"\")*|(?:[^\"])*)*)\"/g;\n        // extract strings with associated field id surrounded by quotes\n        this.associationExpressionRegExp = new RegExp(\"(')(\\\\$\\\\{\" + RX_EXPRESSION_EVALUATOR.associatedFieldIdPrefixPattern + \"\\\\d+\\\\})(')\", 'g');\n    }\n    evaluate(expression, data) {\n        this.rxOperatorCounter = 0;\n        this.rxViewExpressionCounter = 0;\n        this.rxStringExpressionCounter = 0;\n        this.rxAssociationFilterExpressionCounter = 0;\n        let evaluatedExpression = null;\n        if (!this.rxStringService.isEmptySafe(expression)) {\n            // Replace strings in double quotes with RX_STRING_EXPRESSION token, e.g.\n            // \"text ${view.foo}\" = ${view.bar}\"text \"\"text in quotes\"\" text\" ->\n            // RX_EXPRESSION_STRING = ${view.bar}RX_EXPRESSION_STRING\n            this.rxStringsExpressionData = this.rxExpressionHelper.extractTokens(this.stringMatchingRegExp, ExpressionParserToken.RxStringExpression, expression);\n            // Replace RX association filter expressions with RX_ASSOCIATION_FILTER_EXPRESSION token, e.g.\n            // '7' = '${recordContext._associations...}' -> '7' = RX_ASSOCIATION_FILTER_EXPRESSION\n            this.arRecordAssociationFilterExpressionData = this.rxExpressionHelper.extractTokens(this.associationExpressionRegExp, 'RX_ASSOCIATION_FILTER_EXPRESSION', this.rxStringsExpressionData.expression);\n            // Replace RX view expressions with RX_VIEW_EXPRESSION token, e.g\n            // ${view.foo} = ${view.bar} -> RX_VIEW_EXPRESSION = RX_VIEW_EXPRESSION\n            this.rxExpressionsData = this.rxExpressionHelper.extractTokens(this.viewRegExp, 'RX_VIEW_EXPRESSION', this.arRecordAssociationFilterExpressionData.expression);\n            // Prepare operators, e.g\n            // RX_VIEW_EXPRESSION = NOTRX_VIEW_EXPRESSION -> RX_VIEW_EXPRESSION = !RX_VIEW_EXPRESSION\n            this.rxExpressionHelper.prepareOperators(this.rxExpressionsData.expression);\n            const rxOperatorsData = this.rxExpressionHelper.extractTokens(/(\\s+(AND|OR)\\s+)|(\\s*(\\(|\\))\\s*)/g, ExpressionParserToken.RxOperator, this.rxExpressionsData.expression);\n            evaluatedExpression = map(rxOperatorsData.expression.split(ExpressionParserToken.RxOperator), (operand) => {\n                const likeExpressionMatch = /(.*)\\s+LIKE\\s+(.*)/g.exec(operand);\n                // does operand use the LIKE operator?\n                if (likeExpressionMatch) {\n                    const leftOperandValue = this.evaluateOperand(likeExpressionMatch[1], data), rightOperandValue = `\"${this.evaluateOperand(likeExpressionMatch[2], data, true)}\"`;\n                    return `${leftOperandValue} LIKE ${rightOperandValue}`;\n                }\n                else {\n                    return this.evaluateOperand(operand, data);\n                }\n            })\n                .join(ExpressionParserToken.RxOperator)\n                .replace(new RegExp(`${ExpressionParserToken.RxOperator}`, 'g'), () => rxOperatorsData.matches[this.rxOperatorCounter++]);\n        }\n        return evaluatedExpression;\n    }\n    // Evaluate operand by replacing expression tokens with evaluated values.\n    // e.g\n    // RX_EXPRESSION = RX_EXPRESSION_STRING ->\n    // \"${view.foo}\" = \"text ${view.bar}\" ->\n    // \"Foo\" LIKE \"text Bar\"\n    // or\n    // RX_ASSOCIATION_FILTER_EXPRESSION LIKE %RX_STRING_EXPRESSION% ->\n    // '${recordContext.associations...}' LIKE %\"some ${view.textFieldValue}\"% ->\n    // ${recordContext.associations...} LIKE \"%some text \"\" with \\% escaped \\_ wildcards%\"\n    evaluateOperand(operand, data, isLikeOperand = false) {\n        return reduce([\n            this.evaluateRxViewExpressions.bind(this),\n            this.evaluateRxStringExpressions.bind(this),\n            this.prepareRxAssociationFilterExpressions.bind(this)\n        ], (expression, evaluator) => evaluator(expression, data, isLikeOperand), operand);\n    }\n    evaluateRxViewExpressions(operand, data, isLikeOperand = false) {\n        return operand.replace(/RX_VIEW_EXPRESSION/g, () => {\n            return this.rxExpressionsData.matches[this.rxViewExpressionCounter++].replace(this.viewRegExp, (match, submatch) => {\n                let value = result(data, submatch);\n                if (isUndefined(value)) {\n                    return RX_EXPRESSION_EVALUATOR.operands.undefined;\n                }\n                else if (isNull(value) || value === '') {\n                    return isLikeOperand ? '' : RX_EXPRESSION_EVALUATOR.operands.null;\n                }\n                else if (isString(value)) {\n                    value = isLikeOperand\n                        ? this.rxRecordInstanceUtilsService.escapeTextWildcards(value)\n                        : value.replace(/\"/g, '\"\"');\n                }\n                return isLikeOperand ? value : `\"${value}\"`;\n            });\n        });\n    }\n    evaluateRxStringExpressions(operand, data, isLikeOperand = false) {\n        return operand.replace(new RegExp(`${ExpressionParserToken.RxStringExpression}`, 'g'), () => {\n            let stringExpression = this.rxStringsExpressionData.matches[this.rxStringExpressionCounter++];\n            if (isLikeOperand) {\n                stringExpression = stringExpression.replace(this.stringMatchingRegExp, '$1');\n            }\n            stringExpression = stringExpression.replace(this.viewRegExp, (match, submatch) => {\n                const value = result(data, submatch);\n                if (isNil(value)) {\n                    return '';\n                }\n                else if (isLikeOperand && isString(value)) {\n                    return this.rxRecordInstanceUtilsService.escapeTextWildcards(value);\n                }\n                return value;\n            });\n            if (isEmpty(stringExpression) && !isLikeOperand) {\n                stringExpression = RX_EXPRESSION_EVALUATOR.operands.null;\n            }\n            return stringExpression;\n        });\n    }\n    prepareRxAssociationFilterExpressions(operand) {\n        return operand.replace(/RX_ASSOCIATION_FILTER_EXPRESSION/g, () => this.arRecordAssociationFilterExpressionData.matches[this.rxAssociationFilterExpressionCounter++].replace(this.associationExpressionRegExp, (match, firstQuote, associationExpression, lastQuote) => associationExpression));\n    }\n}\nRxRecordQueryExpressionEvaluatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordQueryExpressionEvaluatorService, deps: [{ token: RxDefaultExpressionEvaluatorService }, { token: RxExpressionHelperService }, { token: i4.RxStringService }, { token: i4$1.RxRecordInstanceUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRecordQueryExpressionEvaluatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordQueryExpressionEvaluatorService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRecordQueryExpressionEvaluatorService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxDefaultExpressionEvaluatorService }, { type: RxExpressionHelperService }, { type: i4.RxStringService }, { type: i4$1.RxRecordInstanceUtilsService }]; } });\n\nconst RX_LEGACY_ICONS = {\n    add: 'plus',\n    addCircle: 'plus_circle',\n    back: 'undo',\n    copy: 'files_copy_o',\n    delete: 'cross',\n    deleteCircle: 'cross_circle',\n    edit: 'pencil',\n    exclamationCircle: 'exclamation_circle',\n    exclamationTriangle: 'exclamation_triangle',\n    help: 'question_circle',\n    preview: 'layout_preview',\n    mail: 'envelope',\n    print: 'printer',\n    thumbsDown: 'thumbs_down',\n    thumbsUp: 'thumbs_up'\n};\n\nclass RxViewComponentRegistryService {\n    constructor(componentFactoryResolver, rxGlobalCacheService, rxBundleCacheService, rxStringService, rxLogService) {\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.rxGlobalCacheService = rxGlobalCacheService;\n        this.rxBundleCacheService = rxBundleCacheService;\n        this.rxStringService = rxStringService;\n        this.rxLogService = rxLogService;\n        // contains all registered component descriptors\n        this.componentDescriptors = new Map();\n        this.asyncComponentDescriptors = [];\n        this.ownerBundleIds$ = this.rxGlobalCacheService.getBundleDescriptors().pipe(map$1((bundleDescriptors) => bundleDescriptors.reduce((ownerBundleIds, bundleDescriptor) => {\n            var _a;\n            (_a = bundleDescriptor.uiOptions.viewComponents) === null || _a === void 0 ? void 0 : _a.forEach((viewComponentName) => {\n                ownerBundleIds[viewComponentName] = bundleDescriptor.id;\n            });\n            return ownerBundleIds;\n        }, {})), shareReplay(1));\n    }\n    resolveAsyncDescriptors() {\n        if (this.asyncComponentDescriptors.length) {\n            this.rxLogService.debug(`Resolving ${this.asyncComponentDescriptors.length} view component descriptor(s)...`);\n            return defer(() => from(Promise.all(this.asyncComponentDescriptors).then((descriptors) => {\n                descriptors.forEach((descriptor) => {\n                    this.registerSync(descriptor);\n                });\n                this.rxLogService.debug(`Resolved ${descriptors.length} view component descriptors: ${descriptors\n                    .map((desc) => desc.type)\n                    .join(', ')}.`);\n                return this.componentDescriptors;\n            })));\n        }\n        else {\n            return of(this.componentDescriptors);\n        }\n    }\n    getRegisteredComponents() {\n        return this.componentDescriptors;\n    }\n    get(type) {\n        return this.componentDescriptors.get(type);\n    }\n    register(...componentDescriptors) {\n        componentDescriptors.forEach((descriptor) => {\n            this.asyncComponentDescriptors.push(Promise.resolve(descriptor));\n        });\n    }\n    registerSync(descriptor) {\n        var _a, _b;\n        if ((_a = descriptor.aliases) === null || _a === void 0 ? void 0 : _a.includes(descriptor.type)) {\n            this.rxLogService.warning(`Component ${descriptor.type} should not have its type listed in descriptor's aliases property.`);\n            descriptor.aliases = descriptor.aliases.filter((type) => type !== descriptor.type);\n        }\n        this.componentDescriptors.set(descriptor.type, descriptor);\n        (_b = descriptor.aliases) === null || _b === void 0 ? void 0 : _b.forEach((type) => {\n            this.componentDescriptors.set(type, descriptor);\n        });\n    }\n    isDataComponentDescriptor(componentDescriptor) {\n        return Boolean(componentDescriptor.isDataComponent);\n    }\n    getBundlePageComponents(bundleId, includeAliases = false) {\n        return this.getDescriptors(includeAliases).filter((componentDescriptor) => componentDescriptor.isPageComponent && isEmpty(componentDescriptor.availableInBundles)\n            ? componentDescriptor.bundleId === bundleId\n            : this.rxStringService.isIncluded(bundleId, componentDescriptor.availableInBundles));\n    }\n    getLicensedComponents(includeAliases = false) {\n        return this.rxGlobalCacheService\n            .getLicensedBundleDescriptors()\n            .pipe(map$1((bundleDescriptors) => this.getDescriptors(includeAliases).filter((componentDescriptor) => this.isBundleLicensed(componentDescriptor.bundleId, bundleDescriptors) &&\n            this.isComponentAvailableInCurrentBundle(componentDescriptor))));\n    }\n    getComponentOwnerBundleId(viewComponentType) {\n        return this.ownerBundleIds$.pipe(map$1((ownerBundleIds) => ownerBundleIds[viewComponentType]));\n    }\n    isBundleLicensed(bundleId, bundleDescriptors) {\n        return bundleId === RX_APPLICATION.platformBundleId || some(bundleDescriptors, { id: bundleId });\n    }\n    isComponentAvailableInCurrentBundle(componentDescriptor) {\n        return (isEmpty(componentDescriptor.availableInBundles) ||\n            this.rxStringService.isIncluded(this.rxBundleCacheService.bundleId, componentDescriptor.availableInBundles));\n    }\n    getDescriptors(includeAliases = false) {\n        return [...this.componentDescriptors.entries()].reduce((result, [type, descriptor]) => {\n            var _a;\n            if (includeAliases || !((_a = descriptor.aliases) === null || _a === void 0 ? void 0 : _a.includes(type))) {\n                result.push(descriptor);\n            }\n            return result;\n        }, []);\n    }\n}\nRxViewComponentRegistryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewComponentRegistryService, deps: [{ token: i0.ComponentFactoryResolver }, { token: i1$1.RxGlobalCacheService }, { token: i1$1.RxBundleCacheService }, { token: i4.RxStringService }, { token: i1$1.RxLogService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewComponentRegistryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewComponentRegistryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewComponentRegistryService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i1$1.RxGlobalCacheService }, { type: i1$1.RxBundleCacheService }, { type: i4.RxStringService }, { type: i1$1.RxLogService }]; } });\n\nvar ViewDefinitionType;\n(function (ViewDefinitionType) {\n    ViewDefinitionType[\"Regular\"] = \"REGULAR\";\n    ViewDefinitionType[\"Shell\"] = \"SHELL\";\n})(ViewDefinitionType || (ViewDefinitionType = {}));\n\nconst RX_VIEW_DEFINITION = {\n    types: {\n        regular: ViewDefinitionType.Regular,\n        shell: ViewDefinitionType.Shell\n    },\n    resourceTypes: {\n        viewComponent: 'com.bmc.arsys.rx.services.view.domain.ViewComponentDefinition',\n        containerViewComponent: 'com.bmc.arsys.rx.services.view.domain.ContainerViewComponentDefinition'\n    },\n    defaultOutletName: 'DEFAULT',\n    unknownPageComponent: {\n        name: 'Unknown Component'\n    },\n    defaultLayoutTemplateId: 5,\n    styles: [\n        { id: 'rx-no-margin', name: 'No Margin' },\n        { id: 'rx-default-border', name: '1px Border' },\n        { id: 'rx-white-background', name: 'White Background' }\n    ]\n};\n\nclass RxViewDefinitionParserService {\n    constructor(rxTreeService) {\n        this.rxTreeService = rxTreeService;\n    }\n    getComponents(definition, skipInitial = false) {\n        const components = [];\n        if (!skipInitial) {\n            components.push({\n                componentDefinition: definition,\n                parentComponentDefinition: null\n            });\n        }\n        this.processComponents(definition.componentDefinitions, components, definition);\n        return components;\n    }\n    processComponents(componentDefinitions, components, parentComponentDefinition) {\n        componentDefinitions.forEach((componentDefinition) => {\n            components.push({ componentDefinition, parentComponentDefinition });\n            if (this.isContainerViewComponentDefinition(componentDefinition)) {\n                this.processComponents(componentDefinition.componentDefinitions, components, componentDefinition);\n            }\n        });\n    }\n    isContainerViewComponentDefinition(componentDefinition) {\n        return componentDefinition.componentDefinitions !== undefined;\n    }\n    findParentComponentDefinition(viewDefinition, childComponentDefinition, predicate) {\n        const componentDefinitionsWithParent = this.getComponents(viewDefinition);\n        let parentComponentDefinition;\n        let childComponentDefinitionWithParent = componentDefinitionsWithParent.find((pair) => pair.componentDefinition.guid === childComponentDefinition.guid);\n        while (childComponentDefinitionWithParent && !parentComponentDefinition) {\n            if (predicate(childComponentDefinitionWithParent.componentDefinition)) {\n                parentComponentDefinition = childComponentDefinitionWithParent.componentDefinition;\n            }\n            else {\n                childComponentDefinitionWithParent = componentDefinitionsWithParent.find((pair) => pair.componentDefinition.guid === childComponentDefinitionWithParent.parentComponentDefinition.guid);\n            }\n        }\n        return parentComponentDefinition;\n    }\n    findViewComponent(viewComponentContainer, predicate) {\n        return find(this.rxTreeService.flattenTree(viewComponentContainer, 'componentDefinitions'), predicate);\n    }\n}\nRxViewDefinitionParserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionParserService, deps: [{ token: i4.RxTreeService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewDefinitionParserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionParserService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionParserService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i4.RxTreeService }]; } });\n\nclass RxViewActionRegistryService {\n    constructor(rxGlobalCacheService, rxStringService, rxBundleCacheService) {\n        this.rxGlobalCacheService = rxGlobalCacheService;\n        this.rxStringService = rxStringService;\n        this.rxBundleCacheService = rxBundleCacheService;\n        this.viewActionDescriptors = new Map();\n        this.designManagers = new Map();\n        this.ownerBundleIds$ = this.rxGlobalCacheService.getBundleDescriptors().pipe(map$1((bundleDescriptors) => bundleDescriptors.reduce((ownerBundleIds, bundleDescriptor) => {\n            var _a;\n            (_a = bundleDescriptor.uiOptions.viewActions) === null || _a === void 0 ? void 0 : _a.forEach((viewActionName) => {\n                ownerBundleIds[viewActionName] = bundleDescriptor.id;\n            });\n            return ownerBundleIds;\n        }, {})), shareReplay(1));\n    }\n    register(viewActionDescriptor) {\n        if (!viewActionDescriptor.label) {\n            viewActionDescriptor.label = viewActionDescriptor.name;\n        }\n        viewActionDescriptor.parameters = viewActionDescriptor.parameters || [];\n        viewActionDescriptor.parameters.push({\n            name: '$condition$',\n            enableExpressionEvaluation: true\n        });\n        viewActionDescriptor.parameters.push({\n            name: 'index',\n            designType: ViewComponentPropertyType.Number\n        });\n        this.viewActionDescriptors.set(viewActionDescriptor.name, viewActionDescriptor);\n    }\n    get(actionName) {\n        return this.viewActionDescriptors.get(actionName);\n    }\n    getRegisteredActions() {\n        return this.viewActionDescriptors;\n    }\n    getLicensedActions() {\n        return this.rxGlobalCacheService.getLicensedBundleDescriptors().pipe(map$1((bundleDescriptors) => {\n            return Array.from(this.viewActionDescriptors.values()).filter((actionDescriptor) => {\n                return (this.isBundleLicensed(actionDescriptor.bundleId, bundleDescriptors) &&\n                    this.isActionAvailableInCurrentBundle(actionDescriptor));\n            });\n        }));\n    }\n    getActionOwnerBundleId(viewActionName) {\n        return this.ownerBundleIds$.pipe(map$1((ownerBundleIds) => ownerBundleIds[viewActionName]));\n    }\n    isBundleLicensed(bundleId, bundleDescriptors) {\n        return bundleId === RX_APPLICATION.platformBundleId || some(bundleDescriptors, { id: bundleId });\n    }\n    isActionAvailableInCurrentBundle(actionDescriptor) {\n        return (isEmpty(actionDescriptor.availableInBundles) ||\n            this.rxStringService.isIncluded(this.rxBundleCacheService.bundleId, actionDescriptor.availableInBundles));\n    }\n    registerUnknownAction(unknownActionName) {\n        let unknownActionDescriptor = this.get(unknownActionName);\n        if (!unknownActionDescriptor) {\n            unknownActionDescriptor = Object.assign(Object.assign({}, this.get('rxUnknownViewAction')), { name: unknownActionName });\n            this.register(unknownActionDescriptor);\n        }\n        return unknownActionDescriptor;\n    }\n    registerDesignManager(actionName, designManagerService) {\n        this.designManagers.set(actionName, designManagerService);\n    }\n    getDesignManager(actionName) {\n        var _a, _b;\n        return (_a = this.designManagers.get(actionName)) !== null && _a !== void 0 ? _a : (_b = this.viewActionDescriptors.get(actionName)) === null || _b === void 0 ? void 0 : _b.designManager;\n    }\n}\nRxViewActionRegistryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionRegistryService, deps: [{ token: i1$1.RxGlobalCacheService }, { token: i4.RxStringService }, { token: i1$1.RxBundleCacheService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewActionRegistryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionRegistryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionRegistryService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxGlobalCacheService }, { type: i4.RxStringService }, { type: i1$1.RxBundleCacheService }]; } });\n\nvar RxViewComponentType;\n(function (RxViewComponentType) {\n    RxViewComponentType[\"ButtonBar\"] = \"rx-button-bar\";\n    RxViewComponentType[\"RecordEditor\"] = \"rx-record-editor\";\n    RxViewComponentType[\"ActionButton\"] = \"rx-action-button\";\n    RxViewComponentType[\"Action\"] = \"rx-action\";\n    RxViewComponentType[\"Page\"] = \"rx-page\";\n    RxViewComponentType[\"ExtensionContainer\"] = \"rx-extension-container\";\n    RxViewComponentType[\"Container\"] = \"rx-container\";\n    RxViewComponentType[\"RichText\"] = \"rx-rich-text\";\n    RxViewComponentType[\"TabPanel\"] = \"rx-tab-panel\";\n    RxViewComponentType[\"TabContainer\"] = \"rx-tab-container\";\n    RxViewComponentType[\"Image\"] = \"rx-image\";\n    RxViewComponentType[\"ServiceList\"] = \"rx-service-list\";\n    RxViewComponentType[\"Unknown\"] = \"rx-unknown\";\n    RxViewComponentType[\"Association\"] = \"rx-association\";\n    RxViewComponentType[\"AssociatedRecordField\"] = \"rx-associated-record-field\";\n    RxViewComponentType[\"DateTime\"] = \"rx-date-time-field\";\n    RxViewComponentType[\"Selection\"] = \"rx-selection-field\";\n    RxViewComponentType[\"Date\"] = \"rx-date-field\";\n    RxViewComponentType[\"Time\"] = \"rx-time-field\";\n    RxViewComponentType[\"Integer\"] = \"rx-integer-field\";\n    RxViewComponentType[\"Floating\"] = \"rx-floating-field\";\n    RxViewComponentType[\"Decimal\"] = \"rx-decimal-field\";\n    RxViewComponentType[\"Boolean\"] = \"rx-boolean-field\";\n    RxViewComponentType[\"Attachment\"] = \"rx-attachment-field\";\n    RxViewComponentType[\"Character\"] = \"rx-character-field\";\n    RxViewComponentType[\"LocalizedCharacter\"] = \"rx-localized-character-field\";\n    RxViewComponentType[\"Textarea\"] = \"rx-textarea-field\";\n    RxViewComponentType[\"SelectGroup\"] = \"rx-select-group\";\n    RxViewComponentType[\"SelectGroupField\"] = \"rx-select-group-field\";\n    RxViewComponentType[\"RichTextarea\"] = \"rx-rich-textarea-field\";\n    RxViewComponentType[\"ViewPresetSelector\"] = \"rx-view-preset-selector\";\n    RxViewComponentType[\"ViewPreset\"] = \"rx-view-preset\";\n})(RxViewComponentType || (RxViewComponentType = {}));\nvar BwfViewComponentType;\n(function (BwfViewComponentType) {\n    BwfViewComponentType[\"DynamicNamedList\"] = \"ux-dynamic-named-list\";\n})(BwfViewComponentType || (BwfViewComponentType = {}));\nconst RxViewComponent = ɵmakeDecorator('RxViewComponent');\n\nclass RxViewDefinitionLocalizationService {\n    constructor(rxViewDefinitionParserService, rxViewComponentRegistryService, rxViewActionRegistryService, rxGuidService, rxTreeService) {\n        this.rxViewDefinitionParserService = rxViewDefinitionParserService;\n        this.rxViewComponentRegistryService = rxViewComponentRegistryService;\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxGuidService = rxGuidService;\n        this.rxTreeService = rxTreeService;\n    }\n    applyLocalization(viewDefinition) {\n        const componentDefinitions = this.rxTreeService.flatten(viewDefinition, 'componentDefinitions');\n        const localizableStringGuidsByComponentGuid = {};\n        // converting Select Group localization for AngularJS views\n        // todo can be removed after dropping support of AngularJS version\n        this.convertOldSelectGroupLocalization(viewDefinition, componentDefinitions);\n        componentDefinitions.forEach((componentDefinition) => {\n            const localizableStrings = viewDefinition.localizableStringsByComponentId[componentDefinition.guid];\n            const propertyNameToStringGuidMap = this.applyComponentDefinitionLocalization(componentDefinition, localizableStrings);\n            if (!isEmpty(propertyNameToStringGuidMap)) {\n                localizableStringGuidsByComponentGuid[componentDefinition.guid] = propertyNameToStringGuidMap;\n            }\n        });\n        viewDefinition.localizablePropertyToStringGuidMap = localizableStringGuidsByComponentGuid;\n        return viewDefinition;\n    }\n    extractLocalizableStrings(viewDefinition) {\n        const localizableStrings = {};\n        const localizablePropertyToStringGuidMap = viewDefinition.localizablePropertyToStringGuidMap || {};\n        this.rxViewDefinitionParserService\n            .getComponents(viewDefinition, true)\n            .map((item) => item.componentDefinition)\n            .filter((component) => component.type && component.type !== RxViewComponentType.Page)\n            .forEach((component) => {\n            const componentDescriptor = this.rxViewComponentRegistryService.get(component.type);\n            const propertyNameToStringGuidMap = localizablePropertyToStringGuidMap[component.guid] || {};\n            const componentStrings = {};\n            let localizablePropertyNames;\n            if (componentDescriptor.type === RxViewComponentType.Action) {\n                const actionDescriptor = this.rxViewActionRegistryService.get(component.propertiesByName.name);\n                localizablePropertyNames = this.getLocalizableActionParameterNames(actionDescriptor);\n            }\n            else {\n                localizablePropertyNames = this.getLocalizableComponentPropertyNames(componentDescriptor);\n            }\n            localizablePropertyNames.forEach((localizablePropertyName) => {\n                if (component.propertiesByName[localizablePropertyName]) {\n                    const stringGuid = propertyNameToStringGuidMap[localizablePropertyName] || this.rxGuidService.generate();\n                    componentStrings[stringGuid] = component.propertiesByName[localizablePropertyName];\n                    component.propertiesByName[localizablePropertyName] = stringGuid;\n                }\n            });\n            if (!isEmpty(componentStrings)) {\n                localizableStrings[component.guid] = componentStrings;\n            }\n        });\n        return localizableStrings;\n    }\n    applyComponentDefinitionLocalization(componentDefinition, localizableStrings = {}) {\n        return transform(componentDefinition.propertiesByName, (result, propertyValue, propertyName) => {\n            if (localizableStrings[propertyValue]) {\n                componentDefinition.propertiesByName[propertyName] = localizableStrings[propertyValue];\n                result[propertyName] = propertyValue;\n            }\n        }, {});\n    }\n    getLocalizableActionParameterNames(actionDescriptor) {\n        return (actionDescriptor.parameters || []).reduce((parameterNames, parameter) => {\n            if (parameter.localizable) {\n                parameterNames.push(parameter.name);\n            }\n            else if (parameter.attributes) {\n                forEach(parameter.attributes, (attribute) => {\n                    if (attribute.localizable) {\n                        parameterNames.push(`${parameter.name}.${attribute.name}`);\n                    }\n                });\n            }\n            return parameterNames;\n        }, []);\n    }\n    getLocalizableComponentPropertyNames(componentDescriptor) {\n        return (componentDescriptor.properties || []).filter((prop) => prop.localizable).map((prop) => prop.name);\n    }\n    // this method used to move SelectGroupField localization from SelectGroup localization object\n    // to own one in same way as this done for any other component.\n    // Method should handle only AngularJS views that has legacy labelId property in SelectGroupField\n    convertOldSelectGroupLocalization(viewDefinition, componentDefinitions) {\n        componentDefinitions\n            .filter((component) => component.type === RxViewComponentType.SelectGroup)\n            .forEach((selectGroup) => {\n            selectGroup.componentDefinitions.forEach((selectGroupField) => {\n                if (selectGroupField.propertiesByName.labelId) {\n                    const oldStringGuid = selectGroupField.propertiesByName.labelId;\n                    const newStringGuid = this.rxGuidService.generate();\n                    const localizedLabel = viewDefinition.localizableStringsByComponentId[selectGroup.guid][oldStringGuid];\n                    // setting localized string guid same way as for other components\n                    selectGroupField.propertiesByName.label = newStringGuid;\n                    // moving localization from SelectGroup to SelectGroupField object with new guid\n                    // to avoid unexpected server behaviour\n                    set(viewDefinition.localizableStringsByComponentId, [selectGroupField.guid, newStringGuid], localizedLabel);\n                    // removing legacy labelId\n                    delete selectGroupField.propertiesByName.labelId;\n                    // removing string from select group localization object\n                    delete viewDefinition.localizableStringsByComponentId[selectGroup.guid][oldStringGuid];\n                }\n            });\n            // removing select group localization object if empty\n            if (isEmpty(viewDefinition.localizableStringsByComponentId[selectGroup.guid])) {\n                delete viewDefinition.localizableStringsByComponentId[selectGroup.guid];\n            }\n        });\n    }\n}\nRxViewDefinitionLocalizationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionLocalizationService, deps: [{ token: RxViewDefinitionParserService }, { token: RxViewComponentRegistryService }, { token: RxViewActionRegistryService }, { token: i4.RxGuidService }, { token: i4.RxTreeService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewDefinitionLocalizationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionLocalizationService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionLocalizationService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxViewDefinitionParserService }, { type: RxViewComponentRegistryService }, { type: RxViewActionRegistryService }, { type: i4.RxGuidService }, { type: i4.RxTreeService }]; } });\n\nvar ViewLayoutRole;\n(function (ViewLayoutRole) {\n    ViewLayoutRole[\"Header\"] = \"header\";\n    ViewLayoutRole[\"Content\"] = \"content\";\n    ViewLayoutRole[\"Footer\"] = \"footer\";\n})(ViewLayoutRole || (ViewLayoutRole = {}));\nvar LayoutTypes;\n(function (LayoutTypes) {\n    LayoutTypes[\"Flexible\"] = \"Flexible\";\n    LayoutTypes[\"Fixed\"] = \"Fixed\";\n})(LayoutTypes || (LayoutTypes = {}));\nconst defaultHeaderOutlet = {\n    name: ViewLayoutRole.Header,\n    height: 60,\n    columns: [getEmptyColumn()]\n};\nconst defaultFooterOutlet = {\n    name: ViewLayoutRole.Footer,\n    height: 60,\n    columns: [getEmptyColumn()]\n};\nconst RX_VIEW_LAYOUTS = [\n    {\n        id: 1,\n        label: 'Header and 1 Column',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet()]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 2,\n        label: 'Header and 2 Columns (50/50)',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet(6, 6)]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 3,\n        label: 'Header and 2 Columns (60/40)',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet(7, 5)]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 4,\n        label: 'Header and 2 Columns (40/60)',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet(5, 7)]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 16,\n        label: 'Header and 2 Columns (70/30)',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet(8, 4)]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 5,\n        label: 'Container',\n        layout: {\n            outlets: [getContentOutlet()]\n        },\n        layoutType: LayoutTypes.Flexible\n    },\n    {\n        id: 6,\n        label: '2 Columns (50/50)',\n        layout: {\n            outlets: [getContentOutlet(6, 6)]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 7,\n        label: '2 Columns (60/40)',\n        layout: {\n            outlets: [getContentOutlet(7, 5)]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 8,\n        label: '2 Columns (40/60)',\n        layout: {\n            outlets: [getContentOutlet(5, 7)]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 14,\n        label: '2 Columns (70/30)',\n        layout: {\n            outlets: [getContentOutlet(8, 4)]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 9,\n        label: '3 Equal Columns',\n        layout: {\n            outlets: [getContentOutlet(4, 4, 4)]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 10,\n        label: 'Header, Footer and 1 Column',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet(), defaultFooterOutlet]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 11,\n        label: 'Header, Footer and 2 Columns (50/50)',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet(6, 6), defaultFooterOutlet]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 12,\n        label: 'Header, Footer and 2 Columns (60/40)',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet(7, 5), defaultFooterOutlet]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 13,\n        label: 'Header, Footer and 2 Columns (40/60)',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet(5, 7), defaultFooterOutlet]\n        },\n        layoutType: LayoutTypes.Fixed\n    },\n    {\n        id: 15,\n        label: 'Header, Footer and 2 Columns (70/30)',\n        layout: {\n            outlets: [defaultHeaderOutlet, getContentOutlet(8, 4), defaultFooterOutlet]\n        },\n        layoutType: LayoutTypes.Fixed\n    }\n].map((layout) => {\n    layout.checksum = getLayoutChecksum(layout.layout);\n    return layout;\n});\nfunction getLayoutChecksum(layout) {\n    const contentOutlet = layout.outlets.find((outlet) => outlet.name === RX_VIEW_DEFINITION.defaultOutletName);\n    let checksum = layout.outlets.find((outlet) => outlet.name === ViewLayoutRole.Header) ? 'h' : '';\n    checksum += layout.outlets.find((outlet) => outlet.name === ViewLayoutRole.Footer) ? 'f' : '';\n    contentOutlet.columns.forEach((column) => (checksum += `c${column.span || 12}`));\n    return checksum;\n}\nfunction getContentOutlet(...columnSpan) {\n    return {\n        name: RX_VIEW_DEFINITION.defaultOutletName,\n        columns: columnSpan.length ? columnSpan.map((span) => getEmptyColumn({ span })) : [getEmptyColumn()]\n    };\n}\nfunction getEmptyColumn(props) {\n    return Object.assign({ children: [] }, props);\n}\n\n// @dynamic\nclass RxViewLayout {\n    static getViewLayoutForDefaultOutlet(children) {\n        return {\n            outlets: [this.getOutlet(RX_VIEW_DEFINITION.defaultOutletName, children)]\n        };\n    }\n    static getEmptyViewLayoutForOutletNames(list) {\n        return {\n            outlets: list.map(({ name }) => this.getOutlet(name))\n        };\n    }\n    static getEmptyViewLayoutForOutlets(outlets) {\n        return {\n            outlets: outlets.map((outlet) => {\n                return Object.assign(Object.assign({}, outlet), { columns: outlet.columns.map((column) => (Object.assign(Object.assign({}, column), { children: [] }))) });\n            })\n        };\n    }\n    static getOutlet(name = RX_VIEW_DEFINITION.defaultOutletName, children = []) {\n        return {\n            name,\n            columns: [\n                {\n                    children\n                }\n            ]\n        };\n    }\n    static getViewLayoutChildGuids(layout, outletName) {\n        return reduce(layout.outlets, (guids, outlet) => {\n            if (!outletName || outletName === outlet.name) {\n                outlet.columns.forEach((column) => {\n                    guids.push(...column.children);\n                });\n            }\n            return guids;\n        }, []);\n    }\n    static hasChild(layout, guid) {\n        return Boolean(layout.outlets.find((outlet) => this.outletHasChild(outlet, guid)));\n    }\n    static outletHasChild(outlet, guid) {\n        return Boolean(outlet.columns.find((column) => column.children.includes(guid)));\n    }\n    static getViewLayoutTemplate(layoutTemplate) {\n        const layoutItem = RX_VIEW_LAYOUTS.find((item) => item.id === layoutTemplate) ||\n            RX_VIEW_LAYOUTS.find((item) => item.id === RX_VIEW_DEFINITION.defaultLayoutTemplateId);\n        return layoutItem.layout;\n    }\n    static getLayoutName(layout) {\n        const checksum = getLayoutChecksum(layout);\n        const layoutTemplate = RX_VIEW_LAYOUTS.find((item) => item.checksum === checksum);\n        return layoutTemplate ? layoutTemplate.label : '';\n    }\n    static removeChildFromLayout(layout, guidToRemove) {\n        return {\n            outlets: layout.outlets.map((outlet) => (Object.assign(Object.assign({}, outlet), { columns: outlet.columns.map((column) => (Object.assign(Object.assign({}, column), { children: column.children.filter((childGuid) => childGuid !== guidToRemove) }))) })))\n        };\n    }\n}\n\nconst renameViewDefinitionCommand = 'com.bmc.arsys.rx.application.view.command.RenameViewDefinitionCommand';\nconst revertCustomizationResourceType = 'com.bmc.arsys.rx.application.view.command.RevertViewDefinitionCommand';\nclass RxViewDefinitionService {\n    constructor(httpClient, rxGuidService, rxCommandFactoryService, rxViewDefinitionLocalizationService, rxLocalizationService) {\n        this.httpClient = httpClient;\n        this.rxGuidService = rxGuidService;\n        this.rxCommandFactoryService = rxCommandFactoryService;\n        this.rxViewDefinitionLocalizationService = rxViewDefinitionLocalizationService;\n        this.rxLocalizationService = rxLocalizationService;\n        this.renameCommand = rxCommandFactoryService.forResourceType(renameViewDefinitionCommand);\n        this.revertCustomizationCommand = rxCommandFactoryService.forResourceType(revertCustomizationResourceType);\n    }\n    get(viewDefinitionName, options) {\n        const defaultOptions = { params: { locale: this.rxLocalizationService.currentLocale } };\n        return this.httpClient\n            .get(this.getUrl(viewDefinitionName), Object.assign(Object.assign({}, defaultOptions), options))\n            .pipe(map$1((viewDefinition) => this.rxViewDefinitionLocalizationService.applyLocalization(viewDefinition)));\n    }\n    getNew(layoutTemplate) {\n        return of(this.getNewViewDefinition.call(this, layoutTemplate));\n    }\n    create(viewDefinition) {\n        return this.httpClient.post(this.getUrl(), viewDefinition, { responseType: 'text', observe: 'response' });\n    }\n    update(viewDefinitionName, viewDefinition, options) {\n        return this.httpClient.put(this.getUrl(viewDefinitionName), viewDefinition, options);\n    }\n    delete(viewDefinitionName) {\n        return this.httpClient.delete(this.getUrl(viewDefinitionName));\n    }\n    rename(oldViewDefinitionName, newViewDefinitionName) {\n        return this.renameCommand.execute({\n            name: oldViewDefinitionName,\n            newName: newViewDefinitionName\n        });\n    }\n    isPageView(viewDefinition) {\n        return (viewDefinition.componentDefinitions.length === 1 &&\n            viewDefinition.componentDefinitions[0].type === RxViewComponentType.Page);\n    }\n    revertCustomization(viewDefinitionName) {\n        return this.revertCustomizationCommand.execute({ viewDefinitionName });\n    }\n    getUrl(viewDefinitionName) {\n        return viewDefinitionName\n            ? `/api/rx/application/view/viewdefinition/${encodeURIComponent(viewDefinitionName)}`\n            : '/api/rx/application/view/viewdefinition';\n    }\n    getNewViewDefinition(layoutTemplate = RX_VIEW_DEFINITION.defaultLayoutTemplateId) {\n        return {\n            guid: this.rxGuidService.generate(),\n            name: null,\n            description: null,\n            componentDefinitions: [],\n            inputParams: [],\n            outputParams: [],\n            allowOverlay: false,\n            layout: JSON.stringify(RxViewLayout.getViewLayoutTemplate(layoutTemplate)),\n            permissions: [\n                {\n                    ownerId: {\n                        value: 0,\n                        name: 'Public',\n                        type: 'GROUP'\n                    },\n                    type: 'VISIBLE'\n                }\n            ],\n            type: RX_VIEW_DEFINITION.types.regular,\n            scope: RX_BUNDLE.definitionScopeTypes.bundle,\n            targetViewDefinitionName: null,\n            targetExtensionContainerGuid: null,\n            styles: null\n        };\n    }\n}\nRxViewDefinitionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionService, deps: [{ token: i1$2.HttpClient }, { token: i4.RxGuidService }, { token: i1$1.RxCommandFactoryService }, { token: RxViewDefinitionLocalizationService }, { token: i1$1.RxLocalizationService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewDefinitionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.HttpClient }, { type: i4.RxGuidService }, { type: i1$1.RxCommandFactoryService }, { type: RxViewDefinitionLocalizationService }, { type: i1$1.RxLocalizationService }]; } });\n\nconst viewDefinitionDataPageQuery = 'com.bmc.arsys.rx.application.view.datapage.ViewDefinitionDataPageQuery';\nclass RxViewDefinitionDataPageService extends DataPage {\n    constructor(injector) {\n        super(injector, viewDefinitionDataPageQuery, {\n            params: {\n                excludeExtensionViews: true\n            }\n        });\n        this.injector = injector;\n    }\n}\nRxViewDefinitionDataPageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionDataPageService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewDefinitionDataPageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionDataPageService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionDataPageService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });\n\nclass RxViewDefinitionCacheService {\n    constructor(rxViewDefinitionService, viewDefinitionDataPageService) {\n        this.rxViewDefinitionService = rxViewDefinitionService;\n        this.viewDefinitionDataPageService = viewDefinitionDataPageService;\n        this.viewDefinitionCache = new Map();\n        this.viewDefinitionNamesCache = new Map();\n        this.consumers = new Set();\n    }\n    getViewDefinitionNames(bundleId) {\n        if (!this.viewDefinitionNamesCache.has(bundleId)) {\n            const viewDefinitionNames$ = this.viewDefinitionDataPageService\n                .get({\n                headers: { 'default-bundle-scope': bundleId },\n                params: { propertySelection: ['name'], viewType: 'REGULAR' }\n            })\n                .pipe(pluck('data'), map$1((viewDefinitionsNames) => viewDefinitionsNames.map((viewDefinition) => viewDefinition.name)), shareReplay(1));\n            this.viewDefinitionNamesCache.set(bundleId, viewDefinitionNames$);\n        }\n        return this.viewDefinitionNamesCache.get(bundleId);\n    }\n    getViewDefinition(viewDefinitionName, options) {\n        if (!this.viewDefinitionCache.has(viewDefinitionName)) {\n            const viewDefinition$ = this.rxViewDefinitionService.get(viewDefinitionName, options).pipe(shareReplay(1));\n            this.viewDefinitionCache.set(viewDefinitionName, viewDefinition$);\n        }\n        return this.viewDefinitionCache.get(viewDefinitionName);\n    }\n    registerConsumer(consumerDestroy$) {\n        this.consumers.add(consumerDestroy$);\n        consumerDestroy$.subscribe(() => {\n            this.consumers.delete(consumerDestroy$);\n            if (isEmpty(this.consumers)) {\n                this.clearCache();\n            }\n        });\n    }\n    clearCache() {\n        this.viewDefinitionCache.clear();\n        this.viewDefinitionNamesCache.clear();\n    }\n}\nRxViewDefinitionCacheService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionCacheService, deps: [{ token: RxViewDefinitionService }, { token: RxViewDefinitionDataPageService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewDefinitionCacheService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionCacheService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionCacheService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxViewDefinitionService }, { type: RxViewDefinitionDataPageService }]; } });\n\nclass ViewModule {\n    static registerComponents(components) {\n        return {\n            ngModule: ViewModule,\n            providers: [\n                {\n                    provide: 'components',\n                    useValue: [...components]\n                }\n            ]\n        };\n    }\n}\nViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewModule });\nViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewModule, decorators: [{\n            type: NgModule\n        }] });\n\nclass RxViewActionService {\n    constructor(rxViewActionRegistryService, rxLogService) {\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxLogService = rxLogService;\n    }\n    execute(actionName, parameters) {\n        const viewActionDescriptor = this.rxViewActionRegistryService.get(actionName);\n        if (viewActionDescriptor) {\n            if (parameters.$condition$ !== false) {\n                return viewActionDescriptor.service.execute(parameters);\n            }\n            else {\n                this.rxLogService.debug(`View Action ${actionName} skipped.`);\n                return EMPTY;\n            }\n        }\n        else {\n            return throwError(`View Action ${actionName} not found.`);\n        }\n    }\n}\nRxViewActionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionService, deps: [{ token: RxViewActionRegistryService }, { token: i1$1.RxLogService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewActionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxViewActionRegistryService }, { type: i1$1.RxLogService }]; } });\n\nconst RX_VIEW_ACTION = {\n    viewActionNames: {\n        openView: 'rxOpenViewAction',\n        launchUrl: 'rxLaunchUrlAction'\n    }\n};\nvar OpenViewActionLaunchBehavior;\n(function (OpenViewActionLaunchBehavior) {\n    OpenViewActionLaunchBehavior[\"SameWindow\"] = \"sameWindow\";\n    OpenViewActionLaunchBehavior[\"NewWindow\"] = \"newWindow\";\n})(OpenViewActionLaunchBehavior || (OpenViewActionLaunchBehavior = {}));\nvar OpenViewActionModalSize;\n(function (OpenViewActionModalSize) {\n    OpenViewActionModalSize[\"Xsmall\"] = \"rx-xs\";\n    OpenViewActionModalSize[\"Small\"] = \"rx-sm\";\n    OpenViewActionModalSize[\"Medium\"] = \"rx-md\";\n    OpenViewActionModalSize[\"Large\"] = \"rx-lg\";\n    OpenViewActionModalSize[\"Xlarge\"] = \"rx-xl\";\n    OpenViewActionModalSize[\"Xxlarge\"] = \"rx-xxl\";\n    OpenViewActionModalSize[\"FullSize\"] = \"rx-full-size\";\n})(OpenViewActionModalSize || (OpenViewActionModalSize = {}));\nvar OpenViewActionType;\n(function (OpenViewActionType) {\n    OpenViewActionType[\"FullWidth\"] = \"fullWidth\";\n    OpenViewActionType[\"CenteredModal\"] = \"centeredModal\";\n    OpenViewActionType[\"DockedLeftModal\"] = \"dockedLeftModal\";\n    OpenViewActionType[\"DockedRightModal\"] = \"dockedRightModal\";\n})(OpenViewActionType || (OpenViewActionType = {}));\nconst RxViewAction = ɵmakeDecorator('RxViewAction');\n\nconst RX_LAUNCH_BEHAVIOR = {\n    newWindow: {\n        content: 'Open in a new tab',\n        value: 'newWindow',\n        target: '_blank'\n    },\n    sameWindow: {\n        content: 'Open in the same tab',\n        value: 'sameWindow',\n        target: '_self'\n    },\n    parentFrame: {\n        content: 'Open in the parent frame',\n        value: 'parentFrame',\n        target: '_parent'\n    },\n    windowFullBody: {\n        content: 'Open in the full body of the window',\n        value: 'windowFullBody',\n        target: '_top'\n    }\n};\n\nclass RxViewActionDesignAdapterService {\n    adaptDefinition(componentDefinition) {\n        var _a;\n        componentDefinition.propertiesByName.$condition$ = (_a = componentDefinition.propertiesByName.$condition$) !== null && _a !== void 0 ? _a : null;\n    }\n}\nRxViewActionDesignAdapterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionDesignAdapterService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewActionDesignAdapterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionDesignAdapterService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionDesignAdapterService, decorators: [{\n            type: Injectable\n        }] });\n\nclass ViewActionDesignModule {\n    constructor(rxViewComponentRegistryService, rxDefinitionAdapterRegistryService, rxViewActionDesignAdapterService) {\n        rxDefinitionAdapterRegistryService.registerDesignAdapter(RxViewComponentType.Action, rxViewActionDesignAdapterService);\n        rxViewComponentRegistryService.register({\n            type: RxViewComponentType.Action,\n            isDataComponent: true,\n            isContainerComponent: true\n        });\n    }\n}\nViewActionDesignModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionDesignModule, deps: [{ token: RxViewComponentRegistryService }, { token: i1$1.RxDefinitionAdapterRegistryService }, { token: RxViewActionDesignAdapterService }], target: i0.ɵɵFactoryTarget.NgModule });\nViewActionDesignModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionDesignModule });\nViewActionDesignModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionDesignModule, providers: [RxViewActionDesignAdapterService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewActionDesignModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [RxViewActionDesignAdapterService]\n                }]\n        }], ctorParameters: function () { return [{ type: RxViewComponentRegistryService }, { type: i1$1.RxDefinitionAdapterRegistryService }, { type: RxViewActionDesignAdapterService }]; } });\n\nclass RxViewActionDefinitionAdapterRegistryService {\n    constructor() {\n        this.runtimeAdapters = new Map();\n        this.designAdapters = new Map();\n    }\n    registerRuntimeAdapter(actionName, adapter) {\n        this.runtimeAdapters.set(actionName, adapter);\n    }\n    registerDesignAdapter(actionName, adapter) {\n        this.designAdapters.set(actionName, adapter);\n    }\n    getRuntimeAdapter(actionName) {\n        return this.runtimeAdapters.get(actionName);\n    }\n    getDesignAdapter(actionName) {\n        return this.designAdapters.get(actionName);\n    }\n}\nRxViewActionDefinitionAdapterRegistryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionDefinitionAdapterRegistryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewActionDefinitionAdapterRegistryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionDefinitionAdapterRegistryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionDefinitionAdapterRegistryService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nvar ViewDisplayType;\n(function (ViewDisplayType) {\n    ViewDisplayType[\"Preview\"] = \"preview\";\n    ViewDisplayType[\"Regular\"] = \"view\";\n    ViewDisplayType[\"NoShell\"] = \"iview\";\n})(ViewDisplayType || (ViewDisplayType = {}));\n\nclass RxViewActionUtilsService {\n    constructor(rxBundleCacheService, router, rxStringService, rxUrlUtilsService) {\n        this.rxBundleCacheService = rxBundleCacheService;\n        this.router = router;\n        this.rxStringService = rxStringService;\n        this.rxUrlUtilsService = rxUrlUtilsService;\n    }\n    generateViewUrl(viewDefinitionName, inputParams = {}) {\n        const currentUrl = this.router.routerState.snapshot.url;\n        let displayType = ViewDisplayType.Regular;\n        if (currentUrl.includes(`/${ViewDisplayType.Preview}/`)) {\n            displayType = ViewDisplayType.Preview;\n        }\n        else if (currentUrl.includes(`/${ViewDisplayType.NoShell}/`)) {\n            displayType = ViewDisplayType.NoShell;\n        }\n        return this.rxUrlUtilsService.buildUrl(`/${this.rxBundleCacheService.bundleId}/${displayType}/${viewDefinitionName}`, inputParams);\n    }\n    extractRecordIds(source) {\n        let ids = [];\n        if (isFunction(source.getSelectedRows)) {\n            ids = this.getIdsFromGridRows(source.getSelectedRows());\n        }\n        else if (isObject(source) && this.rxStringService.isNonEmptyString(source[RowDataItemIdFieldName])) {\n            ids.push(source[RowDataItemIdFieldName]);\n        }\n        else if (Array.isArray(source) && some(source, isObject)) {\n            ids = this.getIdsFromGridRows(source);\n        }\n        else if (this.rxStringService.isNonEmptyString(source)) {\n            ids.push(source);\n        }\n        else if (Array.isArray(source) && some(source, this.rxStringService.isNonEmptyString)) {\n            ids = clone(source);\n        }\n        return ids;\n    }\n    getIdsFromGridRows(rows) {\n        return flow((rowsArray) => map(rowsArray, RowDataItemIdFieldName), compact, uniq)(rows);\n    }\n}\nRxViewActionUtilsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionUtilsService, deps: [{ token: i1$1.RxBundleCacheService }, { token: i2.Router }, { token: i4.RxStringService }, { token: i4.RxUrlUtilsService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewActionUtilsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionUtilsService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewActionUtilsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxBundleCacheService }, { type: i2.Router }, { type: i4.RxStringService }, { type: i4.RxUrlUtilsService }]; } });\n\nclass RxOldViewLayoutAdapterService {\n    constructor(rxJsonParserService) {\n        this.rxJsonParserService = rxJsonParserService;\n    }\n    convertLayout(componentDefinitionItem) {\n        if (this.isViewDefinitionItem(componentDefinitionItem)) {\n            this.convertViewLayout(componentDefinitionItem.componentDefinition);\n        }\n        else if (this.isContainerComponentDefinition(componentDefinitionItem.componentDefinition)) {\n            this.convertComponentLayout(componentDefinitionItem.componentDefinition);\n        }\n    }\n    isViewDefinitionItem(componentDefinition) {\n        return !componentDefinition.parentComponentDefinition;\n    }\n    convertViewLayout(viewDefinition) {\n        const layout = this.rxJsonParserService.tryParseJson(viewDefinition.layout);\n        if (isNil(layout.layoutTemplate) || get(layout, 'columns[0].role')) {\n            // for views from new designer, or for views with 1 or more columns\n            this.convertComponentLayout(viewDefinition);\n        }\n        else {\n            // for views with header and/or footer\n            const childrenWithRoles = get(layout, 'columns[0].children', []);\n            const outlets = childrenWithRoles.map((child, i) => {\n                let outletItem;\n                if (child.role) {\n                    outletItem = {\n                        name: child.role === ViewLayoutRole.Content ? RX_VIEW_DEFINITION.defaultOutletName : child.role,\n                        static: child.static || null,\n                        height: child.height || null,\n                        role: child.role || null,\n                        columns: (child.columns || []).map(this.convertColumns.bind(this))\n                    };\n                }\n                else {\n                    // creating outlets for case when components are sibling to header/footer\n                    outletItem = {\n                        name: `outlet-${i}`,\n                        columns: [{ children: [child.componentDefinitionId] }]\n                    };\n                }\n                return outletItem;\n            });\n            const newLayout = { outlets };\n            viewDefinition.layout = JSON.stringify(newLayout);\n        }\n    }\n    convertComponentLayout(componentDefinition) {\n        if (componentDefinition.layout) {\n            const layout = this.rxJsonParserService.tryParseJson(componentDefinition.layout);\n            // add columns to views created in new designer\n            // todo remove after new designer will save layouts with columns\n            const children = get(layout, 'outlets[0].children');\n            if (children) {\n                componentDefinition.layout = JSON.stringify(this.convertNewDesignerLayout(layout));\n            }\n            if (layout && layout.componentDefinitionId) {\n                const newLayout = {\n                    outlets: [\n                        {\n                            name: RX_VIEW_DEFINITION.defaultOutletName,\n                            columns: layout.columns.map(this.convertColumns.bind(this))\n                        }\n                    ]\n                };\n                componentDefinition.layout = JSON.stringify(newLayout);\n            }\n        }\n    }\n    convertNewDesignerLayout(layout) {\n        const children = get(layout, 'outlets[0].children');\n        if (children) {\n            layout.outlets[0].columns = [\n                {\n                    children\n                }\n            ];\n            delete layout.outlets[0].children;\n        }\n        return layout;\n    }\n    convertColumns(column) {\n        // rx-tab-container was placed 1 lever deeper in the layout of rx-tab-panel in views\n        // created in AngularJS view designer. 'columns[0].children[0]' should extract it.\n        return {\n            span: column.span || null,\n            cssClass: `col-sm-${column.span || 12}`,\n            children: column.children.map((child) => get(child, 'columns[0].children[0].componentDefinitionId') || child.componentDefinitionId)\n        };\n    }\n    isContainerComponentDefinition(componentDefinition) {\n        return componentDefinition.componentDefinitions !== undefined;\n    }\n}\nRxOldViewLayoutAdapterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOldViewLayoutAdapterService, deps: [{ token: i4.RxJsonParserService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxOldViewLayoutAdapterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOldViewLayoutAdapterService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxOldViewLayoutAdapterService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i4.RxJsonParserService }]; } });\n\nconst RX_SHELL = {\n    componentName: 'rx-shell',\n    navBar: {\n        menuItem: 'rx-shell-menu-item',\n        action: 'rx-shell-action',\n        menuGroup: 'rx-shell-menu-group',\n        userMenu: 'rx-shell-user-menu'\n    },\n    actions: {\n        launchURL: 'rxShellLaunchUrlAction',\n        navigateToView: 'rxShellNavigateToViewAction',\n        navigateToState: 'rxShellNavigateToStateAction',\n        navigateToSmartReporting: 'rxShellNavigateToSmartReportingAction'\n    },\n    outlets: {\n        actions: 'actions'\n    }\n};\n\nclass RxShellService {\n    constructor(translateService, rxCurrentUserService, rxExpressionEvaluatorService, rxJsonParserService, rxNotificationService, rxObjectUtilsService, rxUrlUtilsService, rxViewDefinitionCacheService, rxViewDefinitionParserService, rxOldViewLayoutAdapterService, rxFeatureService) {\n        this.translateService = translateService;\n        this.rxCurrentUserService = rxCurrentUserService;\n        this.rxExpressionEvaluatorService = rxExpressionEvaluatorService;\n        this.rxJsonParserService = rxJsonParserService;\n        this.rxNotificationService = rxNotificationService;\n        this.rxObjectUtilsService = rxObjectUtilsService;\n        this.rxUrlUtilsService = rxUrlUtilsService;\n        this.rxViewDefinitionCacheService = rxViewDefinitionCacheService;\n        this.rxViewDefinitionParserService = rxViewDefinitionParserService;\n        this.rxOldViewLayoutAdapterService = rxOldViewLayoutAdapterService;\n        this.rxFeatureService = rxFeatureService;\n        this.menuItemId = 0;\n        this.navigateToSmartReportingSubject = new Subject();\n        this.navigateToViewSubject = new Subject();\n        this.openUserPreferencesSubject = new Subject();\n        this.openUserAvailabilitySubject = new Subject();\n        this.shellConfigSubject = new ReplaySubject(1);\n        this.openGainsightPreferencesSubject = new Subject();\n        this.navigateToSmartReporting$ = this.navigateToSmartReportingSubject.asObservable();\n        this.navigateToView$ = this.navigateToViewSubject.asObservable();\n        this.openUserPreferences$ = this.openUserPreferencesSubject.asObservable();\n        this.openUserAvailability$ = this.openUserAvailabilitySubject.asObservable();\n        this.shellConfig$ = this.shellConfigSubject.asObservable();\n        this.openGainsightPreferences$ = this.openGainsightPreferencesSubject.asObservable();\n    }\n    resetMenuItemCount() {\n        this.menuItemId = 0;\n    }\n    updateMenuItemCount() {\n        return this.menuItemId++;\n    }\n    getChildGuids(layout, outletName = RX_VIEW_DEFINITION.defaultOutletName) {\n        return RxViewLayout.getViewLayoutChildGuids(layout, outletName);\n    }\n    getIconClass(icon, left = true) {\n        const iconId = get(RX_LEGACY_ICONS, icon, icon);\n        return iconId ? `d-icon-${left ? 'left-' : ''}` + iconId : '';\n    }\n    getShellConfig(bundleId) {\n        const navigationBarItems = [];\n        const flattenedMenuItems = [];\n        const navigationActions = [];\n        const preferenceMenuItem = {\n            name: this.translateService.instant('com.bmc.arsys.rx.client.shell.my-preferences.label'),\n            action: this.openUserPreferences.bind(this),\n            className: 'd-icon-wrench_o',\n            hide: false,\n            subMenu: []\n        };\n        const gainsightPreferenceMenuItem = {\n            name: this.translateService.instant('com.bmc.arsys.rx.client.shell.analytics.label'),\n            action: this.openGainsightPreferences.bind(this),\n            className: 'd-icon-app_chart_bar',\n            hide: false,\n            id: 0,\n            subMenu: []\n        };\n        const myAvailabilityMenuItem = {\n            name: this.translateService.instant('com.bmc.arsys.rx.client.shell.my-availability.label'),\n            action: this.openUserAvailability.bind(this),\n            hide: false,\n            className: 'd-icon-user_clock_o',\n            subMenu: []\n        };\n        let navBarProperties;\n        let userMenu = null;\n        this.currentUser = this.rxCurrentUserService.get();\n        return this.rxViewDefinitionCacheService\n            .getViewDefinition(`${bundleId}:${RX_APPLICATION.shellDefinitionName}`)\n            .pipe(switchMap((shellDefinition) => {\n            this.rxViewDefinitionParserService\n                .getComponents(shellDefinition)\n                .forEach((definition) => this.rxOldViewLayoutAdapterService.convertLayout(definition));\n            if (shellDefinition && shellDefinition.componentDefinitions[0]) {\n                const navBar = shellDefinition.componentDefinitions[0];\n                const layout = this.rxJsonParserService.tryParseJson(navBar.layout);\n                navBarProperties = navBar.propertiesByName || {\n                    allowAppSwitching: null,\n                    globalSearchUseDefault: null,\n                    globalSearchDisabled: null,\n                    globalSearchRecords: null,\n                    globalSearchCustomSearchState: null\n                };\n                forEach(this.getChildGuids(layout), (guid) => {\n                    const menuItemDefinition = find(navBar.componentDefinitions, {\n                        guid\n                    });\n                    if (menuItemDefinition) {\n                        let menuItem;\n                        switch (menuItemDefinition.type) {\n                            case RX_SHELL.navBar.menuGroup:\n                            case RX_SHELL.navBar.userMenu:\n                                const subMenu = [];\n                                const childLayout = this.rxJsonParserService.tryParseJson(menuItemDefinition.layout) ||\n                                    RxViewLayout.getViewLayoutForDefaultOutlet(menuItemDefinition.componentDefinitions.map((item) => item.guid));\n                                forEach(this.getChildGuids(childLayout), (childGuid) => {\n                                    const subItemDefinition = find(menuItemDefinition.componentDefinitions, {\n                                        guid: childGuid\n                                    });\n                                    if (subItemDefinition) {\n                                        const subItem = this.getMenuProperties(subItemDefinition);\n                                        if (!isEmpty(subItem)) {\n                                            // concatenating className with listClassName, as listClassName not available for subMenu\n                                            if (menuItemDefinition.type === RX_SHELL.navBar.userMenu) {\n                                                subItem.className += ' ' + subItem.listClassName;\n                                            }\n                                            else {\n                                                flattenedMenuItems.push(subItem);\n                                            }\n                                            subMenu.push(subItem);\n                                        }\n                                    }\n                                });\n                                if (subMenu.length > 0) {\n                                    // LMA:: TODO:: Even if we set the className in a first level menu the icon is not displayed\n                                    menuItem = {\n                                        hide: has(menuItemDefinition.propertiesByName, 'hidden')\n                                            ? this.rxJsonParserService.tryParseJson(menuItemDefinition.propertiesByName.hidden)\n                                            : false,\n                                        listClassName: get(menuItemDefinition.propertiesByName, 'styles'),\n                                        className: this.getIconClass(get(menuItemDefinition.propertiesByName, 'menuItemIcon')),\n                                        name: menuItemDefinition.propertiesByName.menuGroupName,\n                                        subMenu: subMenu,\n                                        id: this.updateMenuItemCount()\n                                    };\n                                }\n                                break;\n                            case RX_SHELL.navBar.menuItem:\n                                menuItem = this.getMenuProperties(menuItemDefinition);\n                                break;\n                        }\n                        if (!isEmpty(menuItem)) {\n                            if (menuItemDefinition.type === RX_SHELL.navBar.userMenu) {\n                                userMenu = menuItem;\n                            }\n                            else {\n                                flattenedMenuItems.push(menuItem);\n                                navigationBarItems.push(menuItem);\n                            }\n                        }\n                    }\n                });\n                forEach(this.getChildGuids(layout, RX_SHELL.outlets.actions), (guid) => {\n                    const menuItemDefinition = navBar.componentDefinitions.find((definition) => definition.guid === guid);\n                    if (menuItemDefinition) {\n                        navigationActions.push(this.getMenuProperties(menuItemDefinition));\n                    }\n                });\n            }\n            if (this.rxCurrentUserService.isSupportStaff()) {\n                myAvailabilityMenuItem.id = this.updateMenuItemCount();\n                if (!userMenu) {\n                    userMenu = {\n                        subMenu: []\n                    };\n                }\n                userMenu.subMenu.push(myAvailabilityMenuItem);\n            }\n            if (this.currentUser.fullName) {\n                preferenceMenuItem.id = this.updateMenuItemCount();\n                if (!userMenu) {\n                    userMenu = {\n                        subMenu: []\n                    };\n                }\n                userMenu.subMenu.push(preferenceMenuItem);\n            }\n            if (this.rxFeatureService.isFeatureEnabled('DRD21-11744')) {\n                userMenu.subMenu.push(gainsightPreferenceMenuItem);\n            }\n            const rxData = {\n                flattenedMenuItems,\n                navigationBarItems,\n                navigationActions,\n                userMenu: userMenu || [],\n                allowAppSwitching: has(navBarProperties, 'allowAppSwitching')\n                    ? this.rxJsonParserService.tryParseJson(navBarProperties.allowAppSwitching)\n                    : false,\n                globalSearchUseDefault: has(navBarProperties, 'globalSearchUseDefault')\n                    ? this.rxJsonParserService.tryParseJson(navBarProperties.globalSearchUseDefault)\n                    : true,\n                globalSearchCustomSearchState: navBarProperties.globalSearchCustomSearchState || '',\n                globalSearchDisabled: has(navBarProperties, 'globalSearchDisabled')\n                    ? this.rxJsonParserService.tryParseJson(navBarProperties.globalSearchDisabled)\n                    : true,\n                globalSearchRecords: has(navBarProperties, 'globalSearchRecords')\n                    ? this.rxJsonParserService.tryParseJson(navBarProperties.globalSearchRecords)\n                    : [],\n                // LMA:: TODO:: Later... See:\n                // standardlib/src/main/webapp/scripts/view-components/shell/shell-config.resource.js\n                // ,\n                // globalSearchState: rxSearchResultsState.get(),\n                // administrationSettingsState: rxAdministrationSettingsState.get()\n                globalSearchState: 'globalSearchState',\n                administrationSettingsState: 'adminSettingsState'\n            };\n            // In case server already had previously saved shell config with global search not configured,\n            // we want to disable global search by default\n            if (!rxData.globalSearchDisabled &&\n                ((rxData.globalSearchUseDefault && rxData.globalSearchRecords.length === 0) ||\n                    (!rxData.globalSearchUseDefault && rxData.globalSearchCustomSearchState.length === 0))) {\n                rxData.globalSearchDisabled = true;\n            }\n            this.shellConfigSubject.next(rxData);\n            return of(rxData);\n        }));\n    }\n    openUserPreferences() {\n        this.openUserPreferencesSubject.next();\n    }\n    openGainsightPreferences() {\n        this.openGainsightPreferencesSubject.next();\n    }\n    openUserAvailability() {\n        this.openUserAvailabilitySubject.next();\n    }\n    navigateToView(viewParams) {\n        this.navigateToViewSubject.next(viewParams);\n    }\n    navigateToState() {\n        this.rxNotificationService.addWarningMessage('This feature is not supported.');\n    }\n    navigateToSmartReporting() {\n        this.navigateToSmartReportingSubject.next();\n    }\n    getMenuProperties(itemDefinition) {\n        const menuItem = {};\n        const properties = this.rxObjectUtilsService.expandProperties(itemDefinition.propertiesByName);\n        menuItem.type = properties.actionName;\n        menuItem.id = this.updateMenuItemCount();\n        menuItem.closeOnClick = true;\n        switch (properties.actionName) {\n            case RX_SHELL.actions.launchURL:\n                menuItem.name = properties.menuItemName;\n                menuItem.target =\n                    RX_LAUNCH_BEHAVIOR[properties.launchBehavior || OpenViewActionLaunchBehavior.NewWindow].target;\n                if (itemDefinition.type === RX_SHELL.navBar.action) {\n                    menuItem.action = () => {\n                        window.open(properties.url, menuItem.target);\n                    };\n                }\n                else {\n                    menuItem.link = properties.url;\n                }\n                break;\n            case RX_SHELL.actions.navigateToView:\n                const viewParams = properties.viewParams;\n                forEach(viewParams, (expression, parameterName) => {\n                    const paramValue = this.rxExpressionEvaluatorService.tryEvaluate(expression, {\n                        keywords: {\n                            userId: this.currentUser.userId,\n                            personId: this.currentUser.personInstanceId\n                        }\n                    });\n                    viewParams[parameterName] = paramValue;\n                    return paramValue;\n                });\n                const url = this.rxUrlUtilsService.buildUrl(`${properties.viewDefinitionName}`, viewParams);\n                menuItem.name = properties.menuItemName;\n                menuItem.viewUrl = url;\n                menuItem.action = this.navigateToView.bind(this, menuItem);\n                menuItem.openViewParams = {\n                    viewDefinitionName: properties.viewDefinitionName,\n                    presentation: Object.assign({ type: OpenViewActionType.FullWidth, launchBehavior: OpenViewActionLaunchBehavior.SameWindow }, get(properties, 'presentation', {})),\n                    viewParams\n                };\n                break;\n            case RX_SHELL.actions.navigateToState:\n                // LMA:: TODO:: Implement it later\n                // if (!isRuntime || rxAuthorization.isStateAuthorized(properties.state)) {\n                menuItem.name = properties.menuItemName;\n                const stateParameters = {\n                    state: properties.state,\n                    menuItemId: menuItem.id\n                };\n                menuItem.stateParameters = stateParameters;\n                menuItem.action = this.navigateToState.bind(this, stateParameters);\n                break;\n            case RX_SHELL.actions.navigateToSmartReporting:\n                menuItem.name = properties.menuItemName;\n                menuItem.action = this.navigateToSmartReporting.bind(this);\n                break;\n        }\n        menuItem.hide = has(properties, 'hidden') ? this.rxJsonParserService.tryParseJson(properties.hidden) : false;\n        menuItem.listClassName = properties.styles;\n        menuItem.className = this.getIconClass(properties.menuItemIcon, itemDefinition.type !== RX_SHELL.navBar.action);\n        return menuItem;\n    }\n}\nRxShellService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxShellService, deps: [{ token: i1.TranslateService }, { token: i1$1.RxCurrentUserService }, { token: RxExpressionEvaluatorService }, { token: i4.RxJsonParserService }, { token: i1$1.RxNotificationService }, { token: i4.RxObjectUtilsService }, { token: i4.RxUrlUtilsService }, { token: RxViewDefinitionCacheService }, { token: RxViewDefinitionParserService }, { token: RxOldViewLayoutAdapterService }, { token: i1$1.RxFeatureService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxShellService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxShellService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxShellService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.TranslateService }, { type: i1$1.RxCurrentUserService }, { type: RxExpressionEvaluatorService }, { type: i4.RxJsonParserService }, { type: i1$1.RxNotificationService }, { type: i4.RxObjectUtilsService }, { type: i4.RxUrlUtilsService }, { type: RxViewDefinitionCacheService }, { type: RxViewDefinitionParserService }, { type: RxOldViewLayoutAdapterService }, { type: i1$1.RxFeatureService }]; } });\n\nclass RxHomepageResolver {\n    constructor(rxGlobalCacheService, rxShellService, rxTreeService, router, rxSessionService, rxComponentCanDeactivateGuard, rxLocalizationService) {\n        this.rxGlobalCacheService = rxGlobalCacheService;\n        this.rxShellService = rxShellService;\n        this.rxTreeService = rxTreeService;\n        this.router = router;\n        this.rxSessionService = rxSessionService;\n        this.rxComponentCanDeactivateGuard = rxComponentCanDeactivateGuard;\n        this.rxLocalizationService = rxLocalizationService;\n        this.unknownApplicationRoute = '/unknown-application';\n    }\n    canActivate(route, state) {\n        const bundleId = route.paramMap.get('bundleId');\n        const applicationId = head(route.url).path;\n        const useDefaultLang = applicationId === RX_APPLICATION.innovationStudioBundleId;\n        const initTranslations$ = this.rxLocalizationService.initTranslations(useDefaultLang);\n        // waiting for translations to resolve to make getShellConfig call with correct lang\n        return combineLatest([this.rxSessionService.sessionActive$, initTranslations$]).pipe(switchMap(() => {\n            return this.rxGlobalCacheService\n                .getBundleDescriptors()\n                .pipe(concatMap((bundleDescriptors) => this.getBundleUrl(bundleDescriptors, bundleId)));\n        }), tap(() => this.rxComponentCanDeactivateGuard.disable()));\n    }\n    getBundleUrl(bundleDescriptors, bundleId) {\n        if (findIndex(bundleDescriptors, { id: bundleId }) !== -1) {\n            return this.rxShellService.getShellConfig(bundleId).pipe(map$1((shellConfiguration) => {\n                const menuItems = get(this.rxTreeService.flattenTree(shellConfiguration, 'navigationBarItems'), '[0].flattenedMenuItems');\n                const defaultView = find(menuItems, {\n                    type: RX_SHELL.actions.navigateToView\n                });\n                return this.generateUrl(defaultView, bundleId);\n            }));\n        }\n        else {\n            return of(this.router.parseUrl(this.unknownApplicationRoute));\n        }\n    }\n    generateUrl(defaultView, bundleId) {\n        return this.router.parseUrl(defaultView\n            ? `/${bundleId}/view/${defaultView.viewUrl}`\n            : `/${bundleId}/view/${RX_APPLICATION.settingsBundleId}:Unknown Default View Error)}`);\n    }\n}\nRxHomepageResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxHomepageResolver, deps: [{ token: i1$1.RxGlobalCacheService }, { token: RxShellService }, { token: i4.RxTreeService }, { token: i2.Router }, { token: i1$1.RxSessionService }, { token: i1$1.RxComponentCanDeactivateGuard }, { token: i1$1.RxLocalizationService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxHomepageResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxHomepageResolver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxHomepageResolver, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.RxGlobalCacheService }, { type: RxShellService }, { type: i4.RxTreeService }, { type: i2.Router }, { type: i1$1.RxSessionService }, { type: i1$1.RxComponentCanDeactivateGuard }, { type: i1$1.RxLocalizationService }]; } });\n\nclass RxViewComponentResolver {\n    constructor(rxViewComponentRegistryService) {\n        this.rxViewComponentRegistryService = rxViewComponentRegistryService;\n    }\n    resolve() {\n        return this.rxViewComponentRegistryService.resolveAsyncDescriptors();\n    }\n}\nRxViewComponentResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewComponentResolver, deps: [{ token: RxViewComponentRegistryService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewComponentResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewComponentResolver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewComponentResolver, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: RxViewComponentRegistryService }]; } });\n\nclass RxDeviceDetectionService {\n    constructor(adaptDeviceDetectionService) {\n        var _a;\n        this.adaptDeviceDetectionService = adaptDeviceDetectionService;\n        this.devices = [\n            {\n                type: RxDevice.Desktop,\n                isDetected: this.adaptDeviceDetectionService.deviceDesktop()\n            },\n            {\n                type: RxDevice.Tablet,\n                isDetected: this.adaptDeviceDetectionService.deviceTablet()\n            },\n            {\n                type: RxDevice.Mobile,\n                isDetected: this.adaptDeviceDetectionService.deviceMobile()\n            }\n        ];\n        this.currentDevice = (_a = this.devices.find((item) => item.isDetected)) === null || _a === void 0 ? void 0 : _a.type;\n    }\n}\nRxDeviceDetectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDeviceDetectionService, deps: [{ token: i1$3.AdaptDeviceDetectionService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxDeviceDetectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDeviceDetectionService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxDeviceDetectionService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1$3.AdaptDeviceDetectionService }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ApplyGridFilterMode, BwfViewComponentType, LayoutTypes, OpenViewActionLaunchBehavior, OpenViewActionModalSize, OpenViewActionType, RX_AVAILABLE_ON_DEVICES_ALL_VALUE, RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE, RX_AVAILABLE_ON_DEVICES_PROP_DESC, RX_AVAILABLE_ON_DEVICES_PROP_NAME, RX_DISABLED_PROP_DEFAULT_VALUE, RX_DISABLED_PROP_DESC, RX_DISABLED_PROP_NAME, RX_EXPRESSION_EVALUATOR, RX_EXPRESSION_FUNCTIONS, RX_HIDDEN_PROP_DEFAULT_VALUE, RX_HIDDEN_PROP_DESC, RX_HIDDEN_PROP_NAME, RX_LAUNCH_BEHAVIOR, RX_LEGACY_ICONS, RX_RICH_TEXT, RX_SHELL, RX_STANDARD_PROPS_DEFAULT_VALUES, RX_STANDARD_PROPS_DESC, RX_STYLES_PROP_DEFAULT_VALUE, RX_STYLES_PROP_DESC, RX_STYLES_PROP_NAME, RX_SUPPORTED_FUNCTION, RX_VIEW_ACTION, RX_VIEW_DEFINITION, RX_VIEW_LAYOUTS, RecordGridFilterDataLogic, RecordGridFilterOperator, RecordGridNamedFilterOptionKey, RowDataItemIdFieldName, RxCkEditorConfiguratorService, RxDefaultExpressionEvaluatorService, RxDefaultExpressionValidatorService, RxDevice, RxDeviceDetectionService, RxExpressionEvaluatorService, RxExpressionHelperService, RxExpressionSyntaxTreeBuilderService, RxHomepageResolver, RxOldViewLayoutAdapterService, RxRecordQueryExpressionEvaluatorService, RxShellService, RxViewAction, RxViewActionDefinitionAdapterRegistryService, RxViewActionRegistryService, RxViewActionService, RxViewActionUtilsService, RxViewComponent, RxViewComponentRegistryService, RxViewComponentResolver, RxViewComponentType, RxViewDefinitionCacheService, RxViewDefinitionDataPageService, RxViewDefinitionLocalizationService, RxViewDefinitionParserService, RxViewDefinitionService, RxViewLayout, ViewActionDesignModule, ViewComponentPropertyType, ViewDefinitionType, ViewDisplayType, ViewLayoutRole, ViewModule, getLayoutChecksum, renameViewDefinitionCommand, revertCustomizationResourceType };\n//# sourceMappingURL=helix-platform-view-api.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}