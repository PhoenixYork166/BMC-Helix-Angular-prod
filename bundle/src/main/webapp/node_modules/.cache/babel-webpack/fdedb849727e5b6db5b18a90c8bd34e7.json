{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, PLATFORM_ID, forwardRef, Component, Inject, Input, ViewChild, Output, Directive, HostListener, Injectable, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isPlatformServer, isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\nconst _c0 = [\"captcha\"];\nconst CAPTCHA_CONFIG = new InjectionToken('CAPTCHA_CONFIG');\n\n/**\r\n * Load the hCaptcha script by appending a script element to the head element.\r\n * The script won't be loaded again if it has already been loaded.\r\n * Async and defer are set to prevent blocking the renderer while loading hCaptcha.\r\n */\nfunction loadHCaptcha(languageCode) {\n  return new Observable(observer => {\n    // No window object (ssr)\n    if (!window) {\n      return;\n    }\n    // The hCaptcha script has already been loaded\n    if (typeof window.hcaptcha !== 'undefined') {\n      observer.next();\n      observer.complete();\n      return;\n    }\n    let src = 'https://hcaptcha.com/1/api.js?render=explicit';\n    // Set language code\n    if (languageCode) {\n      src += `&hl=${languageCode}`;\n    }\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true;\n    script.defer = true;\n    script.onerror = e => observer.error(e);\n    script.onload = () => {\n      observer.next();\n      observer.complete();\n    };\n    document.head.appendChild(script);\n  });\n}\nclass NgHcaptchaComponent {\n  constructor(config, zone, platformId) {\n    this.config = config;\n    this.zone = zone;\n    this.platformId = platformId;\n    this.verify = new EventEmitter();\n    this.expired = new EventEmitter();\n    this.error = new EventEmitter();\n    this.onChange = () => {};\n    this.onTouched = () => {};\n  }\n  // Initialization\n  ngOnInit() {\n    // Use language code from module config when input parameter is not set\n    if (!this.languageCode) {\n      this.languageCode = this.config.languageCode;\n    }\n    // Do not load hCaptcha if platform is server\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    this.captcha$ = loadHCaptcha(this.languageCode).subscribe(() => {\n      setTimeout(context => {\n        // Configure hCaptcha\n        const options = {\n          sitekey: context.siteKey || context.config.siteKey,\n          theme: context.theme,\n          size: context.size,\n          tabindex: context.tabIndex,\n          callback: res => {\n            context.zone.run(() => context.onVerify(res));\n          },\n          'expired-callback': res => {\n            context.zone.run(() => context.onExpired(res));\n          },\n          'error-callback': err => {\n            context.zone.run(() => context.onError(err));\n          }\n        };\n        // Render hCaptcha using the defined options\n        context.widgetId = window.hcaptcha.render(context.captcha.nativeElement, options);\n      }, 50, this);\n    }, error => {\n      console.error('Failed to load hCaptcha script', error);\n    });\n  }\n  ngOnDestroy() {\n    this.captcha$.unsubscribe();\n  }\n  // ControlValueAccessor implementation\n  writeValue(value) {\n    // Needs to be implemented to make the FormGroup's reset function work\n    this.value = value;\n    // Reset hCaptcha.\n    // We need to check whether window.hcaptcha is defined because\n    // writeValue(value: any) can be called before hCaptcha has been intialized.\n    if (isPlatformBrowser(this.platformId) && !this.value && window.hcaptcha) {\n      window.hcaptcha.reset(this.widgetId);\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  reset() {\n    window.hcaptcha.reset(this.widgetId);\n  }\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    this._value = value;\n    this.onChange(value);\n    this.onTouched();\n  }\n  // Internal functions\n  /**\r\n   * Is called when the verification was successful\r\n   * @param response The verification token\r\n   */\n  onVerify(response) {\n    this.value = response;\n    this.verify.emit(response);\n  }\n  /**\r\n   * Is called when the verification has expired\r\n   * @param response The verification response\r\n   */\n  onExpired(response) {\n    this.expired.emit(response);\n  }\n  /**\r\n   * Is called when an error occurs during the verification process\r\n   * @param error The error returned by hCaptcha\r\n   */\n  onError(error) {\n    this.error.emit(error);\n  }\n}\nNgHcaptchaComponent.ɵfac = function NgHcaptchaComponent_Factory(t) {\n  return new (t || NgHcaptchaComponent)(i0.ɵɵdirectiveInject(CAPTCHA_CONFIG), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nNgHcaptchaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgHcaptchaComponent,\n  selectors: [[\"ng-hcaptcha\"]],\n  viewQuery: function NgHcaptchaComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captcha = _t.first);\n    }\n  },\n  inputs: {\n    siteKey: \"siteKey\",\n    theme: \"theme\",\n    size: \"size\",\n    tabIndex: \"tabIndex\",\n    languageCode: \"languageCode\"\n  },\n  outputs: {\n    verify: \"verify\",\n    expired: \"expired\",\n    error: \"error\"\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgHcaptchaComponent),\n    multi: true\n  }])],\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"h-captcha\"], [\"captcha\", \"\"]],\n  template: function NgHcaptchaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgHcaptchaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ng-hcaptcha',\n      template: '<div #captcha class=\"h-captcha\"></div>',\n      styles: [],\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => NgHcaptchaComponent),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CAPTCHA_CONFIG]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    siteKey: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    languageCode: [{\n      type: Input\n    }],\n    captcha: [{\n      type: ViewChild,\n      args: ['captcha', {\n        static: true\n      }]\n    }],\n    verify: [{\n      type: Output\n    }],\n    expired: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }]\n  });\n})();\nclass NgHcaptchaInvisibleButtonDirective {\n  constructor(elRef, config, zone, platformId) {\n    this.elRef = elRef;\n    this.config = config;\n    this.zone = zone;\n    this.platformId = platformId;\n    this.verify = new EventEmitter();\n    this.expired = new EventEmitter();\n    this.error = new EventEmitter();\n    this.click = new EventEmitter();\n  }\n  ngOnInit() {\n    // Use language code from module config when input parameter is not set\n    if (!this.languageCode) {\n      this.languageCode = this.config.languageCode;\n    }\n    // Do not load hCaptcha if platform is server\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    // Load the hCaptcha script\n    this.captcha$ = loadHCaptcha(this.languageCode).subscribe(() => {\n      setTimeout(context => {\n        // Configure hCaptcha\n        const options = {\n          sitekey: context.siteKey || context.config.siteKey,\n          size: 'invisible',\n          callback: res => {\n            context.zone.run(() => context.onVerify(res));\n          },\n          'expired-callback': res => {\n            context.zone.run(() => context.onExpired(res));\n          },\n          'error-callback': err => {\n            context.zone.run(() => context.onError(err));\n          }\n        };\n        // Render hCaptcha using the defined options\n        context.widgetId = window.hcaptcha.render(context.elRef.nativeElement, options);\n      }, 50, this);\n    });\n  }\n  ngOnDestroy() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    this.captcha$.unsubscribe();\n  }\n  onClick(event) {\n    if (event.hCaptchaToken) {\n      return;\n    }\n    this.lastClickEvent = event;\n    event.stopPropagation();\n    event.preventDefault();\n    event.cancelBubble = true;\n    event.stopImmediatePropagation();\n    // Only execute hCaptcha if platform is browser\n    if (isPlatformBrowser(this.platformId)) {\n      window.hcaptcha.execute(this.widgetId);\n    }\n    return false;\n  }\n  reset() {\n    window.hcaptcha.reset(this.widgetId);\n  }\n  /**\r\n   * Is called when the verification was successful\r\n   * @param response The verification token\r\n   */\n  onVerify(response) {\n    const event = this.lastClickEvent || {};\n    event.hCaptchaToken = response;\n    this.click.emit(event);\n    this.verify.emit(response);\n  }\n  /**\r\n   * Is called when the verification has expired\r\n   * @param response The verification response\r\n   */\n  onExpired(response) {\n    this.expired.emit(response);\n  }\n  /**\r\n   * Is called when an error occurs during the verification process\r\n   * @param error The error returned by hCaptcha\r\n   */\n  onError(error) {\n    this.error.emit(error);\n  }\n}\nNgHcaptchaInvisibleButtonDirective.ɵfac = function NgHcaptchaInvisibleButtonDirective_Factory(t) {\n  return new (t || NgHcaptchaInvisibleButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CAPTCHA_CONFIG), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nNgHcaptchaInvisibleButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgHcaptchaInvisibleButtonDirective,\n  selectors: [[\"\", \"ngHcaptchaInvisibleButton\", \"\"]],\n  hostBindings: function NgHcaptchaInvisibleButtonDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function NgHcaptchaInvisibleButtonDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      });\n    }\n  },\n  inputs: {\n    siteKey: \"siteKey\",\n    languageCode: \"languageCode\"\n  },\n  outputs: {\n    verify: \"verify\",\n    expired: \"expired\",\n    error: \"error\",\n    click: \"click\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgHcaptchaInvisibleButtonDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngHcaptchaInvisibleButton]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CAPTCHA_CONFIG]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    siteKey: [{\n      type: Input\n    }],\n    languageCode: [{\n      type: Input\n    }],\n    verify: [{\n      type: Output\n    }],\n    expired: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    click: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\nclass NgHcaptchaService {\n  constructor(captchaConfig) {\n    this.captchaConfig = captchaConfig;\n  }\n  verify() {\n    return new Observable(subscriber => {\n      loadHCaptcha(this.captchaConfig.languageCode).subscribe(() => {\n        setTimeout(context => {\n          // Create hCaptcha element\n          if (!this.hCaptchaElement) {\n            this.hCaptchaElement = document.createElement('div');\n            document.body.appendChild(this.hCaptchaElement);\n          }\n          // Render hCaptcha using the defined options\n          if (!this.hCaptchaWidgetId) {\n            // Configure hCaptcha\n            const options = {\n              sitekey: this.captchaConfig.siteKey,\n              size: 'invisible',\n              callback: res => {\n                subscriber.next(res);\n                subscriber.complete();\n                this.resetHcaptcha();\n              },\n              'expired-callback': res => {\n                subscriber.error(res);\n                this.resetHcaptcha();\n              },\n              'error-callback': err => {\n                subscriber.error(err);\n                this.resetHcaptcha();\n              }\n            };\n            this.hCaptchaWidgetId = window.hcaptcha.render(this.hCaptchaElement, options);\n          }\n          // Immediately execute hCaptcha\n          window.hcaptcha.execute(this.hCaptchaWidgetId);\n        }, 50, this);\n      });\n    });\n  }\n  resetHcaptcha() {\n    window.hcaptcha.remove(this.hCaptchaWidgetId);\n    this.hCaptchaElement = null;\n    this.hCaptchaWidgetId = null;\n  }\n}\nNgHcaptchaService.ɵfac = function NgHcaptchaService_Factory(t) {\n  return new (t || NgHcaptchaService)(i0.ɵɵinject(CAPTCHA_CONFIG));\n};\nNgHcaptchaService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgHcaptchaService,\n  factory: NgHcaptchaService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgHcaptchaService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CAPTCHA_CONFIG]\n      }]\n    }];\n  }, null);\n})();\nclass NgHcaptchaModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgHcaptchaModule,\n      providers: [NgHcaptchaService, {\n        provide: CAPTCHA_CONFIG,\n        useValue: config || []\n      }]\n    };\n  }\n}\nNgHcaptchaModule.ɵfac = function NgHcaptchaModule_Factory(t) {\n  return new (t || NgHcaptchaModule)();\n};\nNgHcaptchaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgHcaptchaModule,\n  declarations: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective],\n  exports: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective]\n});\nNgHcaptchaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgHcaptchaModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective],\n      exports: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective]\n    }]\n  }], null, null);\n})();\n\n/*\r\n * Public API Surface of ng-hcaptcha\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CAPTCHA_CONFIG, NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective, NgHcaptchaModule, NgHcaptchaService, loadHCaptcha };\n//# sourceMappingURL=ng-hcaptcha.mjs.map","map":{"version":3,"names":["i0","InjectionToken","EventEmitter","PLATFORM_ID","forwardRef","Component","Inject","Input","ViewChild","Output","Directive","HostListener","Injectable","NgModule","NG_VALUE_ACCESSOR","isPlatformServer","isPlatformBrowser","Observable","_c0","CAPTCHA_CONFIG","loadHCaptcha","languageCode","observer","window","hcaptcha","next","complete","src","script","document","createElement","async","defer","onerror","e","error","onload","head","appendChild","NgHcaptchaComponent","constructor","config","zone","platformId","verify","expired","onChange","onTouched","ngOnInit","captcha$","subscribe","setTimeout","context","options","sitekey","siteKey","theme","size","tabindex","tabIndex","callback","res","run","onVerify","onExpired","err","onError","widgetId","render","captcha","nativeElement","console","ngOnDestroy","unsubscribe","writeValue","value","reset","registerOnChange","fn","registerOnTouched","_value","response","emit","ɵfac","NgHcaptchaComponent_Factory","t","ɵɵdirectiveInject","NgZone","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","NgHcaptchaComponent_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","outputs","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","NgHcaptchaComponent_Template","ɵɵelement","encapsulation","ngDevMode","ɵsetClassMetadata","args","selector","styles","providers","undefined","decorators","static","NgHcaptchaInvisibleButtonDirective","elRef","click","onClick","event","hCaptchaToken","lastClickEvent","stopPropagation","preventDefault","cancelBubble","stopImmediatePropagation","execute","NgHcaptchaInvisibleButtonDirective_Factory","ElementRef","ɵdir","ɵɵdefineDirective","hostBindings","NgHcaptchaInvisibleButtonDirective_HostBindings","ɵɵlistener","NgHcaptchaInvisibleButtonDirective_click_HostBindingHandler","$event","NgHcaptchaService","captchaConfig","subscriber","hCaptchaElement","body","hCaptchaWidgetId","resetHcaptcha","remove","NgHcaptchaService_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","NgHcaptchaModule","forRoot","ngModule","useValue","NgHcaptchaModule_Factory","ɵmod","ɵɵdefineNgModule","declarations","exports","ɵinj","ɵɵdefineInjector","imports"],"sources":["C:/projects/innovation-studio-developer/22.1/test210500/bundle/src/main/webapp/node_modules/ng-hcaptcha/fesm2020/ng-hcaptcha.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, PLATFORM_ID, forwardRef, Component, Inject, Input, ViewChild, Output, Directive, HostListener, Injectable, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isPlatformServer, isPlatformBrowser } from '@angular/common';\nimport { Observable } from 'rxjs';\n\nconst CAPTCHA_CONFIG = new InjectionToken('CAPTCHA_CONFIG');\n\n/**\r\n * Load the hCaptcha script by appending a script element to the head element.\r\n * The script won't be loaded again if it has already been loaded.\r\n * Async and defer are set to prevent blocking the renderer while loading hCaptcha.\r\n */\r\nfunction loadHCaptcha(languageCode) {\r\n    return new Observable((observer) => {\r\n        // No window object (ssr)\r\n        if (!window) {\r\n            return;\r\n        }\r\n        // The hCaptcha script has already been loaded\r\n        if (typeof window.hcaptcha !== 'undefined') {\r\n            observer.next();\r\n            observer.complete();\r\n            return;\r\n        }\r\n        let src = 'https://hcaptcha.com/1/api.js?render=explicit';\r\n        // Set language code\r\n        if (languageCode) {\r\n            src += `&hl=${languageCode}`;\r\n        }\r\n        const script = document.createElement('script');\r\n        script.src = src;\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.onerror = (e) => observer.error(e);\r\n        script.onload = () => {\r\n            observer.next();\r\n            observer.complete();\r\n        };\r\n        document.head.appendChild(script);\r\n    });\r\n}\n\nclass NgHcaptchaComponent {\r\n    constructor(config, zone, platformId) {\r\n        this.config = config;\r\n        this.zone = zone;\r\n        this.platformId = platformId;\r\n        this.verify = new EventEmitter();\r\n        this.expired = new EventEmitter();\r\n        this.error = new EventEmitter();\r\n        this.onChange = () => { };\r\n        this.onTouched = () => { };\r\n    }\r\n    // Initialization\r\n    ngOnInit() {\r\n        // Use language code from module config when input parameter is not set\r\n        if (!this.languageCode) {\r\n            this.languageCode = this.config.languageCode;\r\n        }\r\n        // Do not load hCaptcha if platform is server\r\n        if (isPlatformServer(this.platformId)) {\r\n            return;\r\n        }\r\n        this.captcha$ = loadHCaptcha(this.languageCode).subscribe(() => {\r\n            setTimeout((context) => {\r\n                // Configure hCaptcha\r\n                const options = {\r\n                    sitekey: (context.siteKey || context.config.siteKey),\r\n                    theme: context.theme,\r\n                    size: context.size,\r\n                    tabindex: context.tabIndex,\r\n                    callback: (res) => { context.zone.run(() => context.onVerify(res)); },\r\n                    'expired-callback': (res) => { context.zone.run(() => context.onExpired(res)); },\r\n                    'error-callback': (err) => { context.zone.run(() => context.onError(err)); }\r\n                };\r\n                // Render hCaptcha using the defined options\r\n                context.widgetId = window.hcaptcha.render(context.captcha.nativeElement, options);\r\n            }, 50, this);\r\n        }, (error) => {\r\n            console.error('Failed to load hCaptcha script', error);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.captcha$.unsubscribe();\r\n    }\r\n    // ControlValueAccessor implementation\r\n    writeValue(value) {\r\n        // Needs to be implemented to make the FormGroup's reset function work\r\n        this.value = value;\r\n        // Reset hCaptcha.\r\n        // We need to check whether window.hcaptcha is defined because\r\n        // writeValue(value: any) can be called before hCaptcha has been intialized.\r\n        if (isPlatformBrowser(this.platformId) && !this.value && window.hcaptcha) {\r\n            window.hcaptcha.reset(this.widgetId);\r\n        }\r\n    }\r\n    registerOnChange(fn) {\r\n        this.onChange = fn;\r\n    }\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    reset() {\r\n        window.hcaptcha.reset(this.widgetId);\r\n    }\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    set value(value) {\r\n        this._value = value;\r\n        this.onChange(value);\r\n        this.onTouched();\r\n    }\r\n    // Internal functions\r\n    /**\r\n     * Is called when the verification was successful\r\n     * @param response The verification token\r\n     */\r\n    onVerify(response) {\r\n        this.value = response;\r\n        this.verify.emit(response);\r\n    }\r\n    /**\r\n     * Is called when the verification has expired\r\n     * @param response The verification response\r\n     */\r\n    onExpired(response) {\r\n        this.expired.emit(response);\r\n    }\r\n    /**\r\n     * Is called when an error occurs during the verification process\r\n     * @param error The error returned by hCaptcha\r\n     */\r\n    onError(error) {\r\n        this.error.emit(error);\r\n    }\r\n}\r\nNgHcaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaComponent, deps: [{ token: CAPTCHA_CONFIG }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\r\nNgHcaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.5\", type: NgHcaptchaComponent, selector: \"ng-hcaptcha\", inputs: { siteKey: \"siteKey\", theme: \"theme\", size: \"size\", tabIndex: \"tabIndex\", languageCode: \"languageCode\" }, outputs: { verify: \"verify\", expired: \"expired\", error: \"error\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => NgHcaptchaComponent),\r\n            multi: true\r\n        }\r\n    ], viewQueries: [{ propertyName: \"captcha\", first: true, predicate: [\"captcha\"], descendants: true, static: true }], ngImport: i0, template: '<div #captcha class=\"h-captcha\"></div>', isInline: true });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ng-hcaptcha',\r\n                    template: '<div #captcha class=\"h-captcha\"></div>',\r\n                    styles: [],\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef(() => NgHcaptchaComponent),\r\n                            multi: true\r\n                        }\r\n                    ]\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [CAPTCHA_CONFIG]\r\n                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }]; }, propDecorators: { siteKey: [{\r\n                type: Input\r\n            }], theme: [{\r\n                type: Input\r\n            }], size: [{\r\n                type: Input\r\n            }], tabIndex: [{\r\n                type: Input\r\n            }], languageCode: [{\r\n                type: Input\r\n            }], captcha: [{\r\n                type: ViewChild,\r\n                args: ['captcha', { static: true }]\r\n            }], verify: [{\r\n                type: Output\r\n            }], expired: [{\r\n                type: Output\r\n            }], error: [{\r\n                type: Output\r\n            }] } });\n\nclass NgHcaptchaInvisibleButtonDirective {\r\n    constructor(elRef, config, zone, platformId) {\r\n        this.elRef = elRef;\r\n        this.config = config;\r\n        this.zone = zone;\r\n        this.platformId = platformId;\r\n        this.verify = new EventEmitter();\r\n        this.expired = new EventEmitter();\r\n        this.error = new EventEmitter();\r\n        this.click = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        // Use language code from module config when input parameter is not set\r\n        if (!this.languageCode) {\r\n            this.languageCode = this.config.languageCode;\r\n        }\r\n        // Do not load hCaptcha if platform is server\r\n        if (isPlatformServer(this.platformId)) {\r\n            return;\r\n        }\r\n        // Load the hCaptcha script\r\n        this.captcha$ = loadHCaptcha(this.languageCode).subscribe(() => {\r\n            setTimeout((context) => {\r\n                // Configure hCaptcha\r\n                const options = {\r\n                    sitekey: (context.siteKey || context.config.siteKey),\r\n                    size: 'invisible',\r\n                    callback: (res) => { context.zone.run(() => context.onVerify(res)); },\r\n                    'expired-callback': (res) => { context.zone.run(() => context.onExpired(res)); },\r\n                    'error-callback': (err) => { context.zone.run(() => context.onError(err)); }\r\n                };\r\n                // Render hCaptcha using the defined options\r\n                context.widgetId = window.hcaptcha.render(context.elRef.nativeElement, options);\r\n            }, 50, this);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        if (isPlatformServer(this.platformId)) {\r\n            return;\r\n        }\r\n        this.captcha$.unsubscribe();\r\n    }\r\n    onClick(event) {\r\n        if (event.hCaptchaToken) {\r\n            return;\r\n        }\r\n        this.lastClickEvent = event;\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        event.cancelBubble = true;\r\n        event.stopImmediatePropagation();\r\n        // Only execute hCaptcha if platform is browser\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            window.hcaptcha.execute(this.widgetId);\r\n        }\r\n        return false;\r\n    }\r\n    reset() {\r\n        window.hcaptcha.reset(this.widgetId);\r\n    }\r\n    /**\r\n     * Is called when the verification was successful\r\n     * @param response The verification token\r\n     */\r\n    onVerify(response) {\r\n        const event = this.lastClickEvent || {};\r\n        event.hCaptchaToken = response;\r\n        this.click.emit(event);\r\n        this.verify.emit(response);\r\n    }\r\n    /**\r\n     * Is called when the verification has expired\r\n     * @param response The verification response\r\n     */\r\n    onExpired(response) {\r\n        this.expired.emit(response);\r\n    }\r\n    /**\r\n     * Is called when an error occurs during the verification process\r\n     * @param error The error returned by hCaptcha\r\n     */\r\n    onError(error) {\r\n        this.error.emit(error);\r\n    }\r\n}\r\nNgHcaptchaInvisibleButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaInvisibleButtonDirective, deps: [{ token: i0.ElementRef }, { token: CAPTCHA_CONFIG }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgHcaptchaInvisibleButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.5\", type: NgHcaptchaInvisibleButtonDirective, selector: \"[ngHcaptchaInvisibleButton]\", inputs: { siteKey: \"siteKey\", languageCode: \"languageCode\" }, outputs: { verify: \"verify\", expired: \"expired\", error: \"error\", click: \"click\" }, host: { listeners: { \"click\": \"onClick($event)\" } }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaInvisibleButtonDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngHcaptchaInvisibleButton]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [CAPTCHA_CONFIG]\r\n                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }]; }, propDecorators: { siteKey: [{\r\n                type: Input\r\n            }], languageCode: [{\r\n                type: Input\r\n            }], verify: [{\r\n                type: Output\r\n            }], expired: [{\r\n                type: Output\r\n            }], error: [{\r\n                type: Output\r\n            }], click: [{\r\n                type: Output\r\n            }], onClick: [{\r\n                type: HostListener,\r\n                args: ['click', ['$event']]\r\n            }] } });\n\nclass NgHcaptchaService {\r\n    constructor(captchaConfig) {\r\n        this.captchaConfig = captchaConfig;\r\n    }\r\n    verify() {\r\n        return new Observable((subscriber) => {\r\n            loadHCaptcha(this.captchaConfig.languageCode).subscribe(() => {\r\n                setTimeout((context) => {\r\n                    // Create hCaptcha element\r\n                    if (!this.hCaptchaElement) {\r\n                        this.hCaptchaElement = document.createElement('div');\r\n                        document.body.appendChild(this.hCaptchaElement);\r\n                    }\r\n                    // Render hCaptcha using the defined options\r\n                    if (!this.hCaptchaWidgetId) {\r\n                        // Configure hCaptcha\r\n                        const options = {\r\n                            sitekey: this.captchaConfig.siteKey,\r\n                            size: 'invisible',\r\n                            callback: (res) => {\r\n                                subscriber.next(res);\r\n                                subscriber.complete();\r\n                                this.resetHcaptcha();\r\n                            },\r\n                            'expired-callback': (res) => {\r\n                                subscriber.error(res);\r\n                                this.resetHcaptcha();\r\n                            },\r\n                            'error-callback': (err) => {\r\n                                subscriber.error(err);\r\n                                this.resetHcaptcha();\r\n                            },\r\n                        };\r\n                        this.hCaptchaWidgetId = window.hcaptcha.render(this.hCaptchaElement, options);\r\n                    }\r\n                    // Immediately execute hCaptcha\r\n                    window.hcaptcha.execute(this.hCaptchaWidgetId);\r\n                }, 50, this);\r\n            });\r\n        });\r\n    }\r\n    resetHcaptcha() {\r\n        window.hcaptcha.remove(this.hCaptchaWidgetId);\r\n        this.hCaptchaElement = null;\r\n        this.hCaptchaWidgetId = null;\r\n    }\r\n}\r\nNgHcaptchaService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaService, deps: [{ token: CAPTCHA_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\r\nNgHcaptchaService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [CAPTCHA_CONFIG]\r\n                }] }]; } });\n\nclass NgHcaptchaModule {\r\n    static forRoot(config) {\r\n        return {\r\n            ngModule: NgHcaptchaModule,\r\n            providers: [\r\n                NgHcaptchaService,\r\n                {\r\n                    provide: CAPTCHA_CONFIG,\r\n                    useValue: config || []\r\n                },\r\n            ]\r\n        };\r\n    }\r\n}\r\nNgHcaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgHcaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaModule, declarations: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective], exports: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective] });\r\nNgHcaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaModule, imports: [[]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.5\", ngImport: i0, type: NgHcaptchaModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [],\r\n                    declarations: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective],\r\n                    exports: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective],\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ng-hcaptcha\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CAPTCHA_CONFIG, NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective, NgHcaptchaModule, NgHcaptchaService, loadHCaptcha };\n//# sourceMappingURL=ng-hcaptcha.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}