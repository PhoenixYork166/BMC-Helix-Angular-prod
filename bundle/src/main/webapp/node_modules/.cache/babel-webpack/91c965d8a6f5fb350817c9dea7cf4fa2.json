{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, ViewContainerRef, Component, Input, ViewChild, HostBinding, EventEmitter, Output, HostListener, Directive, NgModule, Optional } from '@angular/core';\nimport { Subject, ReplaySubject, from, of, EMPTY, merge, throwError, asyncScheduler, combineLatest, BehaviorSubject, Observable, NEVER } from 'rxjs';\nimport { takeUntil, skipWhile, distinctUntilChanged, delay, mergeScan, map, take, switchMap, filter, distinct, reduce, tap, defaultIfEmpty, switchMapTo, catchError, pluck } from 'rxjs/operators';\nimport * as i2$4 from '@helix/platform/record/api';\nimport * as i2$1 from '@helix/platform/view/api';\nimport { RX_VIEW_DEFINITION, ViewLayoutRole, RxViewComponentType, RX_AVAILABLE_ON_DEVICES_PROP_NAME, RX_AVAILABLE_ON_DEVICES_ALL_VALUE, RxViewLayout, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport * as i2$2 from '@helix/platform/utils';\nimport { RX_GUID } from '@helix/platform/utils';\nimport { pick, includes, castArray, isString, chain, values, isObject, isEmpty, head, some, has, groupBy, map as map$1, keys, every, intersection, forEach, get, forOwn, find, sortBy, toNumber, forIn, isFunction, set, isNil, pull } from 'lodash';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@helix/platform/shared/api';\nimport * as i2$3 from '@helix/platform/ui-kit';\nimport { RxBusyIndicatorModule } from '@helix/platform/ui-kit';\nimport * as i8 from '@helix/platform/association/api';\nimport * as i5 from '@helix/platform/process/api';\nimport { FormsModule } from '@angular/forms';\nimport * as i3 from '@ngx-translate/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport * as i4 from '@bmc-ux/adapt-angular';\nimport { DismissReasons, AdaptAlertModule } from '@bmc-ux/adapt-angular';\nconst _c0 = [\"container\"];\nfunction RuntimeViewCanvasItemContainerComponent_ng_container_0_div_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\nfunction RuntimeViewCanvasItemContainerComponent_ng_container_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, RuntimeViewCanvasItemContainerComponent_ng_container_0_div_2_ng_container_1_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const column_r5 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n    const _r2 = i0.ɵɵreference(3);\n    i0.ɵɵproperty(\"ngClass\", column_r5.cssClass ? column_r5.cssClass : column_r5.span ? \"col-\" + column_r5.span : \"col\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c1, column_r5.children));\n  }\n}\nfunction RuntimeViewCanvasItemContainerComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵtemplate(2, RuntimeViewCanvasItemContainerComponent_ng_container_0_div_2_Template, 2, 5, \"div\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.columns);\n  }\n}\nfunction RuntimeViewCanvasItemContainerComponent_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction RuntimeViewCanvasItemContainerComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, RuntimeViewCanvasItemContainerComponent_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 5);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, ctx_r1.columns[0].children));\n  }\n}\nfunction RuntimeViewCanvasItemContainerComponent_ng_template_2_rx_runtime_view_canvas_item_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"rx-runtime-view-canvas-item\", 7, 8);\n  }\n  if (rf & 2) {\n    const layoutItem_r10 = ctx.$implicit;\n    i0.ɵɵproperty(\"layout\", layoutItem_r10);\n  }\n}\nfunction RuntimeViewCanvasItemContainerComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, RuntimeViewCanvasItemContainerComponent_ng_template_2_rx_runtime_view_canvas_item_0_Template, 2, 1, \"rx-runtime-view-canvas-item\", 6);\n  }\n  if (rf & 2) {\n    const layoutItems_r8 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngForOf\", layoutItems_r8)(\"ngForTrackBy\", ctx_r3.trackByFn);\n  }\n}\nconst _c2 = function (a0, a1, a2) {\n  return [a0, a1, a2];\n};\nconst _c3 = function (a0, a1) {\n  return {\n    \"content-outlet\": a0,\n    \"outlet-padding\": a1\n  };\n};\nfunction RuntimeViewRootComponent_rx_runtime_view_canvas_item_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"rx-runtime-view-canvas-item-container\", 1);\n  }\n  if (rf & 2) {\n    const outlet_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hidden\", ctx_r0.isHidden(outlet_r1))(\"columns\", outlet_r1.columns)(\"outlet\", outlet_r1)(\"ngClass\", i0.ɵɵpureFunction2(8, _c3, outlet_r1.name === ctx_r0.defaultOutletName, i0.ɵɵpureFunction3(4, _c2, ctx_r0.layoutRole.Header, ctx_r0.layoutRole.Footer, ctx_r0.defaultOutletName).includes(outlet_r1.name)));\n  }\n}\nfunction RuntimeViewCanvasComponent_rx_runtime_view_canvas_item_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"rx-runtime-view-canvas-item\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"layout\", ctx_r0.layout);\n  }\n}\nfunction RuntimeViewComponent_rx_runtime_view_canvas_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"rx-runtime-view-canvas\", 1);\n    i0.ɵɵlistener(\"componentPropertyChanged\", function RuntimeViewComponent_rx_runtime_view_canvas_0_Template_rx_runtime_view_canvas_componentPropertyChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.runtimeViewModel.onViewComponentPropertyChanged($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"layout\", ctx_r0.runtimeViewLayoutService.layout);\n  }\n}\nfunction RuntimeViewModalComponent_ng_container_0_div_1_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function RuntimeViewModalComponent_ng_container_0_div_1_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(3);\n      return ctx_r6.closeModal();\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"aria-label\", ctx_r5.closeLabel);\n  }\n}\nfunction RuntimeViewModalComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"span\", 9);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, RuntimeViewModalComponent_ng_container_0_div_1_button_3_Template, 1, 1, \"button\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.isCancellable);\n  }\n}\nfunction RuntimeViewModalComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, RuntimeViewModalComponent_ng_container_0_div_1_Template, 4, 2, \"div\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isBlade)(\"ngIfElse\", _r1);\n  }\n}\nfunction RuntimeViewModalComponent_ng_template_1_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function RuntimeViewModalComponent_ng_template_1_button_3_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.closeModal();\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"aria-label\", ctx_r8.closeLabel);\n  }\n}\nfunction RuntimeViewModalComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelementStart(1, \"h5\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, RuntimeViewModalComponent_ng_template_1_button_3_Template, 1, 1, \"button\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.isCancellable);\n  }\n}\nconst _c4 = function (a0) {\n  return {\n    content: a0,\n    type: \"inline\",\n    variant: \"info\"\n  };\n};\nfunction RuntimeViewModalComponent_adapt_alert_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"adapt-alert\", 14);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"config\", i0.ɵɵpureFunction1(1, _c4, ctx_r3.notification));\n  }\n}\nconst _c5 = function (a0, a1) {\n  return {\n    \"modal-body p-0\": a0,\n    \"dp-content\": a1\n  };\n};\nconst _c6 = function (a0) {\n  return {\n    busy: a0,\n    loaderType: \"lineLoader\",\n    delay: 250,\n    backdrop: false,\n    message: null\n  };\n};\nclass RuntimeLayoutOutletColumn {\n  constructor() {\n    this.children = [];\n  }\n}\nclass RuntimeLayoutOutlet {\n  constructor() {\n    this.children = [];\n    this.columns = [new RuntimeLayoutOutletColumn()];\n    this.height = null;\n  }\n}\nclass RuntimeLayoutItem {\n  constructor(options) {\n    this.outlets = [];\n    this.parent = null;\n    this.runtimeViewModelApi = null;\n    Object.assign(this, {\n      guid: options.guid,\n      config: options.config,\n      parent: options.parent,\n      runtimeViewModelApi: options.runtimeViewModelApi,\n      factory: options.factory\n    });\n    if (options.outlets) {\n      this.initializeOutlets(options.outlets);\n    }\n  }\n  initializeOutlets(outlets) {\n    outlets.forEach(outlet => {\n      const layoutOutletItem = new RuntimeLayoutOutlet();\n      layoutOutletItem.name = outlet.name;\n      layoutOutletItem.height = outlet.hasOwnProperty('height') ? outlet.height : null;\n      this.outlets.push(layoutOutletItem);\n    });\n  }\n  addLayoutItem(layoutTreeItem, columnConfig) {\n    const outlet = this.outlets.find(outletItem => outletItem.name === columnConfig.parentOutlet.name);\n    const insertIndex = columnConfig.parentOutlet.columns[columnConfig.columnIndex].children.indexOf(layoutTreeItem.guid);\n    columnConfig.parentOutlet.columns.forEach((column, columnIndex) => {\n      if (!outlet.columns[columnIndex]) {\n        outlet.columns[columnIndex] = new RuntimeLayoutOutletColumn();\n      }\n      if (column.cssClass) {\n        outlet.columns[columnIndex].cssClass = column.cssClass;\n      }\n      if (column.span) {\n        outlet.columns[columnIndex].span = column.span;\n      }\n    });\n    if (layoutTreeItem) {\n      outlet.columns[columnConfig.columnIndex].children[insertIndex] = layoutTreeItem;\n    }\n  }\n}\nclass RuntimeViewCanvasService {\n  constructor() {\n    this.componentPropertyChangedSubject = new Subject();\n    this.componentPropertyChanged$ = this.componentPropertyChangedSubject.asObservable();\n  }\n  onViewComponentPropertyChanged(componentPropertyChange) {\n    this.componentPropertyChangedSubject.next(componentPropertyChange);\n  }\n}\nRuntimeViewCanvasService.ɵfac = function RuntimeViewCanvasService_Factory(t) {\n  return new (t || RuntimeViewCanvasService)();\n};\nRuntimeViewCanvasService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RuntimeViewCanvasService,\n  factory: RuntimeViewCanvasService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewCanvasService, [{\n    type: Injectable\n  }], null, null);\n})();\nclass RuntimeViewCanvasItemService {\n  constructor(injector, componentFactoryResolver, runtimeViewCanvasService) {\n    this.injector = injector;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.runtimeViewCanvasService = runtimeViewCanvasService;\n    this.hasMargin = true;\n    this.hasAutoFill = false;\n    this.hasAutoScroll = false;\n    this.isHidden = false;\n    this.destroyed$ = new ReplaySubject(1);\n  }\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n  registerOutlet(outletName, outletViewContainerRef, containerComponent) {\n    const currentOutlet = this.layout.outlets.find(outlet => outlet.name === outletName);\n    if (currentOutlet) {\n      this.renderContainerComponent(outletViewContainerRef, currentOutlet, containerComponent);\n    }\n  }\n  getChildren(outletName) {\n    const currentOutlet = this.layout.outlets.find(outlet => outlet.name === outletName);\n    return currentOutlet.columns.map(column => Object.assign(Object.assign({}, column), {\n      children: column.children.filter(Boolean).map(child => pick(child, 'config', 'guid', 'runtimeViewModelApi', 'factory', 'outlets'))\n    }));\n  }\n  renderViewComponent() {\n    var _a, _b, _c, _d;\n    this.componentRef = this.container.createComponent(this.layout.factory, null, this.injector);\n    this.componentInstance = this.componentRef.instance;\n    this.componentInstance.guid = this.layout.guid;\n    this.componentInstance.config = this.layout.config;\n    this.componentInstance.runtimeViewModelApi = this.layout.runtimeViewModelApi;\n    (_a = this.componentInstance.propertyChanged) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroyed$)).subscribe(propertyChange => {\n      this.runtimeViewCanvasService.onViewComponentPropertyChanged(propertyChange);\n    });\n    // Update hasMargin, hasAutoScroll, and hasAutoFill property bindings asynchronously using timeout\n    // to trigger change detection. Otherwise \"ExpressionChangedAfterItHasBeenCheckedError\" will occur.\n    (_b = this.componentInstance.hidden) === null || _b === void 0 ? void 0 : _b.pipe(skipWhile(value => !value), distinctUntilChanged(), delay(0), takeUntil(this.destroyed$)).subscribe(hidden => {\n      this.hasMargin = !hidden;\n      this.isHidden = hidden;\n    });\n    (_c = this.componentInstance.autoScroll) === null || _c === void 0 ? void 0 : _c.pipe(skipWhile(value => !value), distinctUntilChanged(), delay(0), takeUntil(this.destroyed$)).subscribe(autoScroll => {\n      this.hasAutoScroll = autoScroll;\n    });\n    (_d = this.componentInstance.autoFill) === null || _d === void 0 ? void 0 : _d.pipe(skipWhile(value => !value), distinctUntilChanged(), delay(0), takeUntil(this.destroyed$)).subscribe(autoFill => {\n      this.hasAutoFill = autoFill;\n    });\n  }\n  renderContainerComponent(outletViewContainerRef, currentOutlet, containerComponent) {\n    const containerComponentFactory = containerComponent;\n    const containerRef = outletViewContainerRef.createComponent(containerComponentFactory);\n    containerRef.instance.columns = currentOutlet.columns;\n    containerRef.instance.outlet = currentOutlet;\n  }\n}\nRuntimeViewCanvasItemService.ɵfac = function RuntimeViewCanvasItemService_Factory(t) {\n  return new (t || RuntimeViewCanvasItemService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(RuntimeViewCanvasService));\n};\nRuntimeViewCanvasItemService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RuntimeViewCanvasItemService,\n  factory: RuntimeViewCanvasItemService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewCanvasItemService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.Injector\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: RuntimeViewCanvasService\n    }];\n  }, null);\n})();\nclass RuntimeViewCanvasItemComponent {\n  constructor(runtimeViewCanvasItemService) {\n    this.runtimeViewCanvasItemService = runtimeViewCanvasItemService;\n  }\n  get hasMargin() {\n    return this.runtimeViewCanvasItemService.hasMargin;\n  }\n  get hasAutoFill() {\n    return this.runtimeViewCanvasItemService.hasAutoFill && !this.runtimeViewCanvasItemService.isHidden;\n  }\n  get hasAutoScroll() {\n    return this.runtimeViewCanvasItemService.hasAutoScroll;\n  }\n  ngOnChanges(changes) {\n    if (!this.runtimeViewCanvasItemService.container) {\n      this.runtimeViewCanvasItemService.container = this.container;\n    }\n    if (changes.layout.currentValue) {\n      this.runtimeViewCanvasItemService.layout = changes.layout.currentValue;\n      if (changes.layout.previousValue) {\n        this.container.clear();\n      }\n      this.runtimeViewCanvasItemService.renderViewComponent();\n    }\n  }\n  registerOutlet(outletName, outletViewContainerRef) {\n    this.runtimeViewCanvasItemService.registerOutlet(outletName, outletViewContainerRef);\n  }\n  getChildren(outletName) {\n    return this.runtimeViewCanvasItemService.getChildren(outletName);\n  }\n}\nRuntimeViewCanvasItemComponent.ɵfac = function RuntimeViewCanvasItemComponent_Factory(t) {\n  return new (t || RuntimeViewCanvasItemComponent)(i0.ɵɵdirectiveInject(RuntimeViewCanvasItemService));\n};\nRuntimeViewCanvasItemComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RuntimeViewCanvasItemComponent,\n  selectors: [[\"rx-runtime-view-canvas-item\"]],\n  viewQuery: function RuntimeViewCanvasItemComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);\n    }\n  },\n  hostVars: 6,\n  hostBindings: function RuntimeViewCanvasItemComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"rx-runtime-view-canvas-item-margin\", ctx.hasMargin)(\"rx-runtime-view-canvas-item-auto-fill\", ctx.hasAutoFill)(\"rx-runtime-view-canvas-item-auto-scroll\", ctx.hasAutoScroll);\n    }\n  },\n  inputs: {\n    layout: \"layout\"\n  },\n  features: [i0.ɵɵProvidersFeature([RuntimeViewCanvasItemService]), i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 0,\n  consts: [[\"container\", \"\"]],\n  template: function RuntimeViewCanvasItemComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, null, 0);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewCanvasItemComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-runtime-view-canvas-item',\n      templateUrl: './runtime-view-canvas-item.component.html',\n      providers: [RuntimeViewCanvasItemService]\n    }]\n  }], function () {\n    return [{\n      type: RuntimeViewCanvasItemService\n    }];\n  }, {\n    layout: [{\n      type: Input\n    }],\n    container: [{\n      type: ViewChild,\n      args: ['container', {\n        read: ViewContainerRef,\n        static: true\n      }]\n    }],\n    hasMargin: [{\n      type: HostBinding,\n      args: ['class.rx-runtime-view-canvas-item-margin']\n    }],\n    hasAutoFill: [{\n      type: HostBinding,\n      args: ['class.rx-runtime-view-canvas-item-auto-fill']\n    }],\n    hasAutoScroll: [{\n      type: HostBinding,\n      args: ['class.rx-runtime-view-canvas-item-auto-scroll']\n    }]\n  });\n})();\nclass RuntimeViewCanvasItemContainerComponent {\n  constructor() {\n    this.columns = [];\n  }\n  get hostClass() {\n    if (this.outlet.height) {\n      return `${this.outlet.height}px`;\n    }\n    return null;\n  }\n  trackByFn(index, item) {\n    return (item === null || item === void 0 ? void 0 : item.guid) || index;\n  }\n}\nRuntimeViewCanvasItemContainerComponent.ɵfac = function RuntimeViewCanvasItemContainerComponent_Factory(t) {\n  return new (t || RuntimeViewCanvasItemContainerComponent)();\n};\nRuntimeViewCanvasItemContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RuntimeViewCanvasItemContainerComponent,\n  selectors: [[\"rx-runtime-view-canvas-item-container\"]],\n  hostVars: 2,\n  hostBindings: function RuntimeViewCanvasItemContainerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"min-height\", ctx.hostClass);\n    }\n  },\n  inputs: {\n    columns: \"columns\",\n    outlet: \"outlet\"\n  },\n  decls: 4,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"itemTpl\", \"\"], [1, \"row\", \"rx-runtime-view-canvas-item-container-row\"], [\"class\", \"rx-runtime-view-canvas-item-container-column\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"rx-runtime-view-canvas-item-container-column\", 3, \"ngClass\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"layout\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"layout\"], [\"item\", \"\"]],\n  template: function RuntimeViewCanvasItemContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RuntimeViewCanvasItemContainerComponent_ng_container_0_Template, 3, 1, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, RuntimeViewCanvasItemContainerComponent_ng_container_1_Template, 2, 4, \"ng-container\", 0);\n      i0.ɵɵtemplate(2, RuntimeViewCanvasItemContainerComponent_ng_template_2_Template, 1, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.columns.length > 1);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.columns.length === 1);\n    }\n  },\n  directives: [i2.NgIf, i2.NgForOf, i2.NgClass, i2.NgTemplateOutlet, RuntimeViewCanvasItemComponent],\n  styles: [\"[_ngcontent-%COMP%]:root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \\\"Open Sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}rx-runtime-view-canvas-item[_ngcontent-%COMP%]{display:block}  .rx-runtime-view-canvas-item-margin:not(:last-child){margin-bottom:1rem}.rx-runtime-view-canvas-item-auto-fill[_ngcontent-%COMP%], .rx-runtime-view-canvas-item-container-row[_ngcontent-%COMP%], .rx-runtime-view-canvas-item-container-column[_ngcontent-%COMP%]{height:100%}.rx-runtime-view-canvas-item-container-column[_ngcontent-%COMP%]{display:flex;flex-direction:column}.rx-runtime-view-canvas-item-auto-scroll[_ngcontent-%COMP%]{overflow-y:auto}.rx-mb-sm[_ngcontent-%COMP%]{margin-bottom:1rem}@media (min-width: 576px){.rx-mb-sm[_ngcontent-%COMP%]{margin-bottom:0}}.rx-mb-sm[_ngcontent-%COMP%]:nth-last-child(1){margin-bottom:0}.rx-mb-md[_ngcontent-%COMP%]{margin-bottom:1rem}@media (min-width: 768px){.rx-mb-md[_ngcontent-%COMP%]{margin-bottom:0}}.rx-mb-md[_ngcontent-%COMP%]:nth-last-child(1){margin-bottom:0}.rx-mb-lg[_ngcontent-%COMP%]{margin-bottom:1rem}@media (min-width: 992px){.rx-mb-lg[_ngcontent-%COMP%]{margin-bottom:0}}.rx-mb-lg[_ngcontent-%COMP%]:nth-last-child(1){margin-bottom:0}.rx-mb-xl[_ngcontent-%COMP%]{margin-bottom:1rem}@media (min-width: 1200px){.rx-mb-xl[_ngcontent-%COMP%]{margin-bottom:0}}.rx-mb-xl[_ngcontent-%COMP%]:nth-last-child(1){margin-bottom:0}.rx-mb-xxl[_ngcontent-%COMP%]{margin-bottom:1rem}@media (min-width: 1600px){.rx-mb-xxl[_ngcontent-%COMP%]{margin-bottom:0}}.rx-mb-xxl[_ngcontent-%COMP%]:nth-last-child(1){margin-bottom:0}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewCanvasItemContainerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-runtime-view-canvas-item-container',\n      templateUrl: './runtime-view-canvas-item-container.component.html',\n      styleUrls: ['./runtime-view-canvas-item-container.component.scss']\n    }]\n  }], null, {\n    columns: [{\n      type: Input\n    }],\n    outlet: [{\n      type: Input\n    }],\n    hostClass: [{\n      type: HostBinding,\n      args: ['style.min-height']\n    }]\n  });\n})();\nclass RuntimeViewRootComponent {\n  constructor(runtimeCanvasItemComponent) {\n    this.runtimeCanvasItemComponent = runtimeCanvasItemComponent;\n    this.defaultOutletName = RX_VIEW_DEFINITION.defaultOutletName;\n    this.layoutRole = ViewLayoutRole;\n  }\n  isHidden(outlet) {\n    return outlet.name === ViewLayoutRole.Header && outlet.columns[0].children.length === 0;\n  }\n}\nRuntimeViewRootComponent.ɵfac = function RuntimeViewRootComponent_Factory(t) {\n  return new (t || RuntimeViewRootComponent)(i0.ɵɵdirectiveInject(RuntimeViewCanvasItemComponent));\n};\nRuntimeViewRootComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RuntimeViewRootComponent,\n  selectors: [[\"rx-runtime-view-root\"]],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"hidden\", \"columns\", \"outlet\", \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"hidden\", \"columns\", \"outlet\", \"ngClass\"]],\n  template: function RuntimeViewRootComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RuntimeViewRootComponent_rx_runtime_view_canvas_item_container_0_Template, 1, 11, \"rx-runtime-view-canvas-item-container\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.runtimeCanvasItemComponent.layout.outlets);\n    }\n  },\n  directives: [i2.NgForOf, RuntimeViewCanvasItemContainerComponent, i2.NgClass],\n  styles: [\"[_nghost-%COMP%]{display:flex;flex-direction:column;height:100%;overflow:hidden}rx-runtime-view-canvas-item-container[_ngcontent-%COMP%]{padding:0 1rem}.outlet-padding[_ngcontent-%COMP%]{padding:1rem}.content-outlet[_ngcontent-%COMP%]{flex:1;overflow-y:auto;overflow-x:hidden}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewRootComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-runtime-view-root',\n      templateUrl: './runtime-component.html',\n      styleUrls: ['./runtime-component.scss']\n    }]\n  }], function () {\n    return [{\n      type: RuntimeViewCanvasItemComponent\n    }];\n  }, null);\n})();\n\n/**\n * @desc Represents runtime component tree\n */\nclass RuntimeViewLayoutService {\n  constructor(rxViewComponentRegistryService, viewDefinitionParserService, factoryResolver, tree, rxJsonParserService, rxLogService, rxOldViewLayoutAdapterService) {\n    this.rxViewComponentRegistryService = rxViewComponentRegistryService;\n    this.viewDefinitionParserService = viewDefinitionParserService;\n    this.factoryResolver = factoryResolver;\n    this.tree = tree;\n    this.rxJsonParserService = rxJsonParserService;\n    this.rxLogService = rxLogService;\n    this.rxOldViewLayoutAdapterService = rxOldViewLayoutAdapterService;\n  }\n  clear() {\n    this.layout = null;\n  }\n  init(runtimeViewModel, runtimeViewModelApi) {\n    this.runtimeViewModel = runtimeViewModel;\n    this.runtimeViewModelApi = runtimeViewModelApi;\n    this.viewDefinitionParserService.getComponents(runtimeViewModel.viewDefinition).forEach(this.processDefinition.bind(this));\n  }\n  processDefinition(componentDefinitionItem) {\n    this.rxOldViewLayoutAdapterService.convertLayout(componentDefinitionItem);\n    if (!componentDefinitionItem.parentComponentDefinition) {\n      this.initializeView(componentDefinitionItem.componentDefinition);\n    } else {\n      const componentDescriptor = this.rxViewComponentRegistryService.get(componentDefinitionItem.componentDefinition.type);\n      if (componentDefinitionItem.componentDefinition.type !== RxViewComponentType.Action && componentDescriptor && !this.runtimeViewModel.isDataViewComponentDefinition(componentDescriptor)) {\n        // todo move this logic to separate method\n        const parentComponentDefinitionLayout = JSON.parse(componentDefinitionItem.parentComponentDefinition.layout);\n        let columnIndex = 0;\n        const parentOutlet = parentComponentDefinitionLayout.outlets.find(outlet => {\n          return outlet.columns.find((col, colIndex) => {\n            const includes = col.children.includes(componentDefinitionItem.componentDefinition.guid);\n            if (includes) {\n              columnIndex = colIndex;\n            }\n            return includes;\n          });\n        });\n        if (parentOutlet) {\n          const viewComponentConfig = this.runtimeViewModel.viewComponentStates.get(componentDefinitionItem.componentDefinition.guid).config$.asObservable();\n          const parentLayoutItem = this.getLayoutItem(componentDefinitionItem.parentComponentDefinition.guid);\n          parentLayoutItem.addLayoutItem(new RuntimeLayoutItem({\n            guid: componentDefinitionItem.componentDefinition.guid,\n            config: viewComponentConfig,\n            parent: parentLayoutItem,\n            runtimeViewModelApi: this.runtimeViewModelApi,\n            outlets: componentDescriptor.outlets,\n            factory: componentDescriptor.componentFactory\n          }), {\n            parentOutlet,\n            columnIndex\n          });\n        } else {\n          const component = componentDefinitionItem.componentDefinition;\n          this.rxLogService.warning(`Cannot render view component. ${component.type} (${component.guid}) is not used in layout.`);\n        }\n      }\n    }\n  }\n  initializeView(viewDefinition) {\n    const layout = this.rxJsonParserService.tryParseJson(viewDefinition.layout);\n    this.layout = new RuntimeLayoutItem({\n      guid: viewDefinition.guid,\n      parent: null,\n      runtimeViewModelApi: this.runtimeViewModelApi,\n      outlets: layout.outlets,\n      factory: this.factoryResolver.resolveComponentFactory(RuntimeViewRootComponent)\n    });\n  }\n  getLayoutItem(guid) {\n    const flattenedLayoutItems = this.tree.flattenBy(this.layout, currentLayout => {\n      return currentLayout.outlets.reduce((result, outlet) => {\n        outlet.columns.forEach(column => {\n          column.children.forEach(canvasLayout => {\n            result.push(canvasLayout);\n          });\n        });\n        return result;\n      }, []);\n    });\n    return flattenedLayoutItems.find(flattenedLayoutItem => flattenedLayoutItem.guid === guid);\n  }\n}\nRuntimeViewLayoutService.ɵfac = function RuntimeViewLayoutService_Factory(t) {\n  return new (t || RuntimeViewLayoutService)(i0.ɵɵinject(i2$1.RxViewComponentRegistryService), i0.ɵɵinject(i2$1.RxViewDefinitionParserService), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i2$2.RxTreeService), i0.ɵɵinject(i2$2.RxJsonParserService), i0.ɵɵinject(i1.RxLogService), i0.ɵɵinject(i2$1.RxOldViewLayoutAdapterService));\n};\nRuntimeViewLayoutService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RuntimeViewLayoutService,\n  factory: RuntimeViewLayoutService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewLayoutService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i2$1.RxViewComponentRegistryService\n    }, {\n      type: i2$1.RxViewDefinitionParserService\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i2$2.RxTreeService\n    }, {\n      type: i2$2.RxJsonParserService\n    }, {\n      type: i1.RxLogService\n    }, {\n      type: i2$1.RxOldViewLayoutAdapterService\n    }];\n  }, null);\n})();\nclass RuntimeViewModelApi {\n  clear() {\n    this.runtimeViewModel = null;\n  }\n  init(model) {\n    if (!this.runtimeViewModel) {\n      this.runtimeViewModel = model;\n    }\n  }\n  triggerViewActions(guid, eventName) {\n    return this.runtimeViewModel.triggerViewActions(guid, eventName);\n  }\n  cancel(skipDirtyCheck) {\n    return this.runtimeViewModel.cancel(skipDirtyCheck);\n  }\n  close() {\n    return this.runtimeViewModel.close();\n  }\n  getViewInputParameters() {\n    return this.runtimeViewModel.getViewInputParameters();\n  }\n  applyViewPreset(viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets) {\n    return this.runtimeViewModel.applyViewPreset(viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets);\n  }\n  deleteViewPreset(viewPresetGuid) {\n    return this.runtimeViewModel.deleteViewPreset(viewPresetGuid);\n  }\n  discardViewPresetChanges(viewPresetGuid, sharedViewPresets) {\n    return this.runtimeViewModel.discardViewPresetChanges(viewPresetGuid, sharedViewPresets);\n  }\n  saveViewPreset(viewPresetGuid) {\n    return this.runtimeViewModel.saveViewPreset(viewPresetGuid);\n  }\n  shareViewPreset(viewPresetSelectorGuid) {\n    return this.runtimeViewModel.shareViewPreset(viewPresetSelectorGuid);\n  }\n}\nRuntimeViewModelApi.ɵfac = function RuntimeViewModelApi_Factory(t) {\n  return new (t || RuntimeViewModelApi)();\n};\nRuntimeViewModelApi.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RuntimeViewModelApi,\n  factory: RuntimeViewModelApi.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewModelApi, [{\n    type: Injectable\n  }], null, null);\n})();\nclass ComponentExpression {\n  constructor(propertyName, expression, rxExpressionEvaluatorService, customEvaluatorService) {\n    this.propertyName = propertyName;\n    this.expression = expression;\n    this.rxExpressionEvaluatorService = rxExpressionEvaluatorService;\n    this.customEvaluatorService = customEvaluatorService;\n  }\n  evaluate(expressionContext) {\n    return this.rxExpressionEvaluatorService.tryEvaluate(this.expression, expressionContext, this.customEvaluatorService);\n  }\n  hasDependency(guid, propertyName) {\n    return includes(this.expression, `${guid}.${propertyName}`);\n  }\n  hasTokens() {\n    return includes(this.expression, '${view.') || this.hasKeywordTokens();\n  }\n  hasKeywordTokens() {\n    return includes(this.expression, '${keywords.');\n  }\n  hasViewTokens() {\n    return includes(this.expression, '${view.inputParams') || includes(this.expression, '${view.api') || this.hasViewIsValidToken();\n  }\n  hasViewIsValidToken() {\n    return includes(this.expression, '${view.isValid}');\n  }\n  hasComponentTokens() {\n    return includes(this.expression, '${view.components');\n  }\n}\nclass ViewComponentEventManager {\n  constructor(rxGlobalEventsService, rxLogService, rxViewActionService, errorHandler) {\n    this.rxGlobalEventsService = rxGlobalEventsService;\n    this.rxLogService = rxLogService;\n    this.rxViewActionService = rxViewActionService;\n    this.errorHandler = errorHandler;\n  }\n  executeActions(actions, actionCallback) {\n    return new Promise((resolve, reject) => {\n      let resultValue;\n      from(actions).pipe(mergeScan((acc, currentAction) => {\n        this.rxLogService.debug('ACTION STARTED: ' + currentAction.name);\n        return this.rxViewActionService.execute(currentAction.name, currentAction.parameters).pipe(map(result => actionCallback(currentAction, result)), take(1));\n      }, null, 1)).subscribe({\n        next: result => resultValue = result,\n        error: error => {\n          reject(error);\n          this.rxGlobalEventsService.viewActionsCompleted$.next();\n          castArray(error).forEach(e => {\n            if (isString(e)) {\n              this.rxLogService.warning(e);\n            } else if (e) {\n              this.errorHandler.handleError(e);\n            }\n          });\n        },\n        complete: () => {\n          this.rxGlobalEventsService.viewActionsCompleted$.next();\n          resolve(resultValue);\n        }\n      });\n    });\n  }\n}\nViewComponentEventManager.ɵfac = function ViewComponentEventManager_Factory(t) {\n  return new (t || ViewComponentEventManager)(i0.ɵɵinject(i1.RxGlobalEventsService), i0.ɵɵinject(i1.RxLogService), i0.ɵɵinject(i2$1.RxViewActionService), i0.ɵɵinject(i0.ErrorHandler));\n};\nViewComponentEventManager.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ViewComponentEventManager,\n  factory: ViewComponentEventManager.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ViewComponentEventManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.RxGlobalEventsService\n    }, {\n      type: i1.RxLogService\n    }, {\n      type: i2$1.RxViewActionService\n    }, {\n      type: i0.ErrorHandler\n    }];\n  }, null);\n})();\nconst VIEW_COMPONENT_DEFAULT_EVENT_NAME = 'default';\nclass RxRuntimeViewUtilsService {\n  constructor(rxViewDefinitionService, rxViewDefinitionParserService, rxDefinitionAdapterRegistryService, rxViewActionDefinitionAdapterRegistryService, rxViewDefinitionCacheService) {\n    this.rxViewDefinitionService = rxViewDefinitionService;\n    this.rxViewDefinitionParserService = rxViewDefinitionParserService;\n    this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;\n    this.rxViewActionDefinitionAdapterRegistryService = rxViewActionDefinitionAdapterRegistryService;\n    this.rxViewDefinitionCacheService = rxViewDefinitionCacheService;\n  }\n  isViewCancellable(viewDefinitionName) {\n    if (isString(viewDefinitionName)) {\n      return this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(map(viewDefinition => this.hasPageComponent(viewDefinition) || this.hasViewCancellingAction(viewDefinition)));\n    } else {\n      return of(this.hasPageComponent(viewDefinitionName) || this.hasViewCancellingAction(viewDefinitionName));\n    }\n  }\n  runAdaptersForComponents(viewDefinition, containerViewComponentDefinition) {\n    const componentPairs = this.rxViewDefinitionParserService.getComponents(containerViewComponentDefinition || viewDefinition);\n    const regex = new RegExp(`\\\\$\\{view.components.${RX_GUID.baseGuidPattern}.`);\n    viewDefinition.viewComponentExpressions = chain(componentPairs).map(component => values(component.componentDefinition.propertiesByName)).flatten().map(propertyValue => isObject(propertyValue) ? values(propertyValue) : propertyValue).flatten().filter(isString).filter(propertyValue => regex.test(propertyValue)).value();\n    const result = componentPairs.reduce((adapterObservables$, {\n      componentDefinition\n    }) => {\n      const adapter = componentDefinition.type === RxViewComponentType.Action ? this.rxViewActionDefinitionAdapterRegistryService.getRuntimeAdapter(componentDefinition.propertiesByName.name) : this.rxDefinitionAdapterRegistryService.getRuntimeAdapter(componentDefinition.type);\n      if (adapter) {\n        const result$ = adapter.adaptDefinition(componentDefinition, viewDefinition);\n        adapterObservables$.push(result$ ? result$.pipe(take(1)) : EMPTY);\n      }\n      return adapterObservables$;\n    }, []);\n    return isEmpty(result) ? [EMPTY] : result;\n  }\n  hasViewCancellingAction(viewDefinition) {\n    return Boolean(this.rxViewDefinitionParserService.findViewComponent(viewDefinition, viewComponentDefinition => viewComponentDefinition.type === RxViewComponentType.Action && viewComponentDefinition.propertiesByName.name === 'rxCloseViewAction' && viewComponentDefinition.propertiesByName.actAsCancel === 'true'));\n  }\n  hasPageComponent(viewDefinition) {\n    var _a;\n    return ((_a = head(viewDefinition.componentDefinitions)) === null || _a === void 0 ? void 0 : _a.type) === RxViewComponentType.Page;\n  }\n}\nRxRuntimeViewUtilsService.ɵfac = function RxRuntimeViewUtilsService_Factory(t) {\n  return new (t || RxRuntimeViewUtilsService)(i0.ɵɵinject(i2$1.RxViewDefinitionService), i0.ɵɵinject(i2$1.RxViewDefinitionParserService), i0.ɵɵinject(i1.RxDefinitionAdapterRegistryService), i0.ɵɵinject(i2$1.RxViewActionDefinitionAdapterRegistryService), i0.ɵɵinject(i2$1.RxViewDefinitionCacheService));\n};\nRxRuntimeViewUtilsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRuntimeViewUtilsService,\n  factory: RxRuntimeViewUtilsService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRuntimeViewUtilsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i2$1.RxViewDefinitionService\n    }, {\n      type: i2$1.RxViewDefinitionParserService\n    }, {\n      type: i1.RxDefinitionAdapterRegistryService\n    }, {\n      type: i2$1.RxViewActionDefinitionAdapterRegistryService\n    }, {\n      type: i2$1.RxViewDefinitionCacheService\n    }];\n  }, null);\n})();\nclass RxViewDefinitionAdapterService {\n  constructor(rxObjectUtilsService, rxJsonParserService, rxDeviceDetectionService) {\n    this.rxObjectUtilsService = rxObjectUtilsService;\n    this.rxJsonParserService = rxJsonParserService;\n    this.rxDeviceDetectionService = rxDeviceDetectionService;\n  }\n  // called to make view modifications before the view component adapters are executed\n  preProcessViewDefinition(viewDefinition) {\n    var _a;\n    (_a = viewDefinition.componentDefinitions) === null || _a === void 0 ? void 0 : _a.forEach(childComponentDefinition => {\n      this.expandProperties(childComponentDefinition);\n    });\n  }\n  // called to make view modifications after the view component adapters have been executed\n  postProcessViewDefinition(viewDefinition) {\n    var _a;\n    (_a = viewDefinition.componentDefinitions) === null || _a === void 0 ? void 0 : _a.forEach(childComponentDefinition => {\n      this.filterComponentsForDevice(childComponentDefinition, viewDefinition);\n    });\n  }\n  expandProperties(componentDefinition) {\n    componentDefinition.propertiesByName = this.rxObjectUtilsService.expandProperties(componentDefinition.propertiesByName);\n    if (componentDefinition.componentDefinitions) {\n      componentDefinition.componentDefinitions.forEach(childComponentDefinition => {\n        this.expandProperties(childComponentDefinition);\n      });\n    }\n  }\n  filterComponentsForDevice(componentDefinition, parent) {\n    var _a;\n    const availableOnDevicesProp = this.rxJsonParserService.tryParseJson((_a = componentDefinition.propertiesByName) === null || _a === void 0 ? void 0 : _a[RX_AVAILABLE_ON_DEVICES_PROP_NAME], RX_AVAILABLE_ON_DEVICES_ALL_VALUE) || RX_AVAILABLE_ON_DEVICES_ALL_VALUE;\n    if (availableOnDevicesProp.includes(this.rxDeviceDetectionService.currentDevice)) {\n      if ('componentDefinitions' in componentDefinition) {\n        componentDefinition.componentDefinitions.forEach(childComponentDefinition => {\n          this.filterComponentsForDevice(childComponentDefinition, componentDefinition);\n        });\n      }\n    } else {\n      parent.componentDefinitions = parent.componentDefinitions.filter(definition => definition !== componentDefinition);\n      if (parent.layout) {\n        const updatedLayout = RxViewLayout.removeChildFromLayout(this.rxJsonParserService.tryParseJson(parent.layout), componentDefinition.guid);\n        parent.layout = JSON.stringify(updatedLayout);\n      }\n    }\n  }\n}\nRxViewDefinitionAdapterService.ɵfac = function RxViewDefinitionAdapterService_Factory(t) {\n  return new (t || RxViewDefinitionAdapterService)(i0.ɵɵinject(i2$2.RxObjectUtilsService), i0.ɵɵinject(i2$2.RxJsonParserService), i0.ɵɵinject(i2$1.RxDeviceDetectionService));\n};\nRxViewDefinitionAdapterService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxViewDefinitionAdapterService,\n  factory: RxViewDefinitionAdapterService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxViewDefinitionAdapterService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i2$2.RxObjectUtilsService\n    }, {\n      type: i2$2.RxJsonParserService\n    }, {\n      type: i2$1.RxDeviceDetectionService\n    }];\n  }, null);\n})();\nclass RuntimeViewModel {\n  constructor(rxBundleService, rxGlobalCacheService, rxViewComponentRegistryService, rxViewDefinitionAdapterService, rxViewDefinitionParserService, rxViewDefinitionService, rxRuntimeViewUtilsService, rxExpressionEvaluatorService, rxNotificationService, rxViewActionRegistryService, rxLogService, viewComponentEventManager, rxUtilityModalsService, rxViewDefinitionCacheService, rxObjectUtilsService, rxJsonParserService, rxCurrentUserService) {\n    this.rxBundleService = rxBundleService;\n    this.rxGlobalCacheService = rxGlobalCacheService;\n    this.rxViewComponentRegistryService = rxViewComponentRegistryService;\n    this.rxViewDefinitionAdapterService = rxViewDefinitionAdapterService;\n    this.rxViewDefinitionParserService = rxViewDefinitionParserService;\n    this.rxViewDefinitionService = rxViewDefinitionService;\n    this.rxRuntimeViewUtilsService = rxRuntimeViewUtilsService;\n    this.rxExpressionEvaluatorService = rxExpressionEvaluatorService;\n    this.rxNotificationService = rxNotificationService;\n    this.rxViewActionRegistryService = rxViewActionRegistryService;\n    this.rxLogService = rxLogService;\n    this.viewComponentEventManager = viewComponentEventManager;\n    this.rxUtilityModalsService = rxUtilityModalsService;\n    this.rxViewDefinitionCacheService = rxViewDefinitionCacheService;\n    this.rxObjectUtilsService = rxObjectUtilsService;\n    this.rxJsonParserService = rxJsonParserService;\n    this.rxCurrentUserService = rxCurrentUserService;\n    // public api which available for runtime view client\n    this.api = {\n      save: this.save.bind(this),\n      close: this.close.bind(this),\n      cancel: this.cancel.bind(this),\n      refresh: this.refresh.bind(this),\n      canClose: this.canClose.bind(this),\n      applyViewPreset: this.applyViewPreset.bind(this),\n      deleteViewPreset: this.deleteViewPreset.bind(this),\n      discardViewPresetChanges: this.discardViewPresetChanges.bind(this),\n      saveViewPreset: this.saveViewPreset.bind(this)\n    };\n    this.saveSubject = new Subject();\n    this.closeSubject = new Subject();\n    this.cancelSubject = new Subject();\n    this.save$ = this.saveSubject.asObservable();\n    this.close$ = this.closeSubject.asObservable();\n    this.cancel$ = this.cancelSubject.asObservable();\n    this.viewComponentStates = new Map();\n    // store all components state, needed for component expression re-evaluation\n    this.evaluationData = {\n      view: {\n        api: this.api,\n        components: {},\n        inputParams: {},\n        isValid: false\n      },\n      keywords: {\n        user: this.rxCurrentUserService.getName(),\n        newLine: '\\n'\n      }\n    };\n  }\n  init(configuration) {\n    this.configuration = configuration;\n    this.clear();\n    const viewDefinition$ = isString(configuration.viewDefinitionName) ? this.rxViewDefinitionCacheService.getViewDefinition(configuration.viewDefinitionName) : of(configuration.viewDefinitionName);\n    return viewDefinition$.pipe(switchMap(viewDefinition => {\n      const viewComponents = this.rxViewDefinitionParserService.getComponents(viewDefinition, true);\n      const ownerBundleIds = viewComponents.map(viewComponent => viewComponent.componentDefinition.type === RxViewComponentType.Action ? this.rxViewActionRegistryService.getActionOwnerBundleId(viewComponent.componentDefinition.propertiesByName.name) : this.rxViewComponentRegistryService.getComponentOwnerBundleId(viewComponent.componentDefinition.type));\n      return merge(...ownerBundleIds).pipe(filter(Boolean), distinct(), reduce((acc, bundleId) => {\n        acc.push(bundleId);\n        return acc;\n      }, []), switchMap(bundleIds => bundleIds.length ? this.rxBundleService.loadBundles(bundleIds, true).pipe(map(() => viewDefinition)) : of(viewDefinition)), switchMap(viewDefinition => this.rxViewComponentRegistryService.resolveAsyncDescriptors().pipe(map(() => viewDefinition))));\n    }), switchMap(viewDefinition => this.processViewDefinition(viewDefinition)));\n  }\n  clear() {\n    this.viewComponentStates.clear();\n    this.evaluationData.view.components = {};\n    this.evaluationData.view.inputParams = {};\n  }\n  save(closeViewAfterSave = false) {\n    return this.callRuntimeComponentsApi('save', closeViewAfterSave).pipe(tap({\n      complete: () => this.saveSubject.next()\n    }));\n  }\n  close() {\n    const viewOutputParams = this.evaluateViewOutputParams();\n    this.closeSubject.next(viewOutputParams);\n    return of(viewOutputParams);\n  }\n  cancel(skipDirtyCheck) {\n    if (skipDirtyCheck) {\n      this.cancelSubject.next();\n      return EMPTY;\n    } else {\n      return this.isDirtyView().pipe(switchMap(isDirty => isDirty ? this.rxUtilityModalsService.confirmUnsavedChanges() : of(true)), tap(canClose => {\n        if (canClose) {\n          this.cancelSubject.next();\n        }\n      }), switchMap(canClose => {\n        return canClose ? EMPTY : throwError(null);\n      }));\n    }\n  }\n  refresh() {\n    return this.callRuntimeComponentsApi('refresh');\n  }\n  canClose() {\n    let canClose = true;\n    this.isDirtyView().subscribe(isDirty => canClose = !isDirty);\n    return canClose;\n  }\n  applyViewPreset(viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets) {\n    return this.callRuntimeComponentsApi('applyViewPreset', viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets).pipe(switchMap(() => EMPTY));\n  }\n  deleteViewPreset(viewPresetGuid) {\n    return this.callRuntimeComponentsApi('deleteViewPreset', viewPresetGuid).pipe(switchMap(() => EMPTY));\n  }\n  discardViewPresetChanges(viewPresetGuid, sharedViewPresets) {\n    return this.callRuntimeComponentsApi('discardViewPresetChanges', viewPresetGuid, sharedViewPresets).pipe(switchMap(() => EMPTY));\n  }\n  saveViewPreset(viewPresetGuid) {\n    return this.callRuntimeComponentsApi('saveViewPreset', viewPresetGuid).pipe(switchMap(() => EMPTY));\n  }\n  shareViewPreset(viewPresetSelectorGuid) {\n    return this.callRuntimeComponentsApi('shareViewPreset', viewPresetSelectorGuid).pipe(defaultIfEmpty([]), map(data => data.filter(item => Boolean(item === null || item === void 0 ? void 0 : item.data)).reduce((result, item) => {\n      result[item.guid] = item.data;\n      return result;\n    }, {})));\n  }\n  // launch view component actions for particular event\n  triggerViewActions(componentGuid, viewActionTriggerEventName) {\n    let actionsResult = Promise.resolve();\n    const viewComponentState = this.viewComponentStates.get(componentGuid);\n    if (viewComponentState) {\n      const eventState = viewComponentState.eventStates[viewActionTriggerEventName];\n      if (eventState) {\n        const actionStates = eventState.map(actionState => ({\n          guid: actionState.guid,\n          name: actionState.name,\n          parameters: actionState.config\n        }));\n        // execute view component actions for particular event\n        actionsResult = this.viewComponentEventManager.executeActions(actionStates, (actionState, result) => {\n          // hook which is called after each action execution\n          // update action shared state and re-evaluate dependent action view component\n          this.onViewComponentActionOutputChanged(componentGuid, actionState.guid, result);\n        });\n      } else {\n        this.rxLogService.warning(`Cannot trigger view actions. View Action Trigger Event ${viewActionTriggerEventName} not found.`);\n      }\n    } else {\n      this.rxLogService.warning(`Cannot trigger view actions. View Component ${componentGuid} not found.`);\n    }\n    return actionsResult;\n  }\n  // hook which is called when view component triggers \"property changed\" event\n  onViewComponentPropertyChanged({\n    guid,\n    propertyName,\n    newValue\n  }) {\n    const viewComponentState = this.viewComponentStates.get(guid);\n    viewComponentState.publicState[propertyName] = newValue;\n    this.updateEvaluationData(viewComponentState);\n    // update config if changed property exist in component properties descriptor\n    if (propertyName !== 'api' && some(viewComponentState.componentDescriptor.properties, {\n      name: propertyName\n    })) {\n      this.updateComponentConfigProperty(propertyName, newValue, viewComponentState);\n      this.updateViewComponentConfig(viewComponentState);\n    }\n    const dependentViewComponentGuids = viewComponentState.dependentViewComponentsMap.get(propertyName);\n    let dependentViewComponentStates;\n    // find all view components which depend on changed view component based on expressions\n    if (dependentViewComponentGuids) {\n      // restore dependent components from the cache\n      dependentViewComponentStates = dependentViewComponentGuids.map(viewComponentGuid => this.viewComponentStates.get(viewComponentGuid));\n    } else {\n      dependentViewComponentStates = this.getDependentViewComponentStates(expression => expression.hasDependency(guid, propertyName));\n      // cache dependent view component guids\n      viewComponentState.dependentViewComponentsMap.set(propertyName, dependentViewComponentStates.map(state => state.guid));\n    }\n    // evaluate expressions for all dependent view components\n    dependentViewComponentStates.forEach(dependentViewComponentState => {\n      this.evaluateDependentProperties(dependentViewComponentState, guid, propertyName);\n    });\n    // update config$ for all dependent view components\n    dependentViewComponentStates.map(dependentViewComponentState => {\n      // if dependentViewComponentState is data view component\n      // config$ should be updated for nearest parent view component with UI representation\n      // i.e. if rx-record-grid-column is dependent component then rx-record-grid config$ should be update\n      if (dependentViewComponentState.isDataViewComponent) {\n        return this.getParentViewComponent(dependentViewComponentState);\n      } else {\n        return dependentViewComponentState;\n      }\n    }).forEach(dependentViewComponentState => {\n      this.updateViewComponentConfig(dependentViewComponentState);\n    });\n    if (propertyName === 'isValid') {\n      this.triggerViewValidation(newValue);\n    }\n  }\n  // ts guard - defines whether componentDescriptor is data view component\n  isDataViewComponentDefinition(componentDescriptor) {\n    return componentDescriptor.configPropertyName !== undefined;\n  }\n  getViewInputParameters() {\n    return this.configuration.inputParams;\n  }\n  isDirtyView() {\n    // Used a separate observable to handle scenario when callRuntimeComponentsApi observable\n    // will be immediately completed. It can happen when no view components will have 'isDirty' API.\n    const isDirtySubject = new ReplaySubject(1);\n    let isDirtyView = false;\n    if (this.isUserInteractionDetected) {\n      this.callRuntimeComponentsApi('isDirty').pipe(tap(result => isDirtyView = result.some(({\n        data\n      }) => data))).subscribe({\n        complete: () => isDirtySubject.next(isDirtyView)\n      });\n    } else {\n      isDirtySubject.next(isDirtyView);\n    }\n    return isDirtySubject.asObservable().pipe(take(1));\n  }\n  triggerViewValidation(isValid) {\n    if (isValid) {\n      isValid = Array.from(this.viewComponentStates.values()).filter(viewComponent => has(viewComponent.publicState, 'isValid')).every(viewComponent => viewComponent.publicState.isValid);\n    }\n    if (this.evaluationData.view.isValid !== isValid) {\n      this.evaluationData.view.isValid = isValid;\n      let dependentViewComponentStates;\n      if (this.dependentOnViewIsValidPropViewComponentGuids) {\n        dependentViewComponentStates = this.dependentOnViewIsValidPropViewComponentGuids.map(guid => this.viewComponentStates.get(guid));\n      } else {\n        dependentViewComponentStates = this.getDependentViewComponentStates(expression => expression.hasViewIsValidToken());\n        this.dependentOnViewIsValidPropViewComponentGuids = dependentViewComponentStates.map(state => state.guid);\n      }\n      dependentViewComponentStates.forEach(viewComponentState => {\n        this.evaluateComponentExpressions(viewComponentState, expression => expression.hasViewIsValidToken());\n      });\n      // update view component configs in next javascript event loop, to avoid\n      // 'ExpressionChangedAfterItHasBeenCheckedError' error in components,\n      // dependent on the view isValid property e.g Action button disabled property\n      asyncScheduler.schedule(() => {\n        dependentViewComponentStates.forEach(this.updateViewComponentConfig.bind(this));\n      });\n    }\n  }\n  // return nearest parent view component with UI representation\n  getParentViewComponent(viewComponentState) {\n    let currentViewComponentState = viewComponentState;\n    while (currentViewComponentState.isDataViewComponent) {\n      currentViewComponentState = this.viewComponentStates.get(currentViewComponentState.parentViewComponentGuid);\n    }\n    return currentViewComponentState;\n  }\n  // return all view components which depend on particular expression\n  getDependentViewComponentStates(expressionFilterFn) {\n    return Array.from(this.viewComponentStates.values()).filter(viewComponentState => {\n      const isDependentComponentState = some(viewComponentState.expressions, expressionFilterFn);\n      const isDependentEventState = some(viewComponentState.eventStates, eventState => some(eventState, event => some(event.expressions, expressionFilterFn)));\n      return isDependentComponentState || isDependentEventState;\n    });\n  }\n  // pass new view component config to the @Component\n  updateViewComponentConfig(viewComponentState) {\n    // finally update config\n    viewComponentState.config$.next(this.buildComponentConfig(viewComponentState));\n  }\n  // build view component config based on configState and child data view component\n  buildComponentConfig(viewComponentState) {\n    const viewComponentConfigState = Object.assign({}, viewComponentState.configState);\n    // build child data component states\n    this.buildComponentChildDataConfig(viewComponentState, viewComponentConfigState);\n    return viewComponentConfigState;\n  }\n  // recursively build view component config based on data view components\n  buildComponentChildDataConfig(viewComponentState, viewComponentChildConfig = {}) {\n    // find all child data view components\n    const dataViewComponentChildStates = viewComponentState.childViewComponentGuids.map(viewComponentGuid => this.viewComponentStates.get(viewComponentGuid)).filter(currentViewComponentState => Boolean(currentViewComponentState)).filter(currentViewComponentState => currentViewComponentState.isDataViewComponent);\n    // group data view components on config property name\n    const dataViewComponentChildStateGroups = groupBy(dataViewComponentChildStates, dataViewComponentState => dataViewComponentState.configPropertyName);\n    // store each data view component config under corresponding config property name\n    Object.keys(dataViewComponentChildStateGroups).forEach(configPropertyName => {\n      viewComponentChildConfig[configPropertyName] = dataViewComponentChildStateGroups[configPropertyName].map(dataViewComponentStateChild => {\n        const dataViewComponentChildState = Object.assign({}, dataViewComponentStateChild.configState);\n        // recursively build data view component config\n        this.buildComponentChildDataConfig(dataViewComponentStateChild, dataViewComponentChildState);\n        return dataViewComponentChildState;\n      });\n    });\n  }\n  // update action view component shared state\n  // re-evaluate all dependent action view components\n  onViewComponentActionOutputChanged(componentGuid, actionGuid, viewActionOutput) {\n    const viewComponentState = this.viewComponentStates.get(componentGuid);\n    if (viewComponentState) {\n      const actionState = viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME].find(currentAction => {\n        return currentAction.guid === actionGuid;\n      });\n      actionState.publicState.output = viewActionOutput;\n      this.updateEvaluationData(viewComponentState);\n      this.evaluateDependentProperties(viewComponentState, actionGuid, 'output');\n    }\n  }\n  evaluateViewOutputParams() {\n    return this.viewDefinition.outputParams.reduce((result, outputParam) => {\n      result[outputParam.name] = this.rxExpressionEvaluatorService.tryEvaluate(outputParam.source, this.evaluationData);\n      return result;\n    }, {});\n  }\n  processViewDefinition(viewDefinition) {\n    this.viewDefinition = this.rxObjectUtilsService.cloneDeep(viewDefinition);\n    this.rxViewDefinitionAdapterService.preProcessViewDefinition(this.viewDefinition);\n    const adapters$ = this.rxRuntimeViewUtilsService.runAdaptersForComponents(this.viewDefinition);\n    return combineLatest(adapters$).pipe(switchMapTo(EMPTY), tap({\n      complete: () => {\n        this.rxViewDefinitionAdapterService.postProcessViewDefinition(this.viewDefinition);\n        this.rxViewDefinitionParserService.getComponents(this.viewDefinition).forEach(this.processComponentDefinition.bind(this));\n        // evaluate expressions with keyword tokens\n        this.viewComponentStates.forEach(viewComponent => {\n          this.evaluateComponentExpressions(viewComponent, componentExpression => componentExpression.hasKeywordTokens());\n        });\n        // evaluate expressions without tokens\n        this.viewComponentStates.forEach(viewComponent => {\n          this.evaluateComponentExpressions(viewComponent, componentExpression => !componentExpression.hasTokens());\n        });\n        // evaluate expressions with view tokens\n        this.viewComponentStates.forEach(viewComponent => {\n          this.evaluateComponentExpressions(viewComponent, componentExpression => componentExpression.hasViewTokens());\n        });\n        // evaluate expressions with component tokens\n        this.viewComponentStates.forEach(viewComponent => {\n          this.evaluateComponentExpressions(viewComponent, componentExpression => componentExpression.hasComponentTokens());\n        });\n        // update all component configs\n        this.viewComponentStates.forEach(viewComponentState => {\n          this.updateViewComponentConfig(viewComponentState);\n        });\n      }\n    }));\n  }\n  processComponentDefinition(componentDefinitionItem) {\n    if (!componentDefinitionItem.parentComponentDefinition) {\n      // process root component definition\n      const configuredParamNames = map$1(componentDefinitionItem.componentDefinition.inputParams, 'name');\n      const passedParamNames = keys(this.configuration.inputParams);\n      const onlyPositionalParams = passedParamNames.length > 0 && every(passedParamNames, inputParamName => /^\\$[0-9]+\\$$/.test(inputParamName));\n      if (onlyPositionalParams && intersection(configuredParamNames, passedParamNames).length === 0) {\n        forEach(passedParamNames, inputParamName => {\n          const paramIndex = Number(inputParamName.match(/^\\$([0-9]+)\\$$/)[1]);\n          const definitionParamName = get(componentDefinitionItem.componentDefinition, `inputParams[${paramIndex}].name`);\n          this.evaluationData.view.inputParams[definitionParamName] = this.configuration.inputParams[inputParamName];\n        });\n      } else {\n        forEach(configuredParamNames, inputParamName => {\n          this.evaluationData.view.inputParams[inputParamName] = this.configuration.inputParams[inputParamName];\n        });\n      }\n    } else {\n      const componentDefinition = componentDefinitionItem.componentDefinition;\n      const viewComponentState = this.buildViewComponentState(componentDefinitionItem);\n      if (viewComponentState) {\n        this.viewComponentStates.set(componentDefinition.guid, viewComponentState);\n      }\n    }\n  }\n  // generate view component state based on component definition\n  buildViewComponentState(componentDefinitionItem) {\n    const componentDefinition = componentDefinitionItem.componentDefinition;\n    const componentDescriptor = this.rxViewComponentRegistryService.get(componentDefinition.type);\n    if (componentDescriptor) {\n      const viewComponentState = {\n        guid: componentDefinition.guid,\n        type: componentDefinition.type,\n        config$: new BehaviorSubject({}),\n        expressions: [],\n        eventStates: {\n          [VIEW_COMPONENT_DEFAULT_EVENT_NAME]: []\n        },\n        configState: {},\n        publicState: {},\n        isDataViewComponent: false,\n        configPropertyName: null,\n        parentViewComponentGuid: componentDefinitionItem.parentComponentDefinition.guid,\n        childViewComponentGuids: [],\n        dependentViewComponentsMap: new Map(),\n        componentDescriptor\n      };\n      if (this.isDataViewComponentDefinition(componentDescriptor)) {\n        viewComponentState.isDataViewComponent = true;\n        viewComponentState.configPropertyName = componentDescriptor.configPropertyName;\n      }\n      forOwn(componentDefinition.propertiesByName, (propertyValue, propertyName) => {\n        const viewComponentPropertyDescriptor = find(componentDescriptor.properties, descriptor => propertyName === descriptor.name);\n        const isExpressionEvaluationEnabled = viewComponentPropertyDescriptor && viewComponentPropertyDescriptor.enableExpressionEvaluation;\n        // initialize view component expressions\n        if (isExpressionEvaluationEnabled) {\n          // create expression for property\n          viewComponentState.expressions.push(new ComponentExpression(propertyName, propertyValue, this.rxExpressionEvaluatorService, viewComponentPropertyDescriptor.evaluatorService));\n        }\n        // update view component config state object\n        this.updateComponentConfigProperty(propertyName, isExpressionEvaluationEnabled ? null : propertyValue, viewComponentState);\n      });\n      // add initial view component state to evaluationData\n      this.updateEvaluationData(viewComponentState);\n      if (this.isContainerComponentDefinition(componentDefinition)) {\n        // set up view component events\n        componentDefinition.componentDefinitions.filter(currentComponentDefinition => currentComponentDefinition.type === RxViewComponentType.Action).forEach(actionComponentDefinition => {\n          const actionState = this.buildViewComponentActionState(actionComponentDefinition);\n          if (actionState) {\n            viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME].push(actionState);\n          }\n        });\n        // sort actions in correct order\n        viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME] = sortBy(viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME], 'index');\n        // set up child view component guids\n        viewComponentState.childViewComponentGuids = componentDefinition.componentDefinitions.filter(currentComponentDefinition => currentComponentDefinition.type !== RxViewComponentType.Action).map(currentComponentDefinition => currentComponentDefinition.guid);\n      }\n      return viewComponentState;\n    } else if (componentDefinition.type !== RxViewComponentType.Action) {\n      this.rxLogService.warning(`Cannot initialize view component. View Component Descriptor for ${componentDefinition.type} not found.`);\n    }\n  }\n  // generate action view component state\n  buildViewComponentActionState(actionComponentDefinition) {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionComponentDefinition.propertiesByName.name);\n    if (actionDescriptor) {\n      const actionState = {\n        guid: actionComponentDefinition.guid,\n        name: actionComponentDefinition.propertiesByName.name,\n        index: toNumber(actionComponentDefinition.propertiesByName.index) || 0,\n        config: {},\n        publicState: {},\n        expressions: []\n      };\n      Object.keys(actionComponentDefinition.propertiesByName || {}).filter(parameterName => parameterName !== 'name').map(parameterName => {\n        const actionPropertyDescriptor = (actionDescriptor.parameters || []).find(descriptor => parameterName === descriptor.name);\n        const isExpressionEvaluationEnabled = actionPropertyDescriptor && actionPropertyDescriptor.enableExpressionEvaluation;\n        // initialize action view component expressions\n        if (isExpressionEvaluationEnabled) {\n          // create expression for property\n          this.initializeActionExpressionForProperty(actionState, actionPropertyDescriptor.evaluatorService, parameterName, actionComponentDefinition.propertiesByName[parameterName]);\n        }\n        // add initial action view component state to evaluationData\n        this.updateActionConfigProperty(parameterName, isExpressionEvaluationEnabled ? null : actionComponentDefinition.propertiesByName[parameterName], actionState);\n      });\n      return actionState;\n    }\n  }\n  initializeActionExpressionForProperty(actionState, evaluatorService, propertyName, propertyValue) {\n    if (isObject(propertyValue)) {\n      forIn(propertyValue, (value, name) => {\n        this.initializeActionExpressionForProperty(actionState, evaluatorService, `${propertyName}.${name}`, value);\n      });\n    } else {\n      actionState.expressions.push(new ComponentExpression(propertyName, propertyValue, this.rxExpressionEvaluatorService, evaluatorService));\n    }\n  }\n  callRuntimeComponentsApi(methodName, ...args) {\n    const resultSubject = new ReplaySubject(1);\n    const errors = [];\n    const apiCallResults = Array.from(this.viewComponentStates.values()).filter(viewComponent => Boolean(viewComponent.publicState.api && isFunction(viewComponent.publicState.api[methodName]))).map(viewComponent => {\n      let result = viewComponent.publicState.api[methodName].apply(null, args);\n      if (result && result.then) {\n        result = from(result);\n      } else if (!(result instanceof Observable)) {\n        result = of(result);\n      }\n      return result.pipe(take(1), map(res => ({\n        guid: viewComponent.guid,\n        data: res\n      })), tap({\n        error: error => errors.push(error)\n      }),\n      // catch errors from each view component api call to allow to successfully finish other api calls.\n      catchError(() => EMPTY));\n    });\n    combineLatest(apiCallResults).subscribe({\n      next: results => resultSubject.next(results),\n      complete: () => isEmpty(errors) ? resultSubject.complete() : resultSubject.error(errors)\n    });\n    return resultSubject.asObservable();\n  }\n  evaluateComponentExpressions(viewComponent, expressionFilterFunc) {\n    // update component expressions\n    viewComponent.expressions.filter(expressionFilterFunc).forEach(componentExpression => {\n      this.updateComponentConfigProperty(componentExpression.propertyName, this.evaluateExpression(componentExpression), viewComponent);\n    });\n    this.updateEvaluationData(viewComponent);\n    // update event expressions\n    Object.keys(viewComponent.eventStates).forEach(eventName => {\n      viewComponent.eventStates[eventName].forEach(actionState => {\n        actionState.expressions.filter(expressionFilterFunc).forEach(componentExpression => {\n          this.updateActionConfigProperty(componentExpression.propertyName, this.evaluateExpression(componentExpression), actionState);\n          this.updateEvaluationData(viewComponent);\n        });\n      });\n    });\n  }\n  evaluateDependentProperties(viewComponent, guid, propertyName) {\n    this.evaluateComponentExpressions(viewComponent, componentExpression => componentExpression.hasDependency(guid, propertyName));\n  }\n  evaluateExpression(componentExpression) {\n    let evaluatedValue;\n    try {\n      evaluatedValue = componentExpression.evaluate(this.evaluationData);\n    } catch (e) {\n      evaluatedValue = null;\n      this.rxNotificationService.addErrorMessage(e.message, '');\n    }\n    return evaluatedValue;\n  }\n  // update view component config property based on property descriptor\n  updateComponentConfigProperty(propertyName, propertyValue, viewComponent) {\n    const viewComponentDescriptor = this.rxViewComponentRegistryService.get(viewComponent.type);\n    const viewComponentPropertyDescriptor = find(viewComponentDescriptor.properties, {\n      name: propertyName\n    });\n    viewComponent.configState[propertyName] = this.processPropertyValue(propertyValue, viewComponentPropertyDescriptor);\n  }\n  // update action view component config property based on property descriptor\n  updateActionConfigProperty(propertyName, propertyValue, actionComponent) {\n    const viewActionDescriptor = this.rxViewActionRegistryService.get(actionComponent.name);\n    let viewActionParameterDescriptor = find(viewActionDescriptor.parameters, {\n      name: propertyName\n    });\n    if (!viewActionParameterDescriptor && includes(propertyName, '.')) {\n      const primaryPropertyName = propertyName.split('.')[0];\n      viewActionParameterDescriptor = find(viewActionDescriptor.parameters, {\n        name: primaryPropertyName\n      });\n    }\n    set(actionComponent.config, propertyName, this.processPropertyValue(propertyValue, viewActionParameterDescriptor));\n  }\n  // sync component data with expression data\n  updateEvaluationData(viewComponent) {\n    // update component data\n    this.evaluationData.view.components[viewComponent.guid] = Object.assign(Object.assign({}, viewComponent.configState), viewComponent.publicState);\n    // update component actions data\n    Object.keys(viewComponent.eventStates).forEach(eventName => {\n      viewComponent.eventStates[eventName].forEach(actionState => {\n        this.evaluationData.view.components[actionState.guid] = actionState.publicState;\n      });\n    });\n  }\n  // cast property value to the type defined in the descriptor\n  processPropertyValue(propertyValue, propertyDescriptor) {\n    if (propertyDescriptor && propertyDescriptor.type && !isNil(propertyValue)) {\n      // try to cast property value to type defined in component descriptor\n      if (propertyDescriptor.type === ViewComponentPropertyType.Boolean) {\n        if (includes(['0', 'false'], propertyValue)) {\n          propertyValue = false;\n        } else {\n          propertyValue = Boolean(propertyValue);\n        }\n      } else if (propertyDescriptor.type === ViewComponentPropertyType.Number) {\n        propertyValue = Number(propertyValue);\n        if (Number.isNaN(propertyValue)) {\n          propertyValue = null;\n        }\n      } else if (propertyDescriptor.type === ViewComponentPropertyType.String) {\n        propertyValue = String(propertyValue);\n      } else if ([ViewComponentPropertyType.Array, ViewComponentPropertyType.Object].includes(propertyDescriptor.type)) {\n        propertyValue = this.rxJsonParserService.tryParseJson(propertyValue);\n      }\n    }\n    return propertyValue;\n  }\n  isContainerComponentDefinition(componentDefinition) {\n    return componentDefinition.componentDefinitions !== undefined;\n  }\n}\nRuntimeViewModel.ɵfac = function RuntimeViewModel_Factory(t) {\n  return new (t || RuntimeViewModel)(i0.ɵɵinject(i1.RxBundleService), i0.ɵɵinject(i1.RxGlobalCacheService), i0.ɵɵinject(i2$1.RxViewComponentRegistryService), i0.ɵɵinject(RxViewDefinitionAdapterService), i0.ɵɵinject(i2$1.RxViewDefinitionParserService), i0.ɵɵinject(i2$1.RxViewDefinitionService), i0.ɵɵinject(RxRuntimeViewUtilsService), i0.ɵɵinject(i2$1.RxExpressionEvaluatorService), i0.ɵɵinject(i1.RxNotificationService), i0.ɵɵinject(i2$1.RxViewActionRegistryService), i0.ɵɵinject(i1.RxLogService), i0.ɵɵinject(ViewComponentEventManager), i0.ɵɵinject(i2$3.RxUtilityModalsService), i0.ɵɵinject(i2$1.RxViewDefinitionCacheService), i0.ɵɵinject(i2$2.RxObjectUtilsService), i0.ɵɵinject(i2$2.RxJsonParserService), i0.ɵɵinject(i1.RxCurrentUserService));\n};\nRuntimeViewModel.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RuntimeViewModel,\n  factory: RuntimeViewModel.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewModel, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.RxBundleService\n    }, {\n      type: i1.RxGlobalCacheService\n    }, {\n      type: i2$1.RxViewComponentRegistryService\n    }, {\n      type: RxViewDefinitionAdapterService\n    }, {\n      type: i2$1.RxViewDefinitionParserService\n    }, {\n      type: i2$1.RxViewDefinitionService\n    }, {\n      type: RxRuntimeViewUtilsService\n    }, {\n      type: i2$1.RxExpressionEvaluatorService\n    }, {\n      type: i1.RxNotificationService\n    }, {\n      type: i2$1.RxViewActionRegistryService\n    }, {\n      type: i1.RxLogService\n    }, {\n      type: ViewComponentEventManager\n    }, {\n      type: i2$3.RxUtilityModalsService\n    }, {\n      type: i2$1.RxViewDefinitionCacheService\n    }, {\n      type: i2$2.RxObjectUtilsService\n    }, {\n      type: i2$2.RxJsonParserService\n    }, {\n      type: i1.RxCurrentUserService\n    }];\n  }, null);\n})();\nclass RxRuntimeViewRegistryService {\n  constructor() {\n    this.activeRuntimeViews = [];\n  }\n  register(runtimeViewModel) {\n    if (!this.activeRuntimeViews.includes(runtimeViewModel)) {\n      this.activeRuntimeViews.push(runtimeViewModel);\n    }\n  }\n  getAll() {\n    return this.activeRuntimeViews;\n  }\n  unregister(runtimeViewModel) {\n    pull(this.activeRuntimeViews, runtimeViewModel);\n  }\n}\nRxRuntimeViewRegistryService.ɵfac = function RxRuntimeViewRegistryService_Factory(t) {\n  return new (t || RxRuntimeViewRegistryService)();\n};\nRxRuntimeViewRegistryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: RxRuntimeViewRegistryService,\n  factory: RxRuntimeViewRegistryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RxRuntimeViewRegistryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass RuntimeViewCanvasComponent {\n  constructor(runtimeViewCanvasService) {\n    this.runtimeViewCanvasService = runtimeViewCanvasService;\n    this.componentPropertyChanged = new EventEmitter();\n    this.destroy$ = new Subject();\n  }\n  ngOnInit() {\n    this.runtimeViewCanvasService.componentPropertyChanged$.pipe(takeUntil(this.destroy$)).subscribe(event => {\n      this.componentPropertyChanged.emit(event);\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n}\nRuntimeViewCanvasComponent.ɵfac = function RuntimeViewCanvasComponent_Factory(t) {\n  return new (t || RuntimeViewCanvasComponent)(i0.ɵɵdirectiveInject(RuntimeViewCanvasService));\n};\nRuntimeViewCanvasComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RuntimeViewCanvasComponent,\n  selectors: [[\"rx-runtime-view-canvas\"]],\n  inputs: {\n    layout: \"layout\"\n  },\n  outputs: {\n    componentPropertyChanged: \"componentPropertyChanged\"\n  },\n  features: [i0.ɵɵProvidersFeature([RuntimeViewCanvasService])],\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"root-item\", 3, \"layout\", 4, \"ngIf\"], [1, \"root-item\", 3, \"layout\"]],\n  template: function RuntimeViewCanvasComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RuntimeViewCanvasComponent_rx_runtime_view_canvas_item_0_Template, 1, 1, \"rx-runtime-view-canvas-item\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.layout);\n    }\n  },\n  directives: [i2.NgIf, RuntimeViewCanvasItemComponent],\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewCanvasComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-runtime-view-canvas',\n      templateUrl: './runtime-view-canvas.component.html',\n      providers: [RuntimeViewCanvasService]\n    }]\n  }], function () {\n    return [{\n      type: RuntimeViewCanvasService\n    }];\n  }, {\n    layout: [{\n      type: Input\n    }],\n    componentPropertyChanged: [{\n      type: Output\n    }]\n  });\n})();\nclass RuntimeViewComponent {\n  constructor(runtimeViewModelApi, rxRecordDefinitionCacheService, runtimeViewLayoutService, runtimeViewModel, rxProcessDefinitionCacheService, rxRuntimeViewRegistryService, rxViewDefinitionCacheService, rxAssociationDefinitionCacheService, rxViewDefinitionService) {\n    this.runtimeViewModelApi = runtimeViewModelApi;\n    this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;\n    this.runtimeViewLayoutService = runtimeViewLayoutService;\n    this.runtimeViewModel = runtimeViewModel;\n    this.rxProcessDefinitionCacheService = rxProcessDefinitionCacheService;\n    this.rxRuntimeViewRegistryService = rxRuntimeViewRegistryService;\n    this.rxViewDefinitionCacheService = rxViewDefinitionCacheService;\n    this.rxAssociationDefinitionCacheService = rxAssociationDefinitionCacheService;\n    this.rxViewDefinitionService = rxViewDefinitionService;\n    this.destroyed$ = new ReplaySubject(1);\n    this.save = new EventEmitter();\n    this.closeView = new EventEmitter();\n    this.cancelView = new EventEmitter();\n    this.beforeLoad = new EventEmitter();\n    this.afterLoad = new EventEmitter();\n    this.rxAssociationDefinitionCacheService.registerConsumer(this.destroyed$);\n    this.rxProcessDefinitionCacheService.registerConsumer(this.destroyed$);\n    this.rxRecordDefinitionCacheService.registerConsumer(this.destroyed$);\n    this.rxViewDefinitionCacheService.registerConsumer(this.destroyed$);\n  }\n  onTrigger() {\n    this.runtimeViewModel.isUserInteractionDetected = true;\n  }\n  ngOnInit() {\n    this.init();\n    this.runtimeViewModel.cancel$.pipe(takeUntil(this.destroyed$)).subscribe(() => this.cancelView.emit());\n    this.runtimeViewModel.save$.pipe(takeUntil(this.destroyed$)).subscribe(() => this.save.emit());\n    this.runtimeViewModel.close$.pipe(takeUntil(this.destroyed$)).subscribe(viewOutputParams => this.closeView.emit(viewOutputParams));\n  }\n  ngOnChanges(changes) {\n    if (changes.configuration.currentValue && changes.configuration.previousValue && changes.configuration.currentValue.viewDefinitionName !== changes.configuration.previousValue.viewDefinitionName) {\n      this.runtimeViewModelApi.clear();\n      this.runtimeViewLayoutService.clear();\n      this.configuration = changes.configuration.currentValue;\n      this.init();\n    }\n  }\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n    this.rxRuntimeViewRegistryService.unregister(this.runtimeViewModel);\n  }\n  init() {\n    this.beforeLoad.emit();\n    this.runtimeViewModel.init(this.configuration).subscribe({\n      complete: () => {\n        this.runtimeViewModelApi.init(this.runtimeViewModel);\n        this.runtimeViewLayoutService.init(this.runtimeViewModel, this.runtimeViewModelApi);\n        this.hostClass = this.runtimeViewModel.viewDefinition.styles || '';\n        if (this.rxViewDefinitionService.isPageView(this.runtimeViewModel.viewDefinition)) {\n          this.hostClass = this.hostClass + ' rx-page-view';\n        }\n        this.viewDefinitionGuid = this.runtimeViewModel.viewDefinition.guid;\n        this.runtimeViewModel.isUserInteractionDetected = false;\n        this.afterLoad.emit();\n      }\n    });\n    if (this.configuration.onRegisterApi) {\n      this.configuration.onRegisterApi(this.runtimeViewModel.api);\n    }\n    this.rxRuntimeViewRegistryService.register(this.runtimeViewModel);\n  }\n}\nRuntimeViewComponent.ɵfac = function RuntimeViewComponent_Factory(t) {\n  return new (t || RuntimeViewComponent)(i0.ɵɵdirectiveInject(RuntimeViewModelApi), i0.ɵɵdirectiveInject(i2$4.RxRecordDefinitionCacheService), i0.ɵɵdirectiveInject(RuntimeViewLayoutService), i0.ɵɵdirectiveInject(RuntimeViewModel), i0.ɵɵdirectiveInject(i5.RxProcessDefinitionCacheService), i0.ɵɵdirectiveInject(RxRuntimeViewRegistryService), i0.ɵɵdirectiveInject(i2$1.RxViewDefinitionCacheService), i0.ɵɵdirectiveInject(i8.RxAssociationDefinitionCacheService), i0.ɵɵdirectiveInject(i2$1.RxViewDefinitionService));\n};\nRuntimeViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RuntimeViewComponent,\n  selectors: [[\"rx-runtime-view\"]],\n  hostVars: 3,\n  hostBindings: function RuntimeViewComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function RuntimeViewComponent_focusin_HostBindingHandler() {\n        return ctx.onTrigger();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"rx-view-definition-guid\", ctx.viewDefinitionGuid);\n      i0.ɵɵclassMap(ctx.hostClass);\n    }\n  },\n  inputs: {\n    configuration: \"configuration\"\n  },\n  outputs: {\n    save: \"save\",\n    closeView: \"closeView\",\n    cancelView: \"cancelView\",\n    beforeLoad: \"beforeLoad\",\n    afterLoad: \"afterLoad\"\n  },\n  features: [i0.ɵɵProvidersFeature([RuntimeViewModel, RuntimeViewModelApi, RuntimeViewLayoutService]), i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"layout\", \"componentPropertyChanged\", 4, \"ngIf\"], [3, \"layout\", \"componentPropertyChanged\"]],\n  template: function RuntimeViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RuntimeViewComponent_rx_runtime_view_canvas_0_Template, 1, 1, \"rx-runtime-view-canvas\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.runtimeViewLayoutService.layout);\n    }\n  },\n  directives: [i2.NgIf, RuntimeViewCanvasComponent],\n  styles: [\".rx-page-view[_nghost-%COMP%]     .outlet-padding{padding:0}.rx-page-view[_nghost-%COMP%]     rx-runtime-view-canvas-item{height:100%}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-runtime-view',\n      templateUrl: './runtime-view.component.html',\n      styleUrls: ['./runtime-view.component.scss'],\n      providers: [RuntimeViewModel, RuntimeViewModelApi, RuntimeViewLayoutService]\n    }]\n  }], function () {\n    return [{\n      type: RuntimeViewModelApi\n    }, {\n      type: i2$4.RxRecordDefinitionCacheService\n    }, {\n      type: RuntimeViewLayoutService\n    }, {\n      type: RuntimeViewModel\n    }, {\n      type: i5.RxProcessDefinitionCacheService\n    }, {\n      type: RxRuntimeViewRegistryService\n    }, {\n      type: i2$1.RxViewDefinitionCacheService\n    }, {\n      type: i8.RxAssociationDefinitionCacheService\n    }, {\n      type: i2$1.RxViewDefinitionService\n    }];\n  }, {\n    configuration: [{\n      type: Input\n    }],\n    save: [{\n      type: Output\n    }],\n    closeView: [{\n      type: Output\n    }],\n    cancelView: [{\n      type: Output\n    }],\n    beforeLoad: [{\n      type: Output\n    }],\n    afterLoad: [{\n      type: Output\n    }],\n    hostClass: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    viewDefinitionGuid: [{\n      type: HostBinding,\n      args: ['attr.rx-view-definition-guid']\n    }],\n    onTrigger: [{\n      type: HostListener,\n      args: ['focusin']\n    }]\n  });\n})();\n\n// tslint:disable-next-line:directive-class-suffix\nclass BaseViewComponent {\n  constructor() {\n    this.customCssClasses = '';\n    this.autoFill = new EventEmitter();\n    this.autoScroll = new EventEmitter();\n    this.hidden = new EventEmitter();\n    this.isComponentHidden = false;\n    this.destroyed$ = new ReplaySubject(1);\n    this.propertyChanged = new EventEmitter();\n  }\n  get isHidden() {\n    return this.isComponentHidden;\n  }\n  set isHidden(value) {\n    this.hidden.emit(value);\n    this.isComponentHidden = Boolean(value);\n  }\n  ngOnInit() {\n    this.config.pipe(pluck('styles'), takeUntil(this.destroyed$)).subscribe(styles => {\n      this.customCssClasses = styles || '';\n      this.autoFill.emit(this.customCssClasses.includes('rx-auto-fill'));\n      this.autoScroll.emit(this.customCssClasses.includes('rx-auto-scroll'));\n    });\n  }\n  notifyPropertyChanged(propertyName, newValue, oldValue) {\n    this.propertyChanged.next({\n      guid: this.guid,\n      propertyName,\n      newValue,\n      oldValue\n    });\n  }\n  triggerViewActions(guid = this.guid, viewActionTriggerEventName = VIEW_COMPONENT_DEFAULT_EVENT_NAME) {\n    return this.runtimeViewModelApi.triggerViewActions(guid, viewActionTriggerEventName);\n  }\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\nBaseViewComponent.ɵfac = function BaseViewComponent_Factory(t) {\n  return new (t || BaseViewComponent)();\n};\nBaseViewComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseViewComponent,\n  hostVars: 4,\n  hostBindings: function BaseViewComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"hidden\", ctx.isHidden);\n      i0.ɵɵattribute(\"rx-view-component-id\", ctx.guid);\n      i0.ɵɵclassMap(ctx.customCssClasses);\n    }\n  },\n  outputs: {\n    autoFill: \"autoFill\",\n    autoScroll: \"autoScroll\",\n    hidden: \"hidden\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseViewComponent, [{\n    type: Directive\n  }], null, {\n    guid: [{\n      type: HostBinding,\n      args: ['attr.rx-view-component-id']\n    }],\n    customCssClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    autoFill: [{\n      type: Output\n    }],\n    autoScroll: [{\n      type: Output\n    }],\n    hidden: [{\n      type: Output\n    }],\n    isHidden: [{\n      type: HostBinding,\n      args: ['hidden']\n    }]\n  });\n})();\nclass RuntimeViewCanvasOutletComponent {\n  constructor(runtimeViewCanvasItemService, componentFactoryResolver) {\n    this.runtimeViewCanvasItemService = runtimeViewCanvasItemService;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.name = RX_VIEW_DEFINITION.defaultOutletName;\n  }\n  ngOnInit() {\n    this.runtimeViewCanvasItemService.registerOutlet(this.name, this.container, this.componentFactoryResolver.resolveComponentFactory(RuntimeViewCanvasItemContainerComponent));\n  }\n}\nRuntimeViewCanvasOutletComponent.ɵfac = function RuntimeViewCanvasOutletComponent_Factory(t) {\n  return new (t || RuntimeViewCanvasOutletComponent)(i0.ɵɵdirectiveInject(RuntimeViewCanvasItemService), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n};\nRuntimeViewCanvasOutletComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RuntimeViewCanvasOutletComponent,\n  selectors: [[\"rx-runtime-view-canvas-outlet\"]],\n  viewQuery: function RuntimeViewCanvasOutletComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);\n    }\n  },\n  inputs: {\n    name: \"name\"\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"container\", \"\"]],\n  template: function RuntimeViewCanvasOutletComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, null, 0);\n    }\n  },\n  encapsulation: 2\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewCanvasOutletComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-runtime-view-canvas-outlet',\n      templateUrl: './runtime-view-canvas-outlet.component.html'\n    }]\n  }], function () {\n    return [{\n      type: RuntimeViewCanvasItemService\n    }, {\n      type: i0.ComponentFactoryResolver\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    container: [{\n      type: ViewChild,\n      args: ['container', {\n        read: ViewContainerRef,\n        static: true\n      }]\n    }]\n  });\n})();\nclass RuntimeViewCanvasModule {}\nRuntimeViewCanvasModule.ɵfac = function RuntimeViewCanvasModule_Factory(t) {\n  return new (t || RuntimeViewCanvasModule)();\n};\nRuntimeViewCanvasModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RuntimeViewCanvasModule,\n  declarations: [RuntimeViewCanvasComponent, RuntimeViewCanvasItemComponent, RuntimeViewCanvasItemContainerComponent, RuntimeViewCanvasOutletComponent],\n  imports: [CommonModule, FormsModule],\n  exports: [RuntimeViewCanvasOutletComponent, RuntimeViewCanvasComponent, RuntimeViewCanvasItemComponent, RuntimeViewCanvasItemContainerComponent]\n});\nRuntimeViewCanvasModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewCanvasModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [RuntimeViewCanvasComponent, RuntimeViewCanvasItemComponent, RuntimeViewCanvasItemContainerComponent, RuntimeViewCanvasOutletComponent],\n      exports: [RuntimeViewCanvasOutletComponent, RuntimeViewCanvasComponent, RuntimeViewCanvasItemComponent, RuntimeViewCanvasItemContainerComponent],\n      entryComponents: [RuntimeViewCanvasItemContainerComponent]\n    }]\n  }], null, null);\n})();\nclass RuntimeViewModalComponent {\n  constructor(rxRuntimeViewRegistryService, rxUtilityModalsService, translateService, changeDetector, activeModalRef, dockedPanelContext) {\n    this.rxRuntimeViewRegistryService = rxRuntimeViewRegistryService;\n    this.rxUtilityModalsService = rxUtilityModalsService;\n    this.translateService = translateService;\n    this.changeDetector = changeDetector;\n    this.activeModalRef = activeModalRef;\n    this.dockedPanelContext = dockedPanelContext;\n    this.isBlade = false;\n    this.context = dockedPanelContext || activeModalRef;\n    this.isBlade = Boolean(dockedPanelContext);\n    const data = this.context.getData();\n    this.configuration = data.configuration;\n    this.title = data.title;\n    this.notification = data.notification;\n    this.isCancellable = data.isCancellable;\n    this.closeLabel = translateService.instant('com.bmc.arsys.rx.client.common.close.label');\n  }\n  onCancelView() {\n    this.context.dismiss(null);\n  }\n  closeModal() {\n    this.context.dismiss(DismissReasons.CLOSE_BTN);\n  }\n  onClose(viewOutputParams) {\n    this.context.close(viewOutputParams);\n  }\n  onBeforeLoad() {\n    this.busySubscription = NEVER.subscribe();\n    // workaround: run changeDetector to avoid the ExpressionChangedAfterItHasBeenCheckedError\n    this.changeDetector.detectChanges();\n  }\n  onAfterLoad() {\n    var _a;\n    (_a = this.busySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n  }\n}\nRuntimeViewModalComponent.ɵfac = function RuntimeViewModalComponent_Factory(t) {\n  return new (t || RuntimeViewModalComponent)(i0.ɵɵdirectiveInject(RxRuntimeViewRegistryService), i0.ɵɵdirectiveInject(i2$3.RxUtilityModalsService), i0.ɵɵdirectiveInject(i3.TranslateService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.ActiveModalRef, 8), i0.ɵɵdirectiveInject(i4.DockedPanelContext, 8));\n};\nRuntimeViewModalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: RuntimeViewModalComponent,\n  selectors: [[\"rx-runtime-view-modal\"]],\n  decls: 8,\n  vars: 10,\n  consts: [[4, \"ngIf\"], [\"modalHeader\", \"\"], [\"class\", \"pl-4 pt-4\", 3, \"config\", 4, \"ngIf\"], [3, \"ngClass\"], [1, \"position-relative\"], [3, \"options\"], [3, \"configuration\", \"cancelView\", \"closeView\", \"beforeLoad\", \"afterLoad\"], [\"class\", \"dp-header\", 4, \"ngIf\", \"ngIfElse\"], [1, \"dp-header\"], [1, \"dp-title\"], [\"class\", \"close dp-close\", \"rx-id\", \"x-button\", 3, \"click\", 4, \"ngIf\"], [\"rx-id\", \"x-button\", 1, \"close\", \"dp-close\", 3, \"click\"], [1, \"modal-header\"], [1, \"modal-title\"], [1, \"pl-4\", \"pt-4\", 3, \"config\"]],\n  template: function RuntimeViewModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, RuntimeViewModalComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\n      i0.ɵɵtemplate(1, RuntimeViewModalComponent_ng_template_1_Template, 4, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵtemplate(3, RuntimeViewModalComponent_adapt_alert_3_Template, 1, 3, \"adapt-alert\", 2);\n      i0.ɵɵelementStart(4, \"div\", 3);\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵelement(6, \"rx-busy-indicator\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"rx-runtime-view\", 6);\n      i0.ɵɵlistener(\"cancelView\", function RuntimeViewModalComponent_Template_rx_runtime_view_cancelView_7_listener() {\n        return ctx.onCancelView();\n      })(\"closeView\", function RuntimeViewModalComponent_Template_rx_runtime_view_closeView_7_listener($event) {\n        return ctx.onClose($event);\n      })(\"beforeLoad\", function RuntimeViewModalComponent_Template_rx_runtime_view_beforeLoad_7_listener() {\n        return ctx.onBeforeLoad();\n      })(\"afterLoad\", function RuntimeViewModalComponent_Template_rx_runtime_view_afterLoad_7_listener() {\n        return ctx.onAfterLoad();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.title || ctx.isCancellable);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.notification);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c5, !ctx.isBlade, ctx.isBlade));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"options\", i0.ɵɵpureFunction1(8, _c6, ctx.busySubscription));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"configuration\", ctx.configuration);\n    }\n  },\n  directives: [i2.NgIf, i2.NgClass, i2$3.RxBusyIndicatorComponent, RuntimeViewComponent, i4.AdaptAlertComponent],\n  styles: [\"[_nghost-%COMP%]{height:100%;display:flex;flex-direction:column}.modal-header[_ngcontent-%COMP%]{min-height:34px}.dp-header[_ngcontent-%COMP%]{flex-direction:row!important}.dp-content[_ngcontent-%COMP%] > rx-runtime-view[_ngcontent-%COMP%]{height:100%}\"]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewModalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'rx-runtime-view-modal',\n      templateUrl: './runtime-view-modal.component.html',\n      styleUrls: ['./runtime-view-modal.component.scss']\n    }]\n  }], function () {\n    return [{\n      type: RxRuntimeViewRegistryService\n    }, {\n      type: i2$3.RxUtilityModalsService\n    }, {\n      type: i3.TranslateService\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i4.ActiveModalRef,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.DockedPanelContext,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\nconst RX_RUNTIME_VIEW = {\n  actions: {\n    save: 'rx-runtime-view-save',\n    close: 'rx-runtime-view-close',\n    cancel: 'rx-runtime-view-cancel'\n  }\n};\nclass RuntimeViewModule {}\nRuntimeViewModule.ɵfac = function RuntimeViewModule_Factory(t) {\n  return new (t || RuntimeViewModule)();\n};\nRuntimeViewModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: RuntimeViewModule,\n  declarations: [RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent],\n  imports: [CommonModule, RuntimeViewCanvasModule, TranslateModule, AdaptAlertModule, RxBusyIndicatorModule],\n  exports: [RuntimeViewCanvasModule, RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent]\n});\nRuntimeViewModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, RuntimeViewCanvasModule, TranslateModule, AdaptAlertModule, RxBusyIndicatorModule], RuntimeViewCanvasModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RuntimeViewModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, RuntimeViewCanvasModule, TranslateModule, AdaptAlertModule, RxBusyIndicatorModule],\n      exports: [RuntimeViewCanvasModule, RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent],\n      declarations: [RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent],\n      entryComponents: [RuntimeViewRootComponent, RuntimeViewModalComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseViewComponent, RX_RUNTIME_VIEW, RuntimeLayoutItem, RuntimeLayoutOutlet, RuntimeLayoutOutletColumn, RuntimeViewCanvasComponent, RuntimeViewCanvasItemComponent, RuntimeViewCanvasItemContainerComponent, RuntimeViewCanvasItemService, RuntimeViewCanvasModule, RuntimeViewCanvasOutletComponent, RuntimeViewComponent, RuntimeViewModalComponent, RuntimeViewModel, RuntimeViewModelApi, RuntimeViewModule, RuntimeViewRootComponent, RxRuntimeViewRegistryService, RxRuntimeViewUtilsService, VIEW_COMPONENT_DEFAULT_EVENT_NAME, ViewComponentEventManager };\n//# sourceMappingURL=helix-platform-view-runtime.js.map","map":{"version":3,"names":["i0","Injectable","ViewContainerRef","Component","Input","ViewChild","HostBinding","EventEmitter","Output","HostListener","Directive","NgModule","Optional","Subject","ReplaySubject","from","of","EMPTY","merge","throwError","asyncScheduler","combineLatest","BehaviorSubject","Observable","NEVER","takeUntil","skipWhile","distinctUntilChanged","delay","mergeScan","map","take","switchMap","filter","distinct","reduce","tap","defaultIfEmpty","switchMapTo","catchError","pluck","i2$4","i2$1","RX_VIEW_DEFINITION","ViewLayoutRole","RxViewComponentType","RX_AVAILABLE_ON_DEVICES_PROP_NAME","RX_AVAILABLE_ON_DEVICES_ALL_VALUE","RxViewLayout","ViewComponentPropertyType","i2$2","RX_GUID","pick","includes","castArray","isString","chain","values","isObject","isEmpty","head","some","has","groupBy","map$1","keys","every","intersection","forEach","get","forOwn","find","sortBy","toNumber","forIn","isFunction","set","isNil","pull","i2","CommonModule","i1","i2$3","RxBusyIndicatorModule","i8","i5","FormsModule","i3","TranslateModule","i4","DismissReasons","AdaptAlertModule","_c0","RuntimeViewCanvasItemContainerComponent_ng_container_0_div_2_ng_container_1_Template","rf","ctx","ɵɵelementContainer","_c1","a0","$implicit","RuntimeViewCanvasItemContainerComponent_ng_container_0_div_2_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","column_r5","ɵɵnextContext","_r2","ɵɵreference","ɵɵproperty","cssClass","span","ɵɵadvance","ɵɵpureFunction1","children","RuntimeViewCanvasItemContainerComponent_ng_container_0_Template","ɵɵelementContainerStart","ɵɵelementContainerEnd","ctx_r0","columns","RuntimeViewCanvasItemContainerComponent_ng_container_1_ng_container_1_Template","RuntimeViewCanvasItemContainerComponent_ng_container_1_Template","ctx_r1","RuntimeViewCanvasItemContainerComponent_ng_template_2_rx_runtime_view_canvas_item_0_Template","ɵɵelement","layoutItem_r10","RuntimeViewCanvasItemContainerComponent_ng_template_2_Template","layoutItems_r8","ctx_r3","trackByFn","_c2","a1","a2","_c3","RuntimeViewRootComponent_rx_runtime_view_canvas_item_container_0_Template","outlet_r1","isHidden","ɵɵpureFunction2","name","defaultOutletName","ɵɵpureFunction3","layoutRole","Header","Footer","RuntimeViewCanvasComponent_rx_runtime_view_canvas_item_0_Template","layout","RuntimeViewComponent_rx_runtime_view_canvas_0_Template","ɵɵgetCurrentView","ɵɵlistener","RuntimeViewComponent_rx_runtime_view_canvas_0_Template_rx_runtime_view_canvas_componentPropertyChanged_0_listener","$event","ɵɵrestoreView","runtimeViewModel","onViewComponentPropertyChanged","runtimeViewLayoutService","RuntimeViewModalComponent_ng_container_0_div_1_button_3_Template","_r7","RuntimeViewModalComponent_ng_container_0_div_1_button_3_Template_button_click_0_listener","ctx_r6","closeModal","ctx_r5","ɵɵattribute","closeLabel","RuntimeViewModalComponent_ng_container_0_div_1_Template","ɵɵtext","ctx_r4","ɵɵtextInterpolate","title","isCancellable","RuntimeViewModalComponent_ng_container_0_Template","_r1","isBlade","RuntimeViewModalComponent_ng_template_1_button_3_Template","_r10","RuntimeViewModalComponent_ng_template_1_button_3_Template_button_click_0_listener","ctx_r9","ctx_r8","RuntimeViewModalComponent_ng_template_1_Template","ctx_r2","_c4","content","type","variant","RuntimeViewModalComponent_adapt_alert_3_Template","notification","_c5","_c6","busy","loaderType","backdrop","message","RuntimeLayoutOutletColumn","constructor","RuntimeLayoutOutlet","height","RuntimeLayoutItem","options","outlets","parent","runtimeViewModelApi","Object","assign","guid","config","factory","initializeOutlets","outlet","layoutOutletItem","hasOwnProperty","push","addLayoutItem","layoutTreeItem","columnConfig","outletItem","parentOutlet","insertIndex","columnIndex","indexOf","column","RuntimeViewCanvasService","componentPropertyChangedSubject","componentPropertyChanged$","asObservable","componentPropertyChange","next","ɵfac","RuntimeViewCanvasService_Factory","t","ɵprov","ɵɵdefineInjectable","token","ngDevMode","ɵsetClassMetadata","RuntimeViewCanvasItemService","injector","componentFactoryResolver","runtimeViewCanvasService","hasMargin","hasAutoFill","hasAutoScroll","destroyed$","ngOnDestroy","complete","registerOutlet","outletName","outletViewContainerRef","containerComponent","currentOutlet","renderContainerComponent","getChildren","Boolean","child","renderViewComponent","_a","_b","_c","_d","componentRef","container","createComponent","componentInstance","instance","propertyChanged","pipe","subscribe","propertyChange","hidden","value","autoScroll","autoFill","containerComponentFactory","containerRef","RuntimeViewCanvasItemService_Factory","ɵɵinject","Injector","ComponentFactoryResolver","RuntimeViewCanvasItemComponent","runtimeViewCanvasItemService","ngOnChanges","changes","currentValue","previousValue","clear","RuntimeViewCanvasItemComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","viewQuery","RuntimeViewCanvasItemComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostVars","hostBindings","RuntimeViewCanvasItemComponent_HostBindings","ɵɵclassProp","inputs","features","ɵɵProvidersFeature","ɵɵNgOnChangesFeature","decls","vars","consts","template","RuntimeViewCanvasItemComponent_Template","encapsulation","args","selector","templateUrl","providers","read","static","RuntimeViewCanvasItemContainerComponent","hostClass","index","item","RuntimeViewCanvasItemContainerComponent_Factory","RuntimeViewCanvasItemContainerComponent_HostBindings","ɵɵstyleProp","RuntimeViewCanvasItemContainerComponent_Template","ɵɵtemplateRefExtractor","length","directives","NgIf","NgForOf","NgClass","NgTemplateOutlet","styles","styleUrls","RuntimeViewRootComponent","runtimeCanvasItemComponent","RuntimeViewRootComponent_Factory","RuntimeViewRootComponent_Template","RuntimeViewLayoutService","rxViewComponentRegistryService","viewDefinitionParserService","factoryResolver","tree","rxJsonParserService","rxLogService","rxOldViewLayoutAdapterService","init","getComponents","viewDefinition","processDefinition","bind","componentDefinitionItem","convertLayout","parentComponentDefinition","initializeView","componentDefinition","componentDescriptor","Action","isDataViewComponentDefinition","parentComponentDefinitionLayout","JSON","parse","col","colIndex","viewComponentConfig","viewComponentStates","config$","parentLayoutItem","getLayoutItem","componentFactory","component","warning","tryParseJson","resolveComponentFactory","flattenedLayoutItems","flattenBy","currentLayout","result","canvasLayout","flattenedLayoutItem","RuntimeViewLayoutService_Factory","RxViewComponentRegistryService","RxViewDefinitionParserService","RxTreeService","RxJsonParserService","RxLogService","RxOldViewLayoutAdapterService","RuntimeViewModelApi","model","triggerViewActions","eventName","cancel","skipDirtyCheck","close","getViewInputParameters","applyViewPreset","viewPresetSelectorGuid","viewPresetGuid","sharedViewPresets","deleteViewPreset","discardViewPresetChanges","saveViewPreset","shareViewPreset","RuntimeViewModelApi_Factory","ComponentExpression","propertyName","expression","rxExpressionEvaluatorService","customEvaluatorService","evaluate","expressionContext","tryEvaluate","hasDependency","hasTokens","hasKeywordTokens","hasViewTokens","hasViewIsValidToken","hasComponentTokens","ViewComponentEventManager","rxGlobalEventsService","rxViewActionService","errorHandler","executeActions","actions","actionCallback","Promise","resolve","reject","resultValue","acc","currentAction","debug","execute","parameters","error","viewActionsCompleted$","e","handleError","ViewComponentEventManager_Factory","RxGlobalEventsService","RxViewActionService","ErrorHandler","providedIn","VIEW_COMPONENT_DEFAULT_EVENT_NAME","RxRuntimeViewUtilsService","rxViewDefinitionService","rxViewDefinitionParserService","rxDefinitionAdapterRegistryService","rxViewActionDefinitionAdapterRegistryService","rxViewDefinitionCacheService","isViewCancellable","viewDefinitionName","getViewDefinition","hasPageComponent","hasViewCancellingAction","runAdaptersForComponents","containerViewComponentDefinition","componentPairs","regex","RegExp","baseGuidPattern","viewComponentExpressions","propertiesByName","flatten","propertyValue","test","adapterObservables$","adapter","getRuntimeAdapter","result$","adaptDefinition","findViewComponent","viewComponentDefinition","actAsCancel","componentDefinitions","Page","RxRuntimeViewUtilsService_Factory","RxViewDefinitionService","RxDefinitionAdapterRegistryService","RxViewActionDefinitionAdapterRegistryService","RxViewDefinitionCacheService","RxViewDefinitionAdapterService","rxObjectUtilsService","rxDeviceDetectionService","preProcessViewDefinition","childComponentDefinition","expandProperties","postProcessViewDefinition","filterComponentsForDevice","availableOnDevicesProp","currentDevice","definition","updatedLayout","removeChildFromLayout","stringify","RxViewDefinitionAdapterService_Factory","RxObjectUtilsService","RxDeviceDetectionService","RuntimeViewModel","rxBundleService","rxGlobalCacheService","rxViewDefinitionAdapterService","rxRuntimeViewUtilsService","rxNotificationService","rxViewActionRegistryService","viewComponentEventManager","rxUtilityModalsService","rxCurrentUserService","api","save","refresh","canClose","saveSubject","closeSubject","cancelSubject","save$","close$","cancel$","Map","evaluationData","view","components","inputParams","isValid","keywords","user","getName","newLine","configuration","viewDefinition$","viewComponents","ownerBundleIds","viewComponent","getActionOwnerBundleId","getComponentOwnerBundleId","bundleId","bundleIds","loadBundles","resolveAsyncDescriptors","processViewDefinition","closeViewAfterSave","callRuntimeComponentsApi","viewOutputParams","evaluateViewOutputParams","isDirtyView","isDirty","confirmUnsavedChanges","data","componentGuid","viewActionTriggerEventName","actionsResult","viewComponentState","eventState","eventStates","actionStates","actionState","onViewComponentActionOutputChanged","newValue","publicState","updateEvaluationData","properties","updateComponentConfigProperty","updateViewComponentConfig","dependentViewComponentGuids","dependentViewComponentsMap","dependentViewComponentStates","viewComponentGuid","getDependentViewComponentStates","state","dependentViewComponentState","evaluateDependentProperties","isDataViewComponent","getParentViewComponent","triggerViewValidation","configPropertyName","undefined","isDirtySubject","isUserInteractionDetected","Array","dependentOnViewIsValidPropViewComponentGuids","evaluateComponentExpressions","schedule","currentViewComponentState","parentViewComponentGuid","expressionFilterFn","isDependentComponentState","expressions","isDependentEventState","event","buildComponentConfig","viewComponentConfigState","configState","buildComponentChildDataConfig","viewComponentChildConfig","dataViewComponentChildStates","childViewComponentGuids","dataViewComponentChildStateGroups","dataViewComponentState","dataViewComponentStateChild","dataViewComponentChildState","actionGuid","viewActionOutput","output","outputParams","outputParam","source","cloneDeep","adapters$","processComponentDefinition","componentExpression","configuredParamNames","passedParamNames","onlyPositionalParams","inputParamName","paramIndex","Number","match","definitionParamName","buildViewComponentState","viewComponentPropertyDescriptor","descriptor","isExpressionEvaluationEnabled","enableExpressionEvaluation","evaluatorService","isContainerComponentDefinition","currentComponentDefinition","actionComponentDefinition","buildViewComponentActionState","actionDescriptor","parameterName","actionPropertyDescriptor","initializeActionExpressionForProperty","updateActionConfigProperty","methodName","resultSubject","errors","apiCallResults","apply","then","res","results","expressionFilterFunc","evaluateExpression","evaluatedValue","addErrorMessage","viewComponentDescriptor","processPropertyValue","actionComponent","viewActionDescriptor","viewActionParameterDescriptor","primaryPropertyName","split","propertyDescriptor","isNaN","String","RuntimeViewModel_Factory","RxBundleService","RxGlobalCacheService","RxExpressionEvaluatorService","RxNotificationService","RxViewActionRegistryService","RxUtilityModalsService","RxCurrentUserService","RxRuntimeViewRegistryService","activeRuntimeViews","register","getAll","unregister","RxRuntimeViewRegistryService_Factory","RuntimeViewCanvasComponent","componentPropertyChanged","destroy$","ngOnInit","emit","unsubscribe","RuntimeViewCanvasComponent_Factory","outputs","RuntimeViewCanvasComponent_Template","RuntimeViewComponent","rxRecordDefinitionCacheService","rxProcessDefinitionCacheService","rxRuntimeViewRegistryService","rxAssociationDefinitionCacheService","closeView","cancelView","beforeLoad","afterLoad","registerConsumer","onTrigger","isPageView","viewDefinitionGuid","onRegisterApi","RuntimeViewComponent_Factory","RxRecordDefinitionCacheService","RxProcessDefinitionCacheService","RxAssociationDefinitionCacheService","RuntimeViewComponent_HostBindings","RuntimeViewComponent_focusin_HostBindingHandler","ɵɵclassMap","RuntimeViewComponent_Template","BaseViewComponent","customCssClasses","isComponentHidden","notifyPropertyChanged","oldValue","BaseViewComponent_Factory","ɵdir","ɵɵdefineDirective","BaseViewComponent_HostBindings","ɵɵhostProperty","RuntimeViewCanvasOutletComponent","RuntimeViewCanvasOutletComponent_Factory","RuntimeViewCanvasOutletComponent_Query","RuntimeViewCanvasOutletComponent_Template","RuntimeViewCanvasModule","RuntimeViewCanvasModule_Factory","ɵmod","ɵɵdefineNgModule","declarations","imports","exports","ɵinj","ɵɵdefineInjector","entryComponents","RuntimeViewModalComponent","translateService","changeDetector","activeModalRef","dockedPanelContext","context","getData","instant","onCancelView","dismiss","CLOSE_BTN","onClose","onBeforeLoad","busySubscription","detectChanges","onAfterLoad","RuntimeViewModalComponent_Factory","TranslateService","ChangeDetectorRef","ActiveModalRef","DockedPanelContext","RuntimeViewModalComponent_Template","RuntimeViewModalComponent_Template_rx_runtime_view_cancelView_7_listener","RuntimeViewModalComponent_Template_rx_runtime_view_closeView_7_listener","RuntimeViewModalComponent_Template_rx_runtime_view_beforeLoad_7_listener","RuntimeViewModalComponent_Template_rx_runtime_view_afterLoad_7_listener","RxBusyIndicatorComponent","AdaptAlertComponent","decorators","RX_RUNTIME_VIEW","RuntimeViewModule","RuntimeViewModule_Factory"],"sources":["C:/projects/innovation-studio-developer/22.1/test210500/bundle/src/main/webapp/node_modules/@helix/platform/fesm2015/helix-platform-view-runtime.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, ViewContainerRef, Component, Input, ViewChild, HostBinding, EventEmitter, Output, HostListener, Directive, NgModule, Optional } from '@angular/core';\nimport { Subject, ReplaySubject, from, of, EMPTY, merge, throwError, asyncScheduler, combineLatest, BehaviorSubject, Observable, NEVER } from 'rxjs';\nimport { takeUntil, skipWhile, distinctUntilChanged, delay, mergeScan, map, take, switchMap, filter, distinct, reduce, tap, defaultIfEmpty, switchMapTo, catchError, pluck } from 'rxjs/operators';\nimport * as i2$4 from '@helix/platform/record/api';\nimport * as i2$1 from '@helix/platform/view/api';\nimport { RX_VIEW_DEFINITION, ViewLayoutRole, RxViewComponentType, RX_AVAILABLE_ON_DEVICES_PROP_NAME, RX_AVAILABLE_ON_DEVICES_ALL_VALUE, RxViewLayout, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport * as i2$2 from '@helix/platform/utils';\nimport { RX_GUID } from '@helix/platform/utils';\nimport { pick, includes, castArray, isString, chain, values, isObject, isEmpty, head, some, has, groupBy, map as map$1, keys, every, intersection, forEach, get, forOwn, find, sortBy, toNumber, forIn, isFunction, set, isNil, pull } from 'lodash';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i1 from '@helix/platform/shared/api';\nimport * as i2$3 from '@helix/platform/ui-kit';\nimport { RxBusyIndicatorModule } from '@helix/platform/ui-kit';\nimport * as i8 from '@helix/platform/association/api';\nimport * as i5 from '@helix/platform/process/api';\nimport { FormsModule } from '@angular/forms';\nimport * as i3 from '@ngx-translate/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport * as i4 from '@bmc-ux/adapt-angular';\nimport { DismissReasons, AdaptAlertModule } from '@bmc-ux/adapt-angular';\n\nclass RuntimeLayoutOutletColumn {\n    constructor() {\n        this.children = [];\n    }\n}\nclass RuntimeLayoutOutlet {\n    constructor() {\n        this.children = [];\n        this.columns = [new RuntimeLayoutOutletColumn()];\n        this.height = null;\n    }\n}\n\nclass RuntimeLayoutItem {\n    constructor(options) {\n        this.outlets = [];\n        this.parent = null;\n        this.runtimeViewModelApi = null;\n        Object.assign(this, {\n            guid: options.guid,\n            config: options.config,\n            parent: options.parent,\n            runtimeViewModelApi: options.runtimeViewModelApi,\n            factory: options.factory\n        });\n        if (options.outlets) {\n            this.initializeOutlets(options.outlets);\n        }\n    }\n    initializeOutlets(outlets) {\n        outlets.forEach((outlet) => {\n            const layoutOutletItem = new RuntimeLayoutOutlet();\n            layoutOutletItem.name = outlet.name;\n            layoutOutletItem.height = outlet.hasOwnProperty('height') ? outlet.height : null;\n            this.outlets.push(layoutOutletItem);\n        });\n    }\n    addLayoutItem(layoutTreeItem, columnConfig) {\n        const outlet = this.outlets.find((outletItem) => outletItem.name === columnConfig.parentOutlet.name);\n        const insertIndex = columnConfig.parentOutlet.columns[columnConfig.columnIndex].children.indexOf(layoutTreeItem.guid);\n        columnConfig.parentOutlet.columns.forEach((column, columnIndex) => {\n            if (!outlet.columns[columnIndex]) {\n                outlet.columns[columnIndex] = new RuntimeLayoutOutletColumn();\n            }\n            if (column.cssClass) {\n                outlet.columns[columnIndex].cssClass = column.cssClass;\n            }\n            if (column.span) {\n                outlet.columns[columnIndex].span = column.span;\n            }\n        });\n        if (layoutTreeItem) {\n            outlet.columns[columnConfig.columnIndex].children[insertIndex] = layoutTreeItem;\n        }\n    }\n}\n\nclass RuntimeViewCanvasService {\n    constructor() {\n        this.componentPropertyChangedSubject = new Subject();\n        this.componentPropertyChanged$ = this.componentPropertyChangedSubject.asObservable();\n    }\n    onViewComponentPropertyChanged(componentPropertyChange) {\n        this.componentPropertyChangedSubject.next(componentPropertyChange);\n    }\n}\nRuntimeViewCanvasService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRuntimeViewCanvasService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasService, decorators: [{\n            type: Injectable\n        }] });\n\nclass RuntimeViewCanvasItemService {\n    constructor(injector, componentFactoryResolver, runtimeViewCanvasService) {\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.runtimeViewCanvasService = runtimeViewCanvasService;\n        this.hasMargin = true;\n        this.hasAutoFill = false;\n        this.hasAutoScroll = false;\n        this.isHidden = false;\n        this.destroyed$ = new ReplaySubject(1);\n    }\n    ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n    }\n    registerOutlet(outletName, outletViewContainerRef, containerComponent) {\n        const currentOutlet = this.layout.outlets.find((outlet) => outlet.name === outletName);\n        if (currentOutlet) {\n            this.renderContainerComponent(outletViewContainerRef, currentOutlet, containerComponent);\n        }\n    }\n    getChildren(outletName) {\n        const currentOutlet = this.layout.outlets.find((outlet) => outlet.name === outletName);\n        return currentOutlet.columns.map((column) => (Object.assign(Object.assign({}, column), { children: column.children\n                .filter(Boolean)\n                .map((child) => pick(child, 'config', 'guid', 'runtimeViewModelApi', 'factory', 'outlets')) })));\n    }\n    renderViewComponent() {\n        var _a, _b, _c, _d;\n        this.componentRef = this.container.createComponent(this.layout.factory, null, this.injector);\n        this.componentInstance = this.componentRef.instance;\n        this.componentInstance.guid = this.layout.guid;\n        this.componentInstance.config = this.layout.config;\n        this.componentInstance.runtimeViewModelApi = this.layout.runtimeViewModelApi;\n        (_a = this.componentInstance.propertyChanged) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroyed$)).subscribe((propertyChange) => {\n            this.runtimeViewCanvasService.onViewComponentPropertyChanged(propertyChange);\n        });\n        // Update hasMargin, hasAutoScroll, and hasAutoFill property bindings asynchronously using timeout\n        // to trigger change detection. Otherwise \"ExpressionChangedAfterItHasBeenCheckedError\" will occur.\n        (_b = this.componentInstance.hidden) === null || _b === void 0 ? void 0 : _b.pipe(skipWhile((value) => !value), distinctUntilChanged(), delay(0), takeUntil(this.destroyed$)).subscribe((hidden) => {\n            this.hasMargin = !hidden;\n            this.isHidden = hidden;\n        });\n        (_c = this.componentInstance.autoScroll) === null || _c === void 0 ? void 0 : _c.pipe(skipWhile((value) => !value), distinctUntilChanged(), delay(0), takeUntil(this.destroyed$)).subscribe((autoScroll) => {\n            this.hasAutoScroll = autoScroll;\n        });\n        (_d = this.componentInstance.autoFill) === null || _d === void 0 ? void 0 : _d.pipe(skipWhile((value) => !value), distinctUntilChanged(), delay(0), takeUntil(this.destroyed$)).subscribe((autoFill) => {\n            this.hasAutoFill = autoFill;\n        });\n    }\n    renderContainerComponent(outletViewContainerRef, currentOutlet, containerComponent) {\n        const containerComponentFactory = containerComponent;\n        const containerRef = outletViewContainerRef.createComponent(containerComponentFactory);\n        containerRef.instance.columns = currentOutlet.columns;\n        containerRef.instance.outlet = currentOutlet;\n    }\n}\nRuntimeViewCanvasItemService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasItemService, deps: [{ token: i0.Injector }, { token: i0.ComponentFactoryResolver }, { token: RuntimeViewCanvasService }], target: i0.ɵɵFactoryTarget.Injectable });\nRuntimeViewCanvasItemService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasItemService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasItemService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.ComponentFactoryResolver }, { type: RuntimeViewCanvasService }]; } });\n\nclass RuntimeViewCanvasItemComponent {\n    constructor(runtimeViewCanvasItemService) {\n        this.runtimeViewCanvasItemService = runtimeViewCanvasItemService;\n    }\n    get hasMargin() {\n        return this.runtimeViewCanvasItemService.hasMargin;\n    }\n    get hasAutoFill() {\n        return this.runtimeViewCanvasItemService.hasAutoFill && !this.runtimeViewCanvasItemService.isHidden;\n    }\n    get hasAutoScroll() {\n        return this.runtimeViewCanvasItemService.hasAutoScroll;\n    }\n    ngOnChanges(changes) {\n        if (!this.runtimeViewCanvasItemService.container) {\n            this.runtimeViewCanvasItemService.container = this.container;\n        }\n        if (changes.layout.currentValue) {\n            this.runtimeViewCanvasItemService.layout = changes.layout.currentValue;\n            if (changes.layout.previousValue) {\n                this.container.clear();\n            }\n            this.runtimeViewCanvasItemService.renderViewComponent();\n        }\n    }\n    registerOutlet(outletName, outletViewContainerRef) {\n        this.runtimeViewCanvasItemService.registerOutlet(outletName, outletViewContainerRef);\n    }\n    getChildren(outletName) {\n        return this.runtimeViewCanvasItemService.getChildren(outletName);\n    }\n}\nRuntimeViewCanvasItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasItemComponent, deps: [{ token: RuntimeViewCanvasItemService }], target: i0.ɵɵFactoryTarget.Component });\nRuntimeViewCanvasItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RuntimeViewCanvasItemComponent, selector: \"rx-runtime-view-canvas-item\", inputs: { layout: \"layout\" }, host: { properties: { \"class.rx-runtime-view-canvas-item-margin\": \"this.hasMargin\", \"class.rx-runtime-view-canvas-item-auto-fill\": \"this.hasAutoFill\", \"class.rx-runtime-view-canvas-item-auto-scroll\": \"this.hasAutoScroll\" } }, providers: [RuntimeViewCanvasItemService], viewQueries: [{ propertyName: \"container\", first: true, predicate: [\"container\"], descendants: true, read: ViewContainerRef, static: true }], usesOnChanges: true, ngImport: i0, template: \"<ng-container #container></ng-container>\\n\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasItemComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-runtime-view-canvas-item',\n                    templateUrl: './runtime-view-canvas-item.component.html',\n                    providers: [RuntimeViewCanvasItemService]\n                }]\n        }], ctorParameters: function () { return [{ type: RuntimeViewCanvasItemService }]; }, propDecorators: { layout: [{\n                type: Input\n            }], container: [{\n                type: ViewChild,\n                args: ['container', { read: ViewContainerRef, static: true }]\n            }], hasMargin: [{\n                type: HostBinding,\n                args: ['class.rx-runtime-view-canvas-item-margin']\n            }], hasAutoFill: [{\n                type: HostBinding,\n                args: ['class.rx-runtime-view-canvas-item-auto-fill']\n            }], hasAutoScroll: [{\n                type: HostBinding,\n                args: ['class.rx-runtime-view-canvas-item-auto-scroll']\n            }] } });\n\nclass RuntimeViewCanvasItemContainerComponent {\n    constructor() {\n        this.columns = [];\n    }\n    get hostClass() {\n        if (this.outlet.height) {\n            return `${this.outlet.height}px`;\n        }\n        return null;\n    }\n    trackByFn(index, item) {\n        return (item === null || item === void 0 ? void 0 : item.guid) || index;\n    }\n}\nRuntimeViewCanvasItemContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasItemContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nRuntimeViewCanvasItemContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RuntimeViewCanvasItemContainerComponent, selector: \"rx-runtime-view-canvas-item-container\", inputs: { columns: \"columns\", outlet: \"outlet\" }, host: { properties: { \"style.min-height\": \"this.hostClass\" } }, ngImport: i0, template: \"<ng-container *ngIf=\\\"columns.length > 1\\\">\\n  <div class=\\\"row rx-runtime-view-canvas-item-container-row\\\">\\n    <div\\n      class=\\\"rx-runtime-view-canvas-item-container-column\\\"\\n      [ngClass]=\\\"column.cssClass ? column.cssClass : column.span ? 'col-' + column.span : 'col'\\\"\\n      *ngFor=\\\"let column of columns\\\"\\n    >\\n      <ng-container *ngTemplateOutlet=\\\"itemTpl; context: { $implicit: column.children }\\\"></ng-container>\\n    </div>\\n  </div>\\n</ng-container>\\n\\n<ng-container *ngIf=\\\"columns.length === 1\\\">\\n  <ng-container *ngTemplateOutlet=\\\"itemTpl; context: { $implicit: columns[0].children }\\\"></ng-container>\\n</ng-container>\\n\\n<ng-template #itemTpl let-layoutItems>\\n  <rx-runtime-view-canvas-item\\n    #item\\n    *ngFor=\\\"let layoutItem of layoutItems; trackBy: trackByFn\\\"\\n    [layout]=\\\"layoutItem\\\"\\n  ></rx-runtime-view-canvas-item>\\n</ng-template>\\n\", styles: [\":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \\\"Open Sans\\\", -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}rx-runtime-view-canvas-item{display:block}::ng-deep .rx-runtime-view-canvas-item-margin:not(:last-child){margin-bottom:1rem}.rx-runtime-view-canvas-item-auto-fill,.rx-runtime-view-canvas-item-container-row,.rx-runtime-view-canvas-item-container-column{height:100%}.rx-runtime-view-canvas-item-container-column{display:flex;flex-direction:column}.rx-runtime-view-canvas-item-auto-scroll{overflow-y:auto}.rx-mb-sm{margin-bottom:1rem}@media (min-width: 576px){.rx-mb-sm{margin-bottom:0}}.rx-mb-sm:nth-last-child(1){margin-bottom:0}.rx-mb-md{margin-bottom:1rem}@media (min-width: 768px){.rx-mb-md{margin-bottom:0}}.rx-mb-md:nth-last-child(1){margin-bottom:0}.rx-mb-lg{margin-bottom:1rem}@media (min-width: 992px){.rx-mb-lg{margin-bottom:0}}.rx-mb-lg:nth-last-child(1){margin-bottom:0}.rx-mb-xl{margin-bottom:1rem}@media (min-width: 1200px){.rx-mb-xl{margin-bottom:0}}.rx-mb-xl:nth-last-child(1){margin-bottom:0}.rx-mb-xxl{margin-bottom:1rem}@media (min-width: 1600px){.rx-mb-xxl{margin-bottom:0}}.rx-mb-xxl:nth-last-child(1){margin-bottom:0}\\n\"], components: [{ type: RuntimeViewCanvasItemComponent, selector: \"rx-runtime-view-canvas-item\", inputs: [\"layout\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasItemContainerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-runtime-view-canvas-item-container',\n                    templateUrl: './runtime-view-canvas-item-container.component.html',\n                    styleUrls: ['./runtime-view-canvas-item-container.component.scss']\n                }]\n        }], propDecorators: { columns: [{\n                type: Input\n            }], outlet: [{\n                type: Input\n            }], hostClass: [{\n                type: HostBinding,\n                args: ['style.min-height']\n            }] } });\n\nclass RuntimeViewRootComponent {\n    constructor(runtimeCanvasItemComponent) {\n        this.runtimeCanvasItemComponent = runtimeCanvasItemComponent;\n        this.defaultOutletName = RX_VIEW_DEFINITION.defaultOutletName;\n        this.layoutRole = ViewLayoutRole;\n    }\n    isHidden(outlet) {\n        return outlet.name === ViewLayoutRole.Header && outlet.columns[0].children.length === 0;\n    }\n}\nRuntimeViewRootComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewRootComponent, deps: [{ token: RuntimeViewCanvasItemComponent }], target: i0.ɵɵFactoryTarget.Component });\nRuntimeViewRootComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RuntimeViewRootComponent, selector: \"rx-runtime-view-root\", ngImport: i0, template: \"<rx-runtime-view-canvas-item-container\\n  *ngFor=\\\"let outlet of runtimeCanvasItemComponent.layout.outlets\\\"\\n  [hidden]=\\\"isHidden(outlet)\\\"\\n  [columns]=\\\"outlet.columns\\\"\\n  [outlet]=\\\"outlet\\\"\\n  [ngClass]=\\\"{\\n    'content-outlet': outlet.name === defaultOutletName,\\n    'outlet-padding': [layoutRole.Header, layoutRole.Footer, defaultOutletName].includes(outlet.name)\\n  }\\\"\\n></rx-runtime-view-canvas-item-container>\\n\", styles: [\":host{display:flex;flex-direction:column;height:100%;overflow:hidden}rx-runtime-view-canvas-item-container{padding:0 1rem}.outlet-padding{padding:1rem}.content-outlet{flex:1;overflow-y:auto;overflow-x:hidden}\\n\"], components: [{ type: RuntimeViewCanvasItemContainerComponent, selector: \"rx-runtime-view-canvas-item-container\", inputs: [\"columns\", \"outlet\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewRootComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-runtime-view-root',\n                    templateUrl: './runtime-component.html',\n                    styleUrls: ['./runtime-component.scss']\n                }]\n        }], ctorParameters: function () { return [{ type: RuntimeViewCanvasItemComponent }]; } });\n\n/**\n * @desc Represents runtime component tree\n */\nclass RuntimeViewLayoutService {\n    constructor(rxViewComponentRegistryService, viewDefinitionParserService, factoryResolver, tree, rxJsonParserService, rxLogService, rxOldViewLayoutAdapterService) {\n        this.rxViewComponentRegistryService = rxViewComponentRegistryService;\n        this.viewDefinitionParserService = viewDefinitionParserService;\n        this.factoryResolver = factoryResolver;\n        this.tree = tree;\n        this.rxJsonParserService = rxJsonParserService;\n        this.rxLogService = rxLogService;\n        this.rxOldViewLayoutAdapterService = rxOldViewLayoutAdapterService;\n    }\n    clear() {\n        this.layout = null;\n    }\n    init(runtimeViewModel, runtimeViewModelApi) {\n        this.runtimeViewModel = runtimeViewModel;\n        this.runtimeViewModelApi = runtimeViewModelApi;\n        this.viewDefinitionParserService\n            .getComponents(runtimeViewModel.viewDefinition)\n            .forEach(this.processDefinition.bind(this));\n    }\n    processDefinition(componentDefinitionItem) {\n        this.rxOldViewLayoutAdapterService.convertLayout(componentDefinitionItem);\n        if (!componentDefinitionItem.parentComponentDefinition) {\n            this.initializeView(componentDefinitionItem.componentDefinition);\n        }\n        else {\n            const componentDescriptor = this.rxViewComponentRegistryService.get(componentDefinitionItem.componentDefinition.type);\n            if (componentDefinitionItem.componentDefinition.type !== RxViewComponentType.Action &&\n                componentDescriptor &&\n                !this.runtimeViewModel.isDataViewComponentDefinition(componentDescriptor)) {\n                // todo move this logic to separate method\n                const parentComponentDefinitionLayout = JSON.parse(componentDefinitionItem.parentComponentDefinition.layout);\n                let columnIndex = 0;\n                const parentOutlet = parentComponentDefinitionLayout.outlets.find((outlet) => {\n                    return outlet.columns.find((col, colIndex) => {\n                        const includes = col.children.includes(componentDefinitionItem.componentDefinition.guid);\n                        if (includes) {\n                            columnIndex = colIndex;\n                        }\n                        return includes;\n                    });\n                });\n                if (parentOutlet) {\n                    const viewComponentConfig = this.runtimeViewModel.viewComponentStates\n                        .get(componentDefinitionItem.componentDefinition.guid)\n                        .config$.asObservable();\n                    const parentLayoutItem = this.getLayoutItem(componentDefinitionItem.parentComponentDefinition.guid);\n                    parentLayoutItem.addLayoutItem(new RuntimeLayoutItem({\n                        guid: componentDefinitionItem.componentDefinition.guid,\n                        config: viewComponentConfig,\n                        parent: parentLayoutItem,\n                        runtimeViewModelApi: this.runtimeViewModelApi,\n                        outlets: componentDescriptor.outlets,\n                        factory: componentDescriptor.componentFactory\n                    }), {\n                        parentOutlet,\n                        columnIndex\n                    });\n                }\n                else {\n                    const component = componentDefinitionItem.componentDefinition;\n                    this.rxLogService.warning(`Cannot render view component. ${component.type} (${component.guid}) is not used in layout.`);\n                }\n            }\n        }\n    }\n    initializeView(viewDefinition) {\n        const layout = this.rxJsonParserService.tryParseJson(viewDefinition.layout);\n        this.layout = new RuntimeLayoutItem({\n            guid: viewDefinition.guid,\n            parent: null,\n            runtimeViewModelApi: this.runtimeViewModelApi,\n            outlets: layout.outlets,\n            factory: this.factoryResolver.resolveComponentFactory(RuntimeViewRootComponent)\n        });\n    }\n    getLayoutItem(guid) {\n        const flattenedLayoutItems = this.tree.flattenBy(this.layout, (currentLayout) => {\n            return currentLayout.outlets.reduce((result, outlet) => {\n                outlet.columns.forEach((column) => {\n                    column.children.forEach((canvasLayout) => {\n                        result.push(canvasLayout);\n                    });\n                });\n                return result;\n            }, []);\n        });\n        return flattenedLayoutItems.find((flattenedLayoutItem) => flattenedLayoutItem.guid === guid);\n    }\n}\nRuntimeViewLayoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewLayoutService, deps: [{ token: i2$1.RxViewComponentRegistryService }, { token: i2$1.RxViewDefinitionParserService }, { token: i0.ComponentFactoryResolver }, { token: i2$2.RxTreeService }, { token: i2$2.RxJsonParserService }, { token: i1.RxLogService }, { token: i2$1.RxOldViewLayoutAdapterService }], target: i0.ɵɵFactoryTarget.Injectable });\nRuntimeViewLayoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewLayoutService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewLayoutService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i2$1.RxViewComponentRegistryService }, { type: i2$1.RxViewDefinitionParserService }, { type: i0.ComponentFactoryResolver }, { type: i2$2.RxTreeService }, { type: i2$2.RxJsonParserService }, { type: i1.RxLogService }, { type: i2$1.RxOldViewLayoutAdapterService }]; } });\n\nclass RuntimeViewModelApi {\n    clear() {\n        this.runtimeViewModel = null;\n    }\n    init(model) {\n        if (!this.runtimeViewModel) {\n            this.runtimeViewModel = model;\n        }\n    }\n    triggerViewActions(guid, eventName) {\n        return this.runtimeViewModel.triggerViewActions(guid, eventName);\n    }\n    cancel(skipDirtyCheck) {\n        return this.runtimeViewModel.cancel(skipDirtyCheck);\n    }\n    close() {\n        return this.runtimeViewModel.close();\n    }\n    getViewInputParameters() {\n        return this.runtimeViewModel.getViewInputParameters();\n    }\n    applyViewPreset(viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets) {\n        return this.runtimeViewModel.applyViewPreset(viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets);\n    }\n    deleteViewPreset(viewPresetGuid) {\n        return this.runtimeViewModel.deleteViewPreset(viewPresetGuid);\n    }\n    discardViewPresetChanges(viewPresetGuid, sharedViewPresets) {\n        return this.runtimeViewModel.discardViewPresetChanges(viewPresetGuid, sharedViewPresets);\n    }\n    saveViewPreset(viewPresetGuid) {\n        return this.runtimeViewModel.saveViewPreset(viewPresetGuid);\n    }\n    shareViewPreset(viewPresetSelectorGuid) {\n        return this.runtimeViewModel.shareViewPreset(viewPresetSelectorGuid);\n    }\n}\nRuntimeViewModelApi.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModelApi, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRuntimeViewModelApi.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModelApi });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModelApi, decorators: [{\n            type: Injectable\n        }] });\n\nclass ComponentExpression {\n    constructor(propertyName, expression, rxExpressionEvaluatorService, customEvaluatorService) {\n        this.propertyName = propertyName;\n        this.expression = expression;\n        this.rxExpressionEvaluatorService = rxExpressionEvaluatorService;\n        this.customEvaluatorService = customEvaluatorService;\n    }\n    evaluate(expressionContext) {\n        return this.rxExpressionEvaluatorService.tryEvaluate(this.expression, expressionContext, this.customEvaluatorService);\n    }\n    hasDependency(guid, propertyName) {\n        return includes(this.expression, `${guid}.${propertyName}`);\n    }\n    hasTokens() {\n        return includes(this.expression, '${view.') || this.hasKeywordTokens();\n    }\n    hasKeywordTokens() {\n        return includes(this.expression, '${keywords.');\n    }\n    hasViewTokens() {\n        return (includes(this.expression, '${view.inputParams') ||\n            includes(this.expression, '${view.api') ||\n            this.hasViewIsValidToken());\n    }\n    hasViewIsValidToken() {\n        return includes(this.expression, '${view.isValid}');\n    }\n    hasComponentTokens() {\n        return includes(this.expression, '${view.components');\n    }\n}\n\nclass ViewComponentEventManager {\n    constructor(rxGlobalEventsService, rxLogService, rxViewActionService, errorHandler) {\n        this.rxGlobalEventsService = rxGlobalEventsService;\n        this.rxLogService = rxLogService;\n        this.rxViewActionService = rxViewActionService;\n        this.errorHandler = errorHandler;\n    }\n    executeActions(actions, actionCallback) {\n        return new Promise((resolve, reject) => {\n            let resultValue;\n            from(actions)\n                .pipe(mergeScan((acc, currentAction) => {\n                this.rxLogService.debug('ACTION STARTED: ' + currentAction.name);\n                return this.rxViewActionService.execute(currentAction.name, currentAction.parameters).pipe(map((result) => actionCallback(currentAction, result)), take(1));\n            }, null, 1))\n                .subscribe({\n                next: (result) => (resultValue = result),\n                error: (error) => {\n                    reject(error);\n                    this.rxGlobalEventsService.viewActionsCompleted$.next();\n                    castArray(error).forEach((e) => {\n                        if (isString(e)) {\n                            this.rxLogService.warning(e);\n                        }\n                        else if (e) {\n                            this.errorHandler.handleError(e);\n                        }\n                    });\n                },\n                complete: () => {\n                    this.rxGlobalEventsService.viewActionsCompleted$.next();\n                    resolve(resultValue);\n                }\n            });\n        });\n    }\n}\nViewComponentEventManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewComponentEventManager, deps: [{ token: i1.RxGlobalEventsService }, { token: i1.RxLogService }, { token: i2$1.RxViewActionService }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable });\nViewComponentEventManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewComponentEventManager, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: ViewComponentEventManager, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i1.RxGlobalEventsService }, { type: i1.RxLogService }, { type: i2$1.RxViewActionService }, { type: i0.ErrorHandler }]; } });\n\nconst VIEW_COMPONENT_DEFAULT_EVENT_NAME = 'default';\n\nclass RxRuntimeViewUtilsService {\n    constructor(rxViewDefinitionService, rxViewDefinitionParserService, rxDefinitionAdapterRegistryService, rxViewActionDefinitionAdapterRegistryService, rxViewDefinitionCacheService) {\n        this.rxViewDefinitionService = rxViewDefinitionService;\n        this.rxViewDefinitionParserService = rxViewDefinitionParserService;\n        this.rxDefinitionAdapterRegistryService = rxDefinitionAdapterRegistryService;\n        this.rxViewActionDefinitionAdapterRegistryService = rxViewActionDefinitionAdapterRegistryService;\n        this.rxViewDefinitionCacheService = rxViewDefinitionCacheService;\n    }\n    isViewCancellable(viewDefinitionName) {\n        if (isString(viewDefinitionName)) {\n            return this.rxViewDefinitionCacheService\n                .getViewDefinition(viewDefinitionName)\n                .pipe(map((viewDefinition) => this.hasPageComponent(viewDefinition) || this.hasViewCancellingAction(viewDefinition)));\n        }\n        else {\n            return of(this.hasPageComponent(viewDefinitionName) || this.hasViewCancellingAction(viewDefinitionName));\n        }\n    }\n    runAdaptersForComponents(viewDefinition, containerViewComponentDefinition) {\n        const componentPairs = this.rxViewDefinitionParserService.getComponents(containerViewComponentDefinition || viewDefinition);\n        const regex = new RegExp(`\\\\$\\{view.components.${RX_GUID.baseGuidPattern}.`);\n        viewDefinition.viewComponentExpressions = chain(componentPairs)\n            .map((component) => values(component.componentDefinition.propertiesByName))\n            .flatten()\n            .map((propertyValue) => (isObject(propertyValue) ? values(propertyValue) : propertyValue))\n            .flatten()\n            .filter(isString)\n            .filter((propertyValue) => regex.test(propertyValue))\n            .value();\n        const result = componentPairs.reduce((adapterObservables$, { componentDefinition }) => {\n            const adapter = componentDefinition.type === RxViewComponentType.Action\n                ? this.rxViewActionDefinitionAdapterRegistryService.getRuntimeAdapter(componentDefinition.propertiesByName.name)\n                : this.rxDefinitionAdapterRegistryService.getRuntimeAdapter(componentDefinition.type);\n            if (adapter) {\n                const result$ = adapter.adaptDefinition(componentDefinition, viewDefinition);\n                adapterObservables$.push(result$ ? result$.pipe(take(1)) : EMPTY);\n            }\n            return adapterObservables$;\n        }, []);\n        return isEmpty(result) ? [EMPTY] : result;\n    }\n    hasViewCancellingAction(viewDefinition) {\n        return Boolean(this.rxViewDefinitionParserService.findViewComponent(viewDefinition, (viewComponentDefinition) => viewComponentDefinition.type === RxViewComponentType.Action &&\n            viewComponentDefinition.propertiesByName.name === 'rxCloseViewAction' &&\n            viewComponentDefinition.propertiesByName.actAsCancel === 'true'));\n    }\n    hasPageComponent(viewDefinition) {\n        var _a;\n        return ((_a = head(viewDefinition.componentDefinitions)) === null || _a === void 0 ? void 0 : _a.type) === RxViewComponentType.Page;\n    }\n}\nRxRuntimeViewUtilsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRuntimeViewUtilsService, deps: [{ token: i2$1.RxViewDefinitionService }, { token: i2$1.RxViewDefinitionParserService }, { token: i1.RxDefinitionAdapterRegistryService }, { token: i2$1.RxViewActionDefinitionAdapterRegistryService }, { token: i2$1.RxViewDefinitionCacheService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxRuntimeViewUtilsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRuntimeViewUtilsService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRuntimeViewUtilsService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i2$1.RxViewDefinitionService }, { type: i2$1.RxViewDefinitionParserService }, { type: i1.RxDefinitionAdapterRegistryService }, { type: i2$1.RxViewActionDefinitionAdapterRegistryService }, { type: i2$1.RxViewDefinitionCacheService }]; } });\n\nclass RxViewDefinitionAdapterService {\n    constructor(rxObjectUtilsService, rxJsonParserService, rxDeviceDetectionService) {\n        this.rxObjectUtilsService = rxObjectUtilsService;\n        this.rxJsonParserService = rxJsonParserService;\n        this.rxDeviceDetectionService = rxDeviceDetectionService;\n    }\n    // called to make view modifications before the view component adapters are executed\n    preProcessViewDefinition(viewDefinition) {\n        var _a;\n        (_a = viewDefinition.componentDefinitions) === null || _a === void 0 ? void 0 : _a.forEach((childComponentDefinition) => {\n            this.expandProperties(childComponentDefinition);\n        });\n    }\n    // called to make view modifications after the view component adapters have been executed\n    postProcessViewDefinition(viewDefinition) {\n        var _a;\n        (_a = viewDefinition.componentDefinitions) === null || _a === void 0 ? void 0 : _a.forEach((childComponentDefinition) => {\n            this.filterComponentsForDevice(childComponentDefinition, viewDefinition);\n        });\n    }\n    expandProperties(componentDefinition) {\n        componentDefinition.propertiesByName = this.rxObjectUtilsService.expandProperties(componentDefinition.propertiesByName);\n        if (componentDefinition.componentDefinitions) {\n            componentDefinition.componentDefinitions.forEach((childComponentDefinition) => {\n                this.expandProperties(childComponentDefinition);\n            });\n        }\n    }\n    filterComponentsForDevice(componentDefinition, parent) {\n        var _a;\n        const availableOnDevicesProp = this.rxJsonParserService.tryParseJson((_a = componentDefinition.propertiesByName) === null || _a === void 0 ? void 0 : _a[RX_AVAILABLE_ON_DEVICES_PROP_NAME], RX_AVAILABLE_ON_DEVICES_ALL_VALUE) || RX_AVAILABLE_ON_DEVICES_ALL_VALUE;\n        if (availableOnDevicesProp.includes(this.rxDeviceDetectionService.currentDevice)) {\n            if ('componentDefinitions' in componentDefinition) {\n                componentDefinition.componentDefinitions.forEach((childComponentDefinition) => {\n                    this.filterComponentsForDevice(childComponentDefinition, componentDefinition);\n                });\n            }\n        }\n        else {\n            parent.componentDefinitions = parent.componentDefinitions.filter((definition) => definition !== componentDefinition);\n            if (parent.layout) {\n                const updatedLayout = RxViewLayout.removeChildFromLayout(this.rxJsonParserService.tryParseJson(parent.layout), componentDefinition.guid);\n                parent.layout = JSON.stringify(updatedLayout);\n            }\n        }\n    }\n}\nRxViewDefinitionAdapterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionAdapterService, deps: [{ token: i2$2.RxObjectUtilsService }, { token: i2$2.RxJsonParserService }, { token: i2$1.RxDeviceDetectionService }], target: i0.ɵɵFactoryTarget.Injectable });\nRxViewDefinitionAdapterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionAdapterService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxViewDefinitionAdapterService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: i2$2.RxObjectUtilsService }, { type: i2$2.RxJsonParserService }, { type: i2$1.RxDeviceDetectionService }]; } });\n\nclass RuntimeViewModel {\n    constructor(rxBundleService, rxGlobalCacheService, rxViewComponentRegistryService, rxViewDefinitionAdapterService, rxViewDefinitionParserService, rxViewDefinitionService, rxRuntimeViewUtilsService, rxExpressionEvaluatorService, rxNotificationService, rxViewActionRegistryService, rxLogService, viewComponentEventManager, rxUtilityModalsService, rxViewDefinitionCacheService, rxObjectUtilsService, rxJsonParserService, rxCurrentUserService) {\n        this.rxBundleService = rxBundleService;\n        this.rxGlobalCacheService = rxGlobalCacheService;\n        this.rxViewComponentRegistryService = rxViewComponentRegistryService;\n        this.rxViewDefinitionAdapterService = rxViewDefinitionAdapterService;\n        this.rxViewDefinitionParserService = rxViewDefinitionParserService;\n        this.rxViewDefinitionService = rxViewDefinitionService;\n        this.rxRuntimeViewUtilsService = rxRuntimeViewUtilsService;\n        this.rxExpressionEvaluatorService = rxExpressionEvaluatorService;\n        this.rxNotificationService = rxNotificationService;\n        this.rxViewActionRegistryService = rxViewActionRegistryService;\n        this.rxLogService = rxLogService;\n        this.viewComponentEventManager = viewComponentEventManager;\n        this.rxUtilityModalsService = rxUtilityModalsService;\n        this.rxViewDefinitionCacheService = rxViewDefinitionCacheService;\n        this.rxObjectUtilsService = rxObjectUtilsService;\n        this.rxJsonParserService = rxJsonParserService;\n        this.rxCurrentUserService = rxCurrentUserService;\n        // public api which available for runtime view client\n        this.api = {\n            save: this.save.bind(this),\n            close: this.close.bind(this),\n            cancel: this.cancel.bind(this),\n            refresh: this.refresh.bind(this),\n            canClose: this.canClose.bind(this),\n            applyViewPreset: this.applyViewPreset.bind(this),\n            deleteViewPreset: this.deleteViewPreset.bind(this),\n            discardViewPresetChanges: this.discardViewPresetChanges.bind(this),\n            saveViewPreset: this.saveViewPreset.bind(this)\n        };\n        this.saveSubject = new Subject();\n        this.closeSubject = new Subject();\n        this.cancelSubject = new Subject();\n        this.save$ = this.saveSubject.asObservable();\n        this.close$ = this.closeSubject.asObservable();\n        this.cancel$ = this.cancelSubject.asObservable();\n        this.viewComponentStates = new Map();\n        // store all components state, needed for component expression re-evaluation\n        this.evaluationData = {\n            view: {\n                api: this.api,\n                components: {},\n                inputParams: {},\n                isValid: false\n            },\n            keywords: {\n                user: this.rxCurrentUserService.getName(),\n                newLine: '\\n'\n            }\n        };\n    }\n    init(configuration) {\n        this.configuration = configuration;\n        this.clear();\n        const viewDefinition$ = isString(configuration.viewDefinitionName)\n            ? this.rxViewDefinitionCacheService.getViewDefinition(configuration.viewDefinitionName)\n            : of(configuration.viewDefinitionName);\n        return viewDefinition$.pipe(switchMap((viewDefinition) => {\n            const viewComponents = this.rxViewDefinitionParserService.getComponents(viewDefinition, true);\n            const ownerBundleIds = viewComponents.map((viewComponent) => viewComponent.componentDefinition.type === RxViewComponentType.Action\n                ? this.rxViewActionRegistryService.getActionOwnerBundleId(viewComponent.componentDefinition.propertiesByName.name)\n                : this.rxViewComponentRegistryService.getComponentOwnerBundleId(viewComponent.componentDefinition.type));\n            return merge(...ownerBundleIds).pipe(filter(Boolean), distinct(), reduce((acc, bundleId) => {\n                acc.push(bundleId);\n                return acc;\n            }, []), switchMap((bundleIds) => bundleIds.length\n                ? this.rxBundleService.loadBundles(bundleIds, true).pipe(map(() => viewDefinition))\n                : of(viewDefinition)), switchMap((viewDefinition) => this.rxViewComponentRegistryService.resolveAsyncDescriptors().pipe(map(() => viewDefinition))));\n        }), switchMap((viewDefinition) => this.processViewDefinition(viewDefinition)));\n    }\n    clear() {\n        this.viewComponentStates.clear();\n        this.evaluationData.view.components = {};\n        this.evaluationData.view.inputParams = {};\n    }\n    save(closeViewAfterSave = false) {\n        return this.callRuntimeComponentsApi('save', closeViewAfterSave).pipe(tap({\n            complete: () => this.saveSubject.next()\n        }));\n    }\n    close() {\n        const viewOutputParams = this.evaluateViewOutputParams();\n        this.closeSubject.next(viewOutputParams);\n        return of(viewOutputParams);\n    }\n    cancel(skipDirtyCheck) {\n        if (skipDirtyCheck) {\n            this.cancelSubject.next();\n            return EMPTY;\n        }\n        else {\n            return this.isDirtyView().pipe(switchMap((isDirty) => (isDirty ? this.rxUtilityModalsService.confirmUnsavedChanges() : of(true))), tap((canClose) => {\n                if (canClose) {\n                    this.cancelSubject.next();\n                }\n            }), switchMap((canClose) => {\n                return canClose ? EMPTY : throwError(null);\n            }));\n        }\n    }\n    refresh() {\n        return this.callRuntimeComponentsApi('refresh');\n    }\n    canClose() {\n        let canClose = true;\n        this.isDirtyView().subscribe((isDirty) => (canClose = !isDirty));\n        return canClose;\n    }\n    applyViewPreset(viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets) {\n        return this.callRuntimeComponentsApi('applyViewPreset', viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets).pipe(switchMap(() => EMPTY));\n    }\n    deleteViewPreset(viewPresetGuid) {\n        return this.callRuntimeComponentsApi('deleteViewPreset', viewPresetGuid).pipe(switchMap(() => EMPTY));\n    }\n    discardViewPresetChanges(viewPresetGuid, sharedViewPresets) {\n        return this.callRuntimeComponentsApi('discardViewPresetChanges', viewPresetGuid, sharedViewPresets).pipe(switchMap(() => EMPTY));\n    }\n    saveViewPreset(viewPresetGuid) {\n        return this.callRuntimeComponentsApi('saveViewPreset', viewPresetGuid).pipe(switchMap(() => EMPTY));\n    }\n    shareViewPreset(viewPresetSelectorGuid) {\n        return this.callRuntimeComponentsApi('shareViewPreset', viewPresetSelectorGuid).pipe(defaultIfEmpty([]), map((data) => data\n            .filter((item) => Boolean(item === null || item === void 0 ? void 0 : item.data))\n            .reduce((result, item) => {\n            result[item.guid] = item.data;\n            return result;\n        }, {})));\n    }\n    // launch view component actions for particular event\n    triggerViewActions(componentGuid, viewActionTriggerEventName) {\n        let actionsResult = Promise.resolve();\n        const viewComponentState = this.viewComponentStates.get(componentGuid);\n        if (viewComponentState) {\n            const eventState = viewComponentState.eventStates[viewActionTriggerEventName];\n            if (eventState) {\n                const actionStates = eventState.map((actionState) => ({\n                    guid: actionState.guid,\n                    name: actionState.name,\n                    parameters: actionState.config\n                }));\n                // execute view component actions for particular event\n                actionsResult = this.viewComponentEventManager.executeActions(actionStates, (actionState, result) => {\n                    // hook which is called after each action execution\n                    // update action shared state and re-evaluate dependent action view component\n                    this.onViewComponentActionOutputChanged(componentGuid, actionState.guid, result);\n                });\n            }\n            else {\n                this.rxLogService.warning(`Cannot trigger view actions. View Action Trigger Event ${viewActionTriggerEventName} not found.`);\n            }\n        }\n        else {\n            this.rxLogService.warning(`Cannot trigger view actions. View Component ${componentGuid} not found.`);\n        }\n        return actionsResult;\n    }\n    // hook which is called when view component triggers \"property changed\" event\n    onViewComponentPropertyChanged({ guid, propertyName, newValue }) {\n        const viewComponentState = this.viewComponentStates.get(guid);\n        viewComponentState.publicState[propertyName] = newValue;\n        this.updateEvaluationData(viewComponentState);\n        // update config if changed property exist in component properties descriptor\n        if (propertyName !== 'api' && some(viewComponentState.componentDescriptor.properties, { name: propertyName })) {\n            this.updateComponentConfigProperty(propertyName, newValue, viewComponentState);\n            this.updateViewComponentConfig(viewComponentState);\n        }\n        const dependentViewComponentGuids = viewComponentState.dependentViewComponentsMap.get(propertyName);\n        let dependentViewComponentStates;\n        // find all view components which depend on changed view component based on expressions\n        if (dependentViewComponentGuids) {\n            // restore dependent components from the cache\n            dependentViewComponentStates = dependentViewComponentGuids.map((viewComponentGuid) => this.viewComponentStates.get(viewComponentGuid));\n        }\n        else {\n            dependentViewComponentStates = this.getDependentViewComponentStates((expression) => expression.hasDependency(guid, propertyName));\n            // cache dependent view component guids\n            viewComponentState.dependentViewComponentsMap.set(propertyName, dependentViewComponentStates.map((state) => state.guid));\n        }\n        // evaluate expressions for all dependent view components\n        dependentViewComponentStates.forEach((dependentViewComponentState) => {\n            this.evaluateDependentProperties(dependentViewComponentState, guid, propertyName);\n        });\n        // update config$ for all dependent view components\n        dependentViewComponentStates\n            .map((dependentViewComponentState) => {\n            // if dependentViewComponentState is data view component\n            // config$ should be updated for nearest parent view component with UI representation\n            // i.e. if rx-record-grid-column is dependent component then rx-record-grid config$ should be update\n            if (dependentViewComponentState.isDataViewComponent) {\n                return this.getParentViewComponent(dependentViewComponentState);\n            }\n            else {\n                return dependentViewComponentState;\n            }\n        })\n            .forEach((dependentViewComponentState) => {\n            this.updateViewComponentConfig(dependentViewComponentState);\n        });\n        if (propertyName === 'isValid') {\n            this.triggerViewValidation(newValue);\n        }\n    }\n    // ts guard - defines whether componentDescriptor is data view component\n    isDataViewComponentDefinition(componentDescriptor) {\n        return componentDescriptor.configPropertyName !== undefined;\n    }\n    getViewInputParameters() {\n        return this.configuration.inputParams;\n    }\n    isDirtyView() {\n        // Used a separate observable to handle scenario when callRuntimeComponentsApi observable\n        // will be immediately completed. It can happen when no view components will have 'isDirty' API.\n        const isDirtySubject = new ReplaySubject(1);\n        let isDirtyView = false;\n        if (this.isUserInteractionDetected) {\n            this.callRuntimeComponentsApi('isDirty')\n                .pipe(tap((result) => (isDirtyView = result.some(({ data }) => data))))\n                .subscribe({\n                complete: () => isDirtySubject.next(isDirtyView)\n            });\n        }\n        else {\n            isDirtySubject.next(isDirtyView);\n        }\n        return isDirtySubject.asObservable().pipe(take(1));\n    }\n    triggerViewValidation(isValid) {\n        if (isValid) {\n            isValid = Array.from(this.viewComponentStates.values())\n                .filter((viewComponent) => has(viewComponent.publicState, 'isValid'))\n                .every((viewComponent) => viewComponent.publicState.isValid);\n        }\n        if (this.evaluationData.view.isValid !== isValid) {\n            this.evaluationData.view.isValid = isValid;\n            let dependentViewComponentStates;\n            if (this.dependentOnViewIsValidPropViewComponentGuids) {\n                dependentViewComponentStates = this.dependentOnViewIsValidPropViewComponentGuids.map((guid) => this.viewComponentStates.get(guid));\n            }\n            else {\n                dependentViewComponentStates = this.getDependentViewComponentStates((expression) => expression.hasViewIsValidToken());\n                this.dependentOnViewIsValidPropViewComponentGuids = dependentViewComponentStates.map((state) => state.guid);\n            }\n            dependentViewComponentStates.forEach((viewComponentState) => {\n                this.evaluateComponentExpressions(viewComponentState, (expression) => expression.hasViewIsValidToken());\n            });\n            // update view component configs in next javascript event loop, to avoid\n            // 'ExpressionChangedAfterItHasBeenCheckedError' error in components,\n            // dependent on the view isValid property e.g Action button disabled property\n            asyncScheduler.schedule(() => {\n                dependentViewComponentStates.forEach(this.updateViewComponentConfig.bind(this));\n            });\n        }\n    }\n    // return nearest parent view component with UI representation\n    getParentViewComponent(viewComponentState) {\n        let currentViewComponentState = viewComponentState;\n        while (currentViewComponentState.isDataViewComponent) {\n            currentViewComponentState = this.viewComponentStates.get(currentViewComponentState.parentViewComponentGuid);\n        }\n        return currentViewComponentState;\n    }\n    // return all view components which depend on particular expression\n    getDependentViewComponentStates(expressionFilterFn) {\n        return Array.from(this.viewComponentStates.values()).filter((viewComponentState) => {\n            const isDependentComponentState = some(viewComponentState.expressions, expressionFilterFn);\n            const isDependentEventState = some(viewComponentState.eventStates, (eventState) => some(eventState, (event) => some(event.expressions, expressionFilterFn)));\n            return isDependentComponentState || isDependentEventState;\n        });\n    }\n    // pass new view component config to the @Component\n    updateViewComponentConfig(viewComponentState) {\n        // finally update config\n        viewComponentState.config$.next(this.buildComponentConfig(viewComponentState));\n    }\n    // build view component config based on configState and child data view component\n    buildComponentConfig(viewComponentState) {\n        const viewComponentConfigState = Object.assign({}, viewComponentState.configState);\n        // build child data component states\n        this.buildComponentChildDataConfig(viewComponentState, viewComponentConfigState);\n        return viewComponentConfigState;\n    }\n    // recursively build view component config based on data view components\n    buildComponentChildDataConfig(viewComponentState, viewComponentChildConfig = {}) {\n        // find all child data view components\n        const dataViewComponentChildStates = viewComponentState.childViewComponentGuids\n            .map((viewComponentGuid) => this.viewComponentStates.get(viewComponentGuid))\n            .filter((currentViewComponentState) => Boolean(currentViewComponentState))\n            .filter((currentViewComponentState) => currentViewComponentState.isDataViewComponent);\n        // group data view components on config property name\n        const dataViewComponentChildStateGroups = groupBy(dataViewComponentChildStates, (dataViewComponentState) => dataViewComponentState.configPropertyName);\n        // store each data view component config under corresponding config property name\n        Object.keys(dataViewComponentChildStateGroups).forEach((configPropertyName) => {\n            viewComponentChildConfig[configPropertyName] = dataViewComponentChildStateGroups[configPropertyName].map((dataViewComponentStateChild) => {\n                const dataViewComponentChildState = Object.assign({}, dataViewComponentStateChild.configState);\n                // recursively build data view component config\n                this.buildComponentChildDataConfig(dataViewComponentStateChild, dataViewComponentChildState);\n                return dataViewComponentChildState;\n            });\n        });\n    }\n    // update action view component shared state\n    // re-evaluate all dependent action view components\n    onViewComponentActionOutputChanged(componentGuid, actionGuid, viewActionOutput) {\n        const viewComponentState = this.viewComponentStates.get(componentGuid);\n        if (viewComponentState) {\n            const actionState = viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME].find((currentAction) => {\n                return currentAction.guid === actionGuid;\n            });\n            actionState.publicState.output = viewActionOutput;\n            this.updateEvaluationData(viewComponentState);\n            this.evaluateDependentProperties(viewComponentState, actionGuid, 'output');\n        }\n    }\n    evaluateViewOutputParams() {\n        return this.viewDefinition.outputParams.reduce((result, outputParam) => {\n            result[outputParam.name] = this.rxExpressionEvaluatorService.tryEvaluate(outputParam.source, this.evaluationData);\n            return result;\n        }, {});\n    }\n    processViewDefinition(viewDefinition) {\n        this.viewDefinition = this.rxObjectUtilsService.cloneDeep(viewDefinition);\n        this.rxViewDefinitionAdapterService.preProcessViewDefinition(this.viewDefinition);\n        const adapters$ = this.rxRuntimeViewUtilsService.runAdaptersForComponents(this.viewDefinition);\n        return combineLatest(adapters$).pipe(switchMapTo(EMPTY), tap({\n            complete: () => {\n                this.rxViewDefinitionAdapterService.postProcessViewDefinition(this.viewDefinition);\n                this.rxViewDefinitionParserService\n                    .getComponents(this.viewDefinition)\n                    .forEach(this.processComponentDefinition.bind(this));\n                // evaluate expressions with keyword tokens\n                this.viewComponentStates.forEach((viewComponent) => {\n                    this.evaluateComponentExpressions(viewComponent, (componentExpression) => componentExpression.hasKeywordTokens());\n                });\n                // evaluate expressions without tokens\n                this.viewComponentStates.forEach((viewComponent) => {\n                    this.evaluateComponentExpressions(viewComponent, (componentExpression) => !componentExpression.hasTokens());\n                });\n                // evaluate expressions with view tokens\n                this.viewComponentStates.forEach((viewComponent) => {\n                    this.evaluateComponentExpressions(viewComponent, (componentExpression) => componentExpression.hasViewTokens());\n                });\n                // evaluate expressions with component tokens\n                this.viewComponentStates.forEach((viewComponent) => {\n                    this.evaluateComponentExpressions(viewComponent, (componentExpression) => componentExpression.hasComponentTokens());\n                });\n                // update all component configs\n                this.viewComponentStates.forEach((viewComponentState) => {\n                    this.updateViewComponentConfig(viewComponentState);\n                });\n            }\n        }));\n    }\n    processComponentDefinition(componentDefinitionItem) {\n        if (!componentDefinitionItem.parentComponentDefinition) {\n            // process root component definition\n            const configuredParamNames = map$1(componentDefinitionItem.componentDefinition.inputParams, 'name');\n            const passedParamNames = keys(this.configuration.inputParams);\n            const onlyPositionalParams = passedParamNames.length > 0 && every(passedParamNames, (inputParamName) => /^\\$[0-9]+\\$$/.test(inputParamName));\n            if (onlyPositionalParams && intersection(configuredParamNames, passedParamNames).length === 0) {\n                forEach(passedParamNames, (inputParamName) => {\n                    const paramIndex = Number(inputParamName.match(/^\\$([0-9]+)\\$$/)[1]);\n                    const definitionParamName = get(componentDefinitionItem.componentDefinition, `inputParams[${paramIndex}].name`);\n                    this.evaluationData.view.inputParams[definitionParamName] = this.configuration.inputParams[inputParamName];\n                });\n            }\n            else {\n                forEach(configuredParamNames, (inputParamName) => {\n                    this.evaluationData.view.inputParams[inputParamName] = this.configuration.inputParams[inputParamName];\n                });\n            }\n        }\n        else {\n            const componentDefinition = componentDefinitionItem.componentDefinition;\n            const viewComponentState = this.buildViewComponentState(componentDefinitionItem);\n            if (viewComponentState) {\n                this.viewComponentStates.set(componentDefinition.guid, viewComponentState);\n            }\n        }\n    }\n    // generate view component state based on component definition\n    buildViewComponentState(componentDefinitionItem) {\n        const componentDefinition = componentDefinitionItem.componentDefinition;\n        const componentDescriptor = this.rxViewComponentRegistryService.get(componentDefinition.type);\n        if (componentDescriptor) {\n            const viewComponentState = {\n                guid: componentDefinition.guid,\n                type: componentDefinition.type,\n                config$: new BehaviorSubject({}),\n                expressions: [],\n                eventStates: {\n                    [VIEW_COMPONENT_DEFAULT_EVENT_NAME]: []\n                },\n                configState: {},\n                publicState: {},\n                isDataViewComponent: false,\n                configPropertyName: null,\n                parentViewComponentGuid: componentDefinitionItem.parentComponentDefinition.guid,\n                childViewComponentGuids: [],\n                dependentViewComponentsMap: new Map(),\n                componentDescriptor\n            };\n            if (this.isDataViewComponentDefinition(componentDescriptor)) {\n                viewComponentState.isDataViewComponent = true;\n                viewComponentState.configPropertyName = componentDescriptor.configPropertyName;\n            }\n            forOwn(componentDefinition.propertiesByName, (propertyValue, propertyName) => {\n                const viewComponentPropertyDescriptor = find(componentDescriptor.properties, (descriptor) => propertyName === descriptor.name);\n                const isExpressionEvaluationEnabled = viewComponentPropertyDescriptor && viewComponentPropertyDescriptor.enableExpressionEvaluation;\n                // initialize view component expressions\n                if (isExpressionEvaluationEnabled) {\n                    // create expression for property\n                    viewComponentState.expressions.push(new ComponentExpression(propertyName, propertyValue, this.rxExpressionEvaluatorService, viewComponentPropertyDescriptor.evaluatorService));\n                }\n                // update view component config state object\n                this.updateComponentConfigProperty(propertyName, isExpressionEvaluationEnabled ? null : propertyValue, viewComponentState);\n            });\n            // add initial view component state to evaluationData\n            this.updateEvaluationData(viewComponentState);\n            if (this.isContainerComponentDefinition(componentDefinition)) {\n                // set up view component events\n                componentDefinition.componentDefinitions\n                    .filter((currentComponentDefinition) => currentComponentDefinition.type === RxViewComponentType.Action)\n                    .forEach((actionComponentDefinition) => {\n                    const actionState = this.buildViewComponentActionState(actionComponentDefinition);\n                    if (actionState) {\n                        viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME].push(actionState);\n                    }\n                });\n                // sort actions in correct order\n                viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME] = sortBy(viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME], 'index');\n                // set up child view component guids\n                viewComponentState.childViewComponentGuids = componentDefinition.componentDefinitions\n                    .filter((currentComponentDefinition) => currentComponentDefinition.type !== RxViewComponentType.Action)\n                    .map((currentComponentDefinition) => currentComponentDefinition.guid);\n            }\n            return viewComponentState;\n        }\n        else if (componentDefinition.type !== RxViewComponentType.Action) {\n            this.rxLogService.warning(`Cannot initialize view component. View Component Descriptor for ${componentDefinition.type} not found.`);\n        }\n    }\n    // generate action view component state\n    buildViewComponentActionState(actionComponentDefinition) {\n        const actionDescriptor = this.rxViewActionRegistryService.get(actionComponentDefinition.propertiesByName.name);\n        if (actionDescriptor) {\n            const actionState = {\n                guid: actionComponentDefinition.guid,\n                name: actionComponentDefinition.propertiesByName.name,\n                index: toNumber(actionComponentDefinition.propertiesByName.index) || 0,\n                config: {},\n                publicState: {},\n                expressions: []\n            };\n            Object.keys(actionComponentDefinition.propertiesByName || {})\n                .filter((parameterName) => parameterName !== 'name')\n                .map((parameterName) => {\n                const actionPropertyDescriptor = (actionDescriptor.parameters || []).find((descriptor) => parameterName === descriptor.name);\n                const isExpressionEvaluationEnabled = actionPropertyDescriptor && actionPropertyDescriptor.enableExpressionEvaluation;\n                // initialize action view component expressions\n                if (isExpressionEvaluationEnabled) {\n                    // create expression for property\n                    this.initializeActionExpressionForProperty(actionState, actionPropertyDescriptor.evaluatorService, parameterName, actionComponentDefinition.propertiesByName[parameterName]);\n                }\n                // add initial action view component state to evaluationData\n                this.updateActionConfigProperty(parameterName, isExpressionEvaluationEnabled ? null : actionComponentDefinition.propertiesByName[parameterName], actionState);\n            });\n            return actionState;\n        }\n    }\n    initializeActionExpressionForProperty(actionState, evaluatorService, propertyName, propertyValue) {\n        if (isObject(propertyValue)) {\n            forIn(propertyValue, (value, name) => {\n                this.initializeActionExpressionForProperty(actionState, evaluatorService, `${propertyName}.${name}`, value);\n            });\n        }\n        else {\n            actionState.expressions.push(new ComponentExpression(propertyName, propertyValue, this.rxExpressionEvaluatorService, evaluatorService));\n        }\n    }\n    callRuntimeComponentsApi(methodName, ...args) {\n        const resultSubject = new ReplaySubject(1);\n        const errors = [];\n        const apiCallResults = Array.from(this.viewComponentStates.values())\n            .filter((viewComponent) => Boolean(viewComponent.publicState.api && isFunction(viewComponent.publicState.api[methodName])))\n            .map((viewComponent) => {\n            let result = viewComponent.publicState.api[methodName].apply(null, args);\n            if (result && result.then) {\n                result = from(result);\n            }\n            else if (!(result instanceof Observable)) {\n                result = of(result);\n            }\n            return result.pipe(take(1), map((res) => ({\n                guid: viewComponent.guid,\n                data: res\n            })), tap({\n                error: (error) => errors.push(error)\n            }), \n            // catch errors from each view component api call to allow to successfully finish other api calls.\n            catchError(() => EMPTY));\n        });\n        combineLatest(apiCallResults).subscribe({\n            next: (results) => resultSubject.next(results),\n            complete: () => (isEmpty(errors) ? resultSubject.complete() : resultSubject.error(errors))\n        });\n        return resultSubject.asObservable();\n    }\n    evaluateComponentExpressions(viewComponent, expressionFilterFunc) {\n        // update component expressions\n        viewComponent.expressions.filter(expressionFilterFunc).forEach((componentExpression) => {\n            this.updateComponentConfigProperty(componentExpression.propertyName, this.evaluateExpression(componentExpression), viewComponent);\n        });\n        this.updateEvaluationData(viewComponent);\n        // update event expressions\n        Object.keys(viewComponent.eventStates).forEach((eventName) => {\n            viewComponent.eventStates[eventName].forEach((actionState) => {\n                actionState.expressions.filter(expressionFilterFunc).forEach((componentExpression) => {\n                    this.updateActionConfigProperty(componentExpression.propertyName, this.evaluateExpression(componentExpression), actionState);\n                    this.updateEvaluationData(viewComponent);\n                });\n            });\n        });\n    }\n    evaluateDependentProperties(viewComponent, guid, propertyName) {\n        this.evaluateComponentExpressions(viewComponent, (componentExpression) => componentExpression.hasDependency(guid, propertyName));\n    }\n    evaluateExpression(componentExpression) {\n        let evaluatedValue;\n        try {\n            evaluatedValue = componentExpression.evaluate(this.evaluationData);\n        }\n        catch (e) {\n            evaluatedValue = null;\n            this.rxNotificationService.addErrorMessage(e.message, '');\n        }\n        return evaluatedValue;\n    }\n    // update view component config property based on property descriptor\n    updateComponentConfigProperty(propertyName, propertyValue, viewComponent) {\n        const viewComponentDescriptor = this.rxViewComponentRegistryService.get(viewComponent.type);\n        const viewComponentPropertyDescriptor = find(viewComponentDescriptor.properties, {\n            name: propertyName\n        });\n        viewComponent.configState[propertyName] = this.processPropertyValue(propertyValue, viewComponentPropertyDescriptor);\n    }\n    // update action view component config property based on property descriptor\n    updateActionConfigProperty(propertyName, propertyValue, actionComponent) {\n        const viewActionDescriptor = this.rxViewActionRegistryService.get(actionComponent.name);\n        let viewActionParameterDescriptor = find(viewActionDescriptor.parameters, {\n            name: propertyName\n        });\n        if (!viewActionParameterDescriptor && includes(propertyName, '.')) {\n            const primaryPropertyName = propertyName.split('.')[0];\n            viewActionParameterDescriptor = find(viewActionDescriptor.parameters, { name: primaryPropertyName });\n        }\n        set(actionComponent.config, propertyName, this.processPropertyValue(propertyValue, viewActionParameterDescriptor));\n    }\n    // sync component data with expression data\n    updateEvaluationData(viewComponent) {\n        // update component data\n        this.evaluationData.view.components[viewComponent.guid] = Object.assign(Object.assign({}, viewComponent.configState), viewComponent.publicState);\n        // update component actions data\n        Object.keys(viewComponent.eventStates).forEach((eventName) => {\n            viewComponent.eventStates[eventName].forEach((actionState) => {\n                this.evaluationData.view.components[actionState.guid] = actionState.publicState;\n            });\n        });\n    }\n    // cast property value to the type defined in the descriptor\n    processPropertyValue(propertyValue, propertyDescriptor) {\n        if (propertyDescriptor && propertyDescriptor.type && !isNil(propertyValue)) {\n            // try to cast property value to type defined in component descriptor\n            if (propertyDescriptor.type === ViewComponentPropertyType.Boolean) {\n                if (includes(['0', 'false'], propertyValue)) {\n                    propertyValue = false;\n                }\n                else {\n                    propertyValue = Boolean(propertyValue);\n                }\n            }\n            else if (propertyDescriptor.type === ViewComponentPropertyType.Number) {\n                propertyValue = Number(propertyValue);\n                if (Number.isNaN(propertyValue)) {\n                    propertyValue = null;\n                }\n            }\n            else if (propertyDescriptor.type === ViewComponentPropertyType.String) {\n                propertyValue = String(propertyValue);\n            }\n            else if ([ViewComponentPropertyType.Array, ViewComponentPropertyType.Object].includes(propertyDescriptor.type)) {\n                propertyValue = this.rxJsonParserService.tryParseJson(propertyValue);\n            }\n        }\n        return propertyValue;\n    }\n    isContainerComponentDefinition(componentDefinition) {\n        return componentDefinition.componentDefinitions !== undefined;\n    }\n}\nRuntimeViewModel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModel, deps: [{ token: i1.RxBundleService }, { token: i1.RxGlobalCacheService }, { token: i2$1.RxViewComponentRegistryService }, { token: RxViewDefinitionAdapterService }, { token: i2$1.RxViewDefinitionParserService }, { token: i2$1.RxViewDefinitionService }, { token: RxRuntimeViewUtilsService }, { token: i2$1.RxExpressionEvaluatorService }, { token: i1.RxNotificationService }, { token: i2$1.RxViewActionRegistryService }, { token: i1.RxLogService }, { token: ViewComponentEventManager }, { token: i2$3.RxUtilityModalsService }, { token: i2$1.RxViewDefinitionCacheService }, { token: i2$2.RxObjectUtilsService }, { token: i2$2.RxJsonParserService }, { token: i1.RxCurrentUserService }], target: i0.ɵɵFactoryTarget.Injectable });\nRuntimeViewModel.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModel });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModel, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.RxBundleService }, { type: i1.RxGlobalCacheService }, { type: i2$1.RxViewComponentRegistryService }, { type: RxViewDefinitionAdapterService }, { type: i2$1.RxViewDefinitionParserService }, { type: i2$1.RxViewDefinitionService }, { type: RxRuntimeViewUtilsService }, { type: i2$1.RxExpressionEvaluatorService }, { type: i1.RxNotificationService }, { type: i2$1.RxViewActionRegistryService }, { type: i1.RxLogService }, { type: ViewComponentEventManager }, { type: i2$3.RxUtilityModalsService }, { type: i2$1.RxViewDefinitionCacheService }, { type: i2$2.RxObjectUtilsService }, { type: i2$2.RxJsonParserService }, { type: i1.RxCurrentUserService }]; } });\n\nclass RxRuntimeViewRegistryService {\n    constructor() {\n        this.activeRuntimeViews = [];\n    }\n    register(runtimeViewModel) {\n        if (!this.activeRuntimeViews.includes(runtimeViewModel)) {\n            this.activeRuntimeViews.push(runtimeViewModel);\n        }\n    }\n    getAll() {\n        return this.activeRuntimeViews;\n    }\n    unregister(runtimeViewModel) {\n        pull(this.activeRuntimeViews, runtimeViewModel);\n    }\n}\nRxRuntimeViewRegistryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRuntimeViewRegistryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nRxRuntimeViewRegistryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRuntimeViewRegistryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RxRuntimeViewRegistryService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass RuntimeViewCanvasComponent {\n    constructor(runtimeViewCanvasService) {\n        this.runtimeViewCanvasService = runtimeViewCanvasService;\n        this.componentPropertyChanged = new EventEmitter();\n        this.destroy$ = new Subject();\n    }\n    ngOnInit() {\n        this.runtimeViewCanvasService.componentPropertyChanged$\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((event) => {\n            this.componentPropertyChanged.emit(event);\n        });\n    }\n    ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.unsubscribe();\n    }\n}\nRuntimeViewCanvasComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasComponent, deps: [{ token: RuntimeViewCanvasService }], target: i0.ɵɵFactoryTarget.Component });\nRuntimeViewCanvasComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RuntimeViewCanvasComponent, selector: \"rx-runtime-view-canvas\", inputs: { layout: \"layout\" }, outputs: { componentPropertyChanged: \"componentPropertyChanged\" }, providers: [RuntimeViewCanvasService], ngImport: i0, template: \"<rx-runtime-view-canvas-item class=\\\"root-item\\\" *ngIf=\\\"layout\\\" [layout]=\\\"layout\\\"></rx-runtime-view-canvas-item>\\n\", components: [{ type: RuntimeViewCanvasItemComponent, selector: \"rx-runtime-view-canvas-item\", inputs: [\"layout\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-runtime-view-canvas',\n                    templateUrl: './runtime-view-canvas.component.html',\n                    providers: [RuntimeViewCanvasService]\n                }]\n        }], ctorParameters: function () { return [{ type: RuntimeViewCanvasService }]; }, propDecorators: { layout: [{\n                type: Input\n            }], componentPropertyChanged: [{\n                type: Output\n            }] } });\n\nclass RuntimeViewComponent {\n    constructor(runtimeViewModelApi, rxRecordDefinitionCacheService, runtimeViewLayoutService, runtimeViewModel, rxProcessDefinitionCacheService, rxRuntimeViewRegistryService, rxViewDefinitionCacheService, rxAssociationDefinitionCacheService, rxViewDefinitionService) {\n        this.runtimeViewModelApi = runtimeViewModelApi;\n        this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;\n        this.runtimeViewLayoutService = runtimeViewLayoutService;\n        this.runtimeViewModel = runtimeViewModel;\n        this.rxProcessDefinitionCacheService = rxProcessDefinitionCacheService;\n        this.rxRuntimeViewRegistryService = rxRuntimeViewRegistryService;\n        this.rxViewDefinitionCacheService = rxViewDefinitionCacheService;\n        this.rxAssociationDefinitionCacheService = rxAssociationDefinitionCacheService;\n        this.rxViewDefinitionService = rxViewDefinitionService;\n        this.destroyed$ = new ReplaySubject(1);\n        this.save = new EventEmitter();\n        this.closeView = new EventEmitter();\n        this.cancelView = new EventEmitter();\n        this.beforeLoad = new EventEmitter();\n        this.afterLoad = new EventEmitter();\n        this.rxAssociationDefinitionCacheService.registerConsumer(this.destroyed$);\n        this.rxProcessDefinitionCacheService.registerConsumer(this.destroyed$);\n        this.rxRecordDefinitionCacheService.registerConsumer(this.destroyed$);\n        this.rxViewDefinitionCacheService.registerConsumer(this.destroyed$);\n    }\n    onTrigger() {\n        this.runtimeViewModel.isUserInteractionDetected = true;\n    }\n    ngOnInit() {\n        this.init();\n        this.runtimeViewModel.cancel$.pipe(takeUntil(this.destroyed$)).subscribe(() => this.cancelView.emit());\n        this.runtimeViewModel.save$.pipe(takeUntil(this.destroyed$)).subscribe(() => this.save.emit());\n        this.runtimeViewModel.close$\n            .pipe(takeUntil(this.destroyed$))\n            .subscribe((viewOutputParams) => this.closeView.emit(viewOutputParams));\n    }\n    ngOnChanges(changes) {\n        if (changes.configuration.currentValue &&\n            changes.configuration.previousValue &&\n            changes.configuration.currentValue.viewDefinitionName !== changes.configuration.previousValue.viewDefinitionName) {\n            this.runtimeViewModelApi.clear();\n            this.runtimeViewLayoutService.clear();\n            this.configuration = changes.configuration.currentValue;\n            this.init();\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n        this.rxRuntimeViewRegistryService.unregister(this.runtimeViewModel);\n    }\n    init() {\n        this.beforeLoad.emit();\n        this.runtimeViewModel.init(this.configuration).subscribe({\n            complete: () => {\n                this.runtimeViewModelApi.init(this.runtimeViewModel);\n                this.runtimeViewLayoutService.init(this.runtimeViewModel, this.runtimeViewModelApi);\n                this.hostClass = this.runtimeViewModel.viewDefinition.styles || '';\n                if (this.rxViewDefinitionService.isPageView(this.runtimeViewModel.viewDefinition)) {\n                    this.hostClass = this.hostClass + ' rx-page-view';\n                }\n                this.viewDefinitionGuid = this.runtimeViewModel.viewDefinition.guid;\n                this.runtimeViewModel.isUserInteractionDetected = false;\n                this.afterLoad.emit();\n            }\n        });\n        if (this.configuration.onRegisterApi) {\n            this.configuration.onRegisterApi(this.runtimeViewModel.api);\n        }\n        this.rxRuntimeViewRegistryService.register(this.runtimeViewModel);\n    }\n}\nRuntimeViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewComponent, deps: [{ token: RuntimeViewModelApi }, { token: i2$4.RxRecordDefinitionCacheService }, { token: RuntimeViewLayoutService }, { token: RuntimeViewModel }, { token: i5.RxProcessDefinitionCacheService }, { token: RxRuntimeViewRegistryService }, { token: i2$1.RxViewDefinitionCacheService }, { token: i8.RxAssociationDefinitionCacheService }, { token: i2$1.RxViewDefinitionService }], target: i0.ɵɵFactoryTarget.Component });\nRuntimeViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RuntimeViewComponent, selector: \"rx-runtime-view\", inputs: { configuration: \"configuration\" }, outputs: { save: \"save\", closeView: \"closeView\", cancelView: \"cancelView\", beforeLoad: \"beforeLoad\", afterLoad: \"afterLoad\" }, host: { listeners: { \"focusin\": \"onTrigger()\" }, properties: { \"class\": \"this.hostClass\", \"attr.rx-view-definition-guid\": \"this.viewDefinitionGuid\" } }, providers: [RuntimeViewModel, RuntimeViewModelApi, RuntimeViewLayoutService], usesOnChanges: true, ngImport: i0, template: \"<rx-runtime-view-canvas\\n  (componentPropertyChanged)=\\\"runtimeViewModel.onViewComponentPropertyChanged($event)\\\"\\n  *ngIf=\\\"runtimeViewLayoutService.layout\\\"\\n  [layout]=\\\"runtimeViewLayoutService.layout\\\"\\n></rx-runtime-view-canvas>\\n\", styles: [\":host.rx-page-view ::ng-deep .outlet-padding{padding:0}:host.rx-page-view ::ng-deep rx-runtime-view-canvas-item{height:100%}\\n\"], components: [{ type: RuntimeViewCanvasComponent, selector: \"rx-runtime-view-canvas\", inputs: [\"layout\"], outputs: [\"componentPropertyChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-runtime-view',\n                    templateUrl: './runtime-view.component.html',\n                    styleUrls: ['./runtime-view.component.scss'],\n                    providers: [RuntimeViewModel, RuntimeViewModelApi, RuntimeViewLayoutService]\n                }]\n        }], ctorParameters: function () { return [{ type: RuntimeViewModelApi }, { type: i2$4.RxRecordDefinitionCacheService }, { type: RuntimeViewLayoutService }, { type: RuntimeViewModel }, { type: i5.RxProcessDefinitionCacheService }, { type: RxRuntimeViewRegistryService }, { type: i2$1.RxViewDefinitionCacheService }, { type: i8.RxAssociationDefinitionCacheService }, { type: i2$1.RxViewDefinitionService }]; }, propDecorators: { configuration: [{\n                type: Input\n            }], save: [{\n                type: Output\n            }], closeView: [{\n                type: Output\n            }], cancelView: [{\n                type: Output\n            }], beforeLoad: [{\n                type: Output\n            }], afterLoad: [{\n                type: Output\n            }], hostClass: [{\n                type: HostBinding,\n                args: ['class']\n            }], viewDefinitionGuid: [{\n                type: HostBinding,\n                args: ['attr.rx-view-definition-guid']\n            }], onTrigger: [{\n                type: HostListener,\n                args: ['focusin']\n            }] } });\n\n// tslint:disable-next-line:directive-class-suffix\nclass BaseViewComponent {\n    constructor() {\n        this.customCssClasses = '';\n        this.autoFill = new EventEmitter();\n        this.autoScroll = new EventEmitter();\n        this.hidden = new EventEmitter();\n        this.isComponentHidden = false;\n        this.destroyed$ = new ReplaySubject(1);\n        this.propertyChanged = new EventEmitter();\n    }\n    get isHidden() {\n        return this.isComponentHidden;\n    }\n    set isHidden(value) {\n        this.hidden.emit(value);\n        this.isComponentHidden = Boolean(value);\n    }\n    ngOnInit() {\n        this.config.pipe(pluck('styles'), takeUntil(this.destroyed$)).subscribe((styles) => {\n            this.customCssClasses = styles || '';\n            this.autoFill.emit(this.customCssClasses.includes('rx-auto-fill'));\n            this.autoScroll.emit(this.customCssClasses.includes('rx-auto-scroll'));\n        });\n    }\n    notifyPropertyChanged(propertyName, newValue, oldValue) {\n        this.propertyChanged.next({\n            guid: this.guid,\n            propertyName,\n            newValue,\n            oldValue\n        });\n    }\n    triggerViewActions(guid = this.guid, viewActionTriggerEventName = VIEW_COMPONENT_DEFAULT_EVENT_NAME) {\n        return this.runtimeViewModelApi.triggerViewActions(guid, viewActionTriggerEventName);\n    }\n    ngOnDestroy() {\n        this.destroyed$.next(true);\n        this.destroyed$.complete();\n    }\n}\nBaseViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: BaseViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nBaseViewComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.1.3\", type: BaseViewComponent, outputs: { autoFill: \"autoFill\", autoScroll: \"autoScroll\", hidden: \"hidden\" }, host: { properties: { \"attr.rx-view-component-id\": \"this.guid\", \"class\": \"this.customCssClasses\", \"hidden\": \"this.isHidden\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: BaseViewComponent, decorators: [{\n            type: Directive\n        }], propDecorators: { guid: [{\n                type: HostBinding,\n                args: ['attr.rx-view-component-id']\n            }], customCssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], autoFill: [{\n                type: Output\n            }], autoScroll: [{\n                type: Output\n            }], hidden: [{\n                type: Output\n            }], isHidden: [{\n                type: HostBinding,\n                args: ['hidden']\n            }] } });\n\nclass RuntimeViewCanvasOutletComponent {\n    constructor(runtimeViewCanvasItemService, componentFactoryResolver) {\n        this.runtimeViewCanvasItemService = runtimeViewCanvasItemService;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.name = RX_VIEW_DEFINITION.defaultOutletName;\n    }\n    ngOnInit() {\n        this.runtimeViewCanvasItemService.registerOutlet(this.name, this.container, this.componentFactoryResolver.resolveComponentFactory(RuntimeViewCanvasItemContainerComponent));\n    }\n}\nRuntimeViewCanvasOutletComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasOutletComponent, deps: [{ token: RuntimeViewCanvasItemService }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });\nRuntimeViewCanvasOutletComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RuntimeViewCanvasOutletComponent, selector: \"rx-runtime-view-canvas-outlet\", inputs: { name: \"name\" }, viewQueries: [{ propertyName: \"container\", first: true, predicate: [\"container\"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: \"<ng-container #container></ng-container>\\n\" });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasOutletComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-runtime-view-canvas-outlet',\n                    templateUrl: './runtime-view-canvas-outlet.component.html'\n                }]\n        }], ctorParameters: function () { return [{ type: RuntimeViewCanvasItemService }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { name: [{\n                type: Input\n            }], container: [{\n                type: ViewChild,\n                args: ['container', { read: ViewContainerRef, static: true }]\n            }] } });\n\nclass RuntimeViewCanvasModule {\n}\nRuntimeViewCanvasModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRuntimeViewCanvasModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasModule, declarations: [RuntimeViewCanvasComponent,\n        RuntimeViewCanvasItemComponent,\n        RuntimeViewCanvasItemContainerComponent,\n        RuntimeViewCanvasOutletComponent], imports: [CommonModule, FormsModule], exports: [RuntimeViewCanvasOutletComponent,\n        RuntimeViewCanvasComponent,\n        RuntimeViewCanvasItemComponent,\n        RuntimeViewCanvasItemContainerComponent] });\nRuntimeViewCanvasModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasModule, imports: [[CommonModule, FormsModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewCanvasModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FormsModule],\n                    declarations: [\n                        RuntimeViewCanvasComponent,\n                        RuntimeViewCanvasItemComponent,\n                        RuntimeViewCanvasItemContainerComponent,\n                        RuntimeViewCanvasOutletComponent\n                    ],\n                    exports: [\n                        RuntimeViewCanvasOutletComponent,\n                        RuntimeViewCanvasComponent,\n                        RuntimeViewCanvasItemComponent,\n                        RuntimeViewCanvasItemContainerComponent\n                    ],\n                    entryComponents: [RuntimeViewCanvasItemContainerComponent]\n                }]\n        }] });\n\nclass RuntimeViewModalComponent {\n    constructor(rxRuntimeViewRegistryService, rxUtilityModalsService, translateService, changeDetector, activeModalRef, dockedPanelContext) {\n        this.rxRuntimeViewRegistryService = rxRuntimeViewRegistryService;\n        this.rxUtilityModalsService = rxUtilityModalsService;\n        this.translateService = translateService;\n        this.changeDetector = changeDetector;\n        this.activeModalRef = activeModalRef;\n        this.dockedPanelContext = dockedPanelContext;\n        this.isBlade = false;\n        this.context = dockedPanelContext || activeModalRef;\n        this.isBlade = Boolean(dockedPanelContext);\n        const data = this.context.getData();\n        this.configuration = data.configuration;\n        this.title = data.title;\n        this.notification = data.notification;\n        this.isCancellable = data.isCancellable;\n        this.closeLabel = translateService.instant('com.bmc.arsys.rx.client.common.close.label');\n    }\n    onCancelView() {\n        this.context.dismiss(null);\n    }\n    closeModal() {\n        this.context.dismiss(DismissReasons.CLOSE_BTN);\n    }\n    onClose(viewOutputParams) {\n        this.context.close(viewOutputParams);\n    }\n    onBeforeLoad() {\n        this.busySubscription = NEVER.subscribe();\n        // workaround: run changeDetector to avoid the ExpressionChangedAfterItHasBeenCheckedError\n        this.changeDetector.detectChanges();\n    }\n    onAfterLoad() {\n        var _a;\n        (_a = this.busySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n}\nRuntimeViewModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModalComponent, deps: [{ token: RxRuntimeViewRegistryService }, { token: i2$3.RxUtilityModalsService }, { token: i3.TranslateService }, { token: i0.ChangeDetectorRef }, { token: i4.ActiveModalRef, optional: true }, { token: i4.DockedPanelContext, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nRuntimeViewModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.1.3\", type: RuntimeViewModalComponent, selector: \"rx-runtime-view-modal\", ngImport: i0, template: \"<ng-container *ngIf=\\\"title || isCancellable\\\">\\n  <div class=\\\"dp-header\\\" *ngIf=\\\"isBlade; else modalHeader\\\">\\n    <span class=\\\"dp-title\\\">{{ title }}</span>\\n    <button\\n      class=\\\"close dp-close\\\"\\n      rx-id=\\\"x-button\\\"\\n      [attr.aria-label]=\\\"closeLabel\\\"\\n      *ngIf=\\\"isCancellable\\\"\\n      (click)=\\\"closeModal()\\\"\\n    ></button>\\n  </div>\\n</ng-container>\\n\\n<ng-template #modalHeader>\\n  <div class=\\\"modal-header\\\">\\n    <h5 class=\\\"modal-title\\\">{{ title }}</h5>\\n    <button\\n      class=\\\"close dp-close\\\"\\n      rx-id=\\\"x-button\\\"\\n      [attr.aria-label]=\\\"closeLabel\\\"\\n      *ngIf=\\\"isCancellable\\\"\\n      (click)=\\\"closeModal()\\\"\\n    ></button>\\n  </div>\\n</ng-template>\\n\\n<adapt-alert\\n  *ngIf=\\\"notification\\\"\\n  class=\\\"pl-4 pt-4\\\"\\n  [config]=\\\"{\\n    content: notification,\\n    type: 'inline',\\n    variant: 'info'\\n  }\\\"\\n></adapt-alert>\\n\\n<div\\n  [ngClass]=\\\"{\\n    'modal-body p-0': !isBlade,\\n    'dp-content': isBlade\\n  }\\\"\\n>\\n  <div class=\\\"position-relative\\\">\\n    <rx-busy-indicator\\n      [options]=\\\"{\\n        busy: busySubscription,\\n        loaderType: 'lineLoader',\\n        delay: 250,\\n        backdrop: false,\\n        message: null\\n      }\\\"\\n    >\\n    </rx-busy-indicator>\\n  </div>\\n\\n  <rx-runtime-view\\n    [configuration]=\\\"configuration\\\"\\n    (cancelView)=\\\"onCancelView()\\\"\\n    (closeView)=\\\"onClose($event)\\\"\\n    (beforeLoad)=\\\"onBeforeLoad()\\\"\\n    (afterLoad)=\\\"onAfterLoad()\\\"\\n  ></rx-runtime-view>\\n</div>\\n\", styles: [\":host{height:100%;display:flex;flex-direction:column}.modal-header{min-height:34px}.dp-header{flex-direction:row!important}.dp-content>rx-runtime-view{height:100%}\\n\"], components: [{ type: i4.AdaptAlertComponent, selector: \"adapt-alert\", inputs: [\"config\"], outputs: [\"onClose\"] }, { type: i2$3.RxBusyIndicatorComponent, selector: \"rx-busy-indicator\", inputs: [\"options\"] }, { type: RuntimeViewComponent, selector: \"rx-runtime-view\", inputs: [\"configuration\"], outputs: [\"save\", \"closeView\", \"cancelView\", \"beforeLoad\", \"afterLoad\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'rx-runtime-view-modal',\n                    templateUrl: './runtime-view-modal.component.html',\n                    styleUrls: ['./runtime-view-modal.component.scss']\n                }]\n        }], ctorParameters: function () { return [{ type: RxRuntimeViewRegistryService }, { type: i2$3.RxUtilityModalsService }, { type: i3.TranslateService }, { type: i0.ChangeDetectorRef }, { type: i4.ActiveModalRef, decorators: [{\n                    type: Optional\n                }] }, { type: i4.DockedPanelContext, decorators: [{\n                    type: Optional\n                }] }]; } });\n\nconst RX_RUNTIME_VIEW = {\n    actions: {\n        save: 'rx-runtime-view-save',\n        close: 'rx-runtime-view-close',\n        cancel: 'rx-runtime-view-cancel'\n    }\n};\n\nclass RuntimeViewModule {\n}\nRuntimeViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRuntimeViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModule, declarations: [RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent], imports: [CommonModule, RuntimeViewCanvasModule, TranslateModule, AdaptAlertModule, RxBusyIndicatorModule], exports: [RuntimeViewCanvasModule, RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent] });\nRuntimeViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModule, imports: [[CommonModule, RuntimeViewCanvasModule, TranslateModule, AdaptAlertModule, RxBusyIndicatorModule], RuntimeViewCanvasModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: RuntimeViewModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, RuntimeViewCanvasModule, TranslateModule, AdaptAlertModule, RxBusyIndicatorModule],\n                    exports: [RuntimeViewCanvasModule, RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent],\n                    declarations: [RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent],\n                    entryComponents: [RuntimeViewRootComponent, RuntimeViewModalComponent]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseViewComponent, RX_RUNTIME_VIEW, RuntimeLayoutItem, RuntimeLayoutOutlet, RuntimeLayoutOutletColumn, RuntimeViewCanvasComponent, RuntimeViewCanvasItemComponent, RuntimeViewCanvasItemContainerComponent, RuntimeViewCanvasItemService, RuntimeViewCanvasModule, RuntimeViewCanvasOutletComponent, RuntimeViewComponent, RuntimeViewModalComponent, RuntimeViewModel, RuntimeViewModelApi, RuntimeViewModule, RuntimeViewRootComponent, RxRuntimeViewRegistryService, RxRuntimeViewUtilsService, VIEW_COMPONENT_DEFAULT_EVENT_NAME, ViewComponentEventManager };\n//# sourceMappingURL=helix-platform-view-runtime.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}