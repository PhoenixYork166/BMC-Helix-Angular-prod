{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, ChangeDetectionStrategy, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as kjua from 'kjua-svg';\nconst _c0 = [\"elem\"];\nclass NgxKjuaComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    /**\n     * render method\n     */\n    this.render = \"svg\";\n    /**\n     * render pixel-perfect lines\n     */\n    this.crisp = true;\n    /**\n     * minimum version= 1..40\n     */\n    this.minVersion = 1;\n    /**\n     * error correction level\n     */\n    this.ecLevel = \"L\";\n    /**\n     * size in pixel\n     */\n    this.size = 200;\n    /**\n     * pixel-ratio; undefined for devicePixelRatio\n     */\n    this.ratio = undefined;\n    /**\n     * code color\n     */\n    this.fill = \"#333\";\n    /**\n     * background color\n     */\n    this.back = \"#fff\";\n    /**\n     * content\n     */\n    this.text = \"\";\n    /**\n     * roundend corners in pc= 0..100\n     */\n    this.rounded = 0;\n    /**\n     * quiet zone in modules\n     */\n    this.quiet = 0;\n    /**\n     * modes\n     */\n    this.mode = \"plain\";\n    /**\n     * label/image size and pos in pc= 0..100\n     */\n    this.mSize = 30;\n    this.mPosX = 50;\n    this.mPosY = 50;\n    this.image = undefined;\n    this.imageAsCode = false;\n    /**\n     * label\n     */\n    this.label = \"\";\n    this.fontname = \"sans-serif\";\n    this.fontcolor = \"#333\";\n    this.fontoutline = true;\n    /**\n     * If true, rendering is done inside \"requestAnimationFrame\"-call.\n     * Use this if you want to generate more than one code (e.g. batch)\n     */\n    this.renderAsync = false;\n    this.codeFinished = new EventEmitter();\n    this.viewInitialized = false;\n  }\n  ngAfterViewInit() {\n    this.viewInitialized = true;\n    this.updateView();\n  }\n  ngOnChanges(changes) {\n    if (this.viewInitialized) {\n      this.updateView();\n    }\n  }\n  get template() {\n    const settings = {\n      render: this.render,\n      crisp: this.crisp,\n      minVersion: this.minVersion,\n      ecLevel: this.ecLevel,\n      size: this.size,\n      ratio: this.ratio,\n      fill: this.fill,\n      back: this.back,\n      text: this.text,\n      rounded: this.rounded,\n      quiet: this.quiet,\n      mode: this.mode,\n      mSize: this.mSize,\n      mPosX: this.mPosX,\n      mPosY: this.mPosY,\n      label: this.label,\n      fontname: this.fontname,\n      fontcolor: this.fontcolor,\n      image: this.image,\n      fontoutline: this.fontoutline,\n      imageAsCode: this.imageAsCode,\n      elementId: this.elementId\n    };\n    return kjua(settings);\n  }\n  renderCode() {\n    this.div.nativeElement.innerHTML = \"\";\n    const node = this.template;\n    this.div.nativeElement.appendChild(node);\n    this.codeFinished.next(node);\n  }\n  updateView() {\n    this.div.nativeElement.style.width = +this.size;\n    this.div.nativeElement.style.height = +this.size;\n    if (typeof this.image === \"string\") {\n      const img = new Image();\n      img.crossOrigin = \"anonymous\";\n      img.onload = () => {\n        if (this.renderAsync) {\n          requestAnimationFrame(() => this.renderCode());\n        } else {\n          this.renderCode();\n        }\n      };\n      img.src = 'data:image/png;base64,' + this.image;\n    } else {\n      if (this.renderAsync) {\n        requestAnimationFrame(() => this.renderCode());\n      } else {\n        this.renderCode();\n      }\n    }\n  }\n}\nNgxKjuaComponent.ɵfac = function NgxKjuaComponent_Factory(t) {\n  return new (t || NgxKjuaComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\nNgxKjuaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxKjuaComponent,\n  selectors: [[\"ngx-kjua\"]],\n  viewQuery: function NgxKjuaComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.div = _t.first);\n    }\n  },\n  inputs: {\n    render: \"render\",\n    crisp: \"crisp\",\n    minVersion: \"minVersion\",\n    ecLevel: \"ecLevel\",\n    size: \"size\",\n    ratio: \"ratio\",\n    fill: \"fill\",\n    back: \"back\",\n    text: \"text\",\n    rounded: \"rounded\",\n    quiet: \"quiet\",\n    mode: \"mode\",\n    mSize: \"mSize\",\n    mPosX: \"mPosX\",\n    mPosY: \"mPosY\",\n    image: \"image\",\n    imageAsCode: \"imageAsCode\",\n    label: \"label\",\n    fontname: \"fontname\",\n    fontcolor: \"fontcolor\",\n    fontoutline: \"fontoutline\",\n    renderAsync: \"renderAsync\",\n    cssClass: \"cssClass\",\n    elementId: \"elementId\"\n  },\n  outputs: {\n    codeFinished: \"codeFinished\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"elem\", \"\"]],\n  template: function NgxKjuaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClass);\n    }\n  },\n  styles: [\"[_nghost-%COMP%]{display:block}\"],\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxKjuaComponent, [{\n    type: Component,\n    args: [{\n      selector: \"ngx-kjua\",\n      template: `\n    <div [class]=\"cssClass\" #elem></div>`,\n      styles: [`\n    :host {\n      display: block;\n    }\n  `],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    render: [{\n      type: Input\n    }],\n    crisp: [{\n      type: Input\n    }],\n    minVersion: [{\n      type: Input\n    }],\n    ecLevel: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    ratio: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    back: [{\n      type: Input\n    }],\n    text: [{\n      type: Input\n    }],\n    rounded: [{\n      type: Input\n    }],\n    quiet: [{\n      type: Input\n    }],\n    mode: [{\n      type: Input\n    }],\n    mSize: [{\n      type: Input\n    }],\n    mPosX: [{\n      type: Input\n    }],\n    mPosY: [{\n      type: Input\n    }],\n    image: [{\n      type: Input\n    }],\n    imageAsCode: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    fontname: [{\n      type: Input\n    }],\n    fontcolor: [{\n      type: Input\n    }],\n    fontoutline: [{\n      type: Input\n    }],\n    renderAsync: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    elementId: [{\n      type: Input\n    }],\n    codeFinished: [{\n      type: Output\n    }],\n    div: [{\n      type: ViewChild,\n      args: [\"elem\"]\n    }]\n  });\n})();\nclass NgxKjuaModule {}\nNgxKjuaModule.ɵfac = function NgxKjuaModule_Factory(t) {\n  return new (t || NgxKjuaModule)();\n};\nNgxKjuaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxKjuaModule,\n  declarations: [NgxKjuaComponent],\n  imports: [CommonModule],\n  exports: [NgxKjuaComponent]\n});\nNgxKjuaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxKjuaModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [NgxKjuaComponent],\n      exports: [NgxKjuaComponent]\n    }]\n  }], null, null);\n})();\nclass QrCodeHelper {\n  /**\n   *  Make the code for creating an SMS.\n   *  Number can be provided as number or string (useful for international format e.g. +1 for USA)\n   *\n   * @paramnumber\n   * @param text\n   */\n  static makeSMS(number, text) {\n    if (text) {\n      if (text.length > 160) {\n        return `SMSTO:${number}:${text.substr(0, 160)}`;\n      } else {\n        return `SMSTO:${number}:${text}`;\n      }\n    } else {\n      return `SMSTO:${number}`;\n    }\n  }\n  /**\n   * Make the code for making a phone call\n   * Number can be provided as number or string (useful for international format e.g. +1 for USA)\n   *\n   * @param number\n   */\n  static makeCall(number) {\n    return `tel:${number}`;\n  }\n  /**\n   * Make the code for encoding a location\n   *\n   * @param lat\n   * @param lon\n   * @param meters\n   */\n  static makeGeo(lat, lon, meters = 400) {\n    return `geo:${lat},${lon},${meters}`;\n  }\n  /**\n   * Make the code for encoding an event in iCal format\n   * You have to do the encoding for the begin and end by yourself (use moment.js!)\n   *\n   * @param description\n   * @param begin\n   * @param end\n   */\n  static makeEvent(description, begin, end) {\n    return `BEGIN:VEVENT\nSUMMARY:${description}\nDTSTART:${begin}\nDTEND:${end}\nEND:VEVENT`;\n  }\n  /**\n   * Make the code for an Email\n   *\n   * @param recipient\n   * @param subject\n   * @param text\n   */\n  static makeEmail(recipient, subject, text) {\n    let retVal = `MATMSG:TO:${recipient};`;\n    if (subject) {\n      retVal += `SUB:${subject}`;\n    }\n    retVal += `;`;\n    if (text) {\n      retVal += `BODY:${text}`;\n    }\n    retVal += `;;`;\n    return retVal;\n  }\n  /**\n   * Make the code that lets user login to a WiFi\n   * If no pass is provided, the WiFi is considered as not encrypted (no WPA)\n   *\n   * @param ssid\n   * @param pass\n   * @param hidden\n   */\n  static makeWifi(ssid, pass, hidden = false) {\n    let retVal = `WIFI:${!!pass ? \"T:WPA\" : \"T:nopass\"};S:${ssid};`;\n    if (pass) {\n      retVal += `P:${pass}`;\n    }\n    retVal += `;`;\n    if (hidden) {\n      retVal += `H:true`;\n    }\n    retVal += `;`;\n    return retVal;\n  }\n  /**\n   * Make the code that encodes contact information.\n   * Numbers can be provided as number or string (useful for international format e.g. +1 for USA)\n   * Encoding is done with MECARD-format and NOT VCard! VCard gives a longer string and therefore a\n   * bigger code which has a negative impact on readability for scanners. You can, of course, create\n   * a VCard string as well but the format is more complex.\n   *\n   * @param name\n   * @param telNumbers\n   * @param address, values separated with comma\n   * @param email\n   * @param url\n   */\n  static makeContactMeCard(name, telNumbers, address, email, url) {\n    let retVal = `MECARD:N:${name};`;\n    if (address) {\n      retVal += `ADR:${address};`;\n    }\n    if (telNumbers && telNumbers.length > 0) {\n      for (let i = 0; i < telNumbers.length; i++) {\n        retVal += `TEL:${telNumbers[i]};`;\n      }\n    }\n    if (email) {\n      retVal += `EMAIL:${email};`;\n    }\n    if (url) {\n      retVal += `URL:${url};`;\n    }\n    retVal += `;`;\n    return retVal;\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxKjuaComponent, NgxKjuaModule, QrCodeHelper };\n//# sourceMappingURL=ngx-kjua.mjs.map","map":{"version":3,"names":["i0","EventEmitter","PLATFORM_ID","Component","ChangeDetectionStrategy","Inject","Input","Output","ViewChild","NgModule","CommonModule","kjua","_c0","NgxKjuaComponent","constructor","platformId","render","crisp","minVersion","ecLevel","size","ratio","undefined","fill","back","text","rounded","quiet","mode","mSize","mPosX","mPosY","image","imageAsCode","label","fontname","fontcolor","fontoutline","renderAsync","codeFinished","viewInitialized","ngAfterViewInit","updateView","ngOnChanges","changes","template","settings","elementId","renderCode","div","nativeElement","innerHTML","node","appendChild","next","style","width","height","img","Image","crossOrigin","onload","requestAnimationFrame","src","ɵfac","NgxKjuaComponent_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","NgxKjuaComponent_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","cssClass","outputs","features","ɵɵNgOnChangesFeature","decls","vars","consts","NgxKjuaComponent_Template","ɵɵelement","ɵɵclassMap","styles","changeDetection","ngDevMode","ɵsetClassMetadata","args","selector","OnPush","Object","decorators","NgxKjuaModule","NgxKjuaModule_Factory","ɵmod","ɵɵdefineNgModule","declarations","imports","exports","ɵinj","ɵɵdefineInjector","QrCodeHelper","makeSMS","number","length","substr","makeCall","makeGeo","lat","lon","meters","makeEvent","description","begin","end","makeEmail","recipient","subject","retVal","makeWifi","ssid","pass","hidden","makeContactMeCard","name","telNumbers","address","email","url","i"],"sources":["C:/projects/innovation-studio-developer/22.1/test210500/bundle/src/main/webapp/node_modules/ngx-kjua/fesm2020/ngx-kjua.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, ChangeDetectionStrategy, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as kjua from 'kjua-svg';\n\nclass NgxKjuaComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        /**\n         * render method\n         */\n        this.render = \"svg\";\n        /**\n         * render pixel-perfect lines\n         */\n        this.crisp = true;\n        /**\n         * minimum version= 1..40\n         */\n        this.minVersion = 1;\n        /**\n         * error correction level\n         */\n        this.ecLevel = \"L\";\n        /**\n         * size in pixel\n         */\n        this.size = 200;\n        /**\n         * pixel-ratio; undefined for devicePixelRatio\n         */\n        this.ratio = undefined;\n        /**\n         * code color\n         */\n        this.fill = \"#333\";\n        /**\n         * background color\n         */\n        this.back = \"#fff\";\n        /**\n         * content\n         */\n        this.text = \"\";\n        /**\n         * roundend corners in pc= 0..100\n         */\n        this.rounded = 0;\n        /**\n         * quiet zone in modules\n         */\n        this.quiet = 0;\n        /**\n         * modes\n         */\n        this.mode = \"plain\";\n        /**\n         * label/image size and pos in pc= 0..100\n         */\n        this.mSize = 30;\n        this.mPosX = 50;\n        this.mPosY = 50;\n        this.image = undefined;\n        this.imageAsCode = false;\n        /**\n         * label\n         */\n        this.label = \"\";\n        this.fontname = \"sans-serif\";\n        this.fontcolor = \"#333\";\n        this.fontoutline = true;\n        /**\n         * If true, rendering is done inside \"requestAnimationFrame\"-call.\n         * Use this if you want to generate more than one code (e.g. batch)\n         */\n        this.renderAsync = false;\n        this.codeFinished = new EventEmitter();\n        this.viewInitialized = false;\n    }\n    ngAfterViewInit() {\n        this.viewInitialized = true;\n        this.updateView();\n    }\n    ngOnChanges(changes) {\n        if (this.viewInitialized) {\n            this.updateView();\n        }\n    }\n    get template() {\n        const settings = {\n            render: this.render,\n            crisp: this.crisp,\n            minVersion: this.minVersion,\n            ecLevel: this.ecLevel,\n            size: this.size,\n            ratio: this.ratio,\n            fill: this.fill,\n            back: this.back,\n            text: this.text,\n            rounded: this.rounded,\n            quiet: this.quiet,\n            mode: this.mode,\n            mSize: this.mSize,\n            mPosX: this.mPosX,\n            mPosY: this.mPosY,\n            label: this.label,\n            fontname: this.fontname,\n            fontcolor: this.fontcolor,\n            image: this.image,\n            fontoutline: this.fontoutline,\n            imageAsCode: this.imageAsCode,\n            elementId: this.elementId\n        };\n        return kjua(settings);\n    }\n    renderCode() {\n        this.div.nativeElement.innerHTML = \"\";\n        const node = this.template;\n        this.div.nativeElement.appendChild(node);\n        this.codeFinished.next(node);\n    }\n    updateView() {\n        this.div.nativeElement.style.width = +this.size;\n        this.div.nativeElement.style.height = +this.size;\n        if (typeof this.image === \"string\") {\n            const img = new Image();\n            img.crossOrigin = \"anonymous\";\n            img.onload = () => {\n                if (this.renderAsync) {\n                    requestAnimationFrame(() => this.renderCode());\n                }\n                else {\n                    this.renderCode();\n                }\n            };\n            img.src = 'data:image/png;base64,' + this.image;\n        }\n        else {\n            if (this.renderAsync) {\n                requestAnimationFrame(() => this.renderCode());\n            }\n            else {\n                this.renderCode();\n            }\n        }\n    }\n}\nNgxKjuaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxKjuaComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nNgxKjuaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.6\", type: NgxKjuaComponent, selector: \"ngx-kjua\", inputs: { render: \"render\", crisp: \"crisp\", minVersion: \"minVersion\", ecLevel: \"ecLevel\", size: \"size\", ratio: \"ratio\", fill: \"fill\", back: \"back\", text: \"text\", rounded: \"rounded\", quiet: \"quiet\", mode: \"mode\", mSize: \"mSize\", mPosX: \"mPosX\", mPosY: \"mPosY\", image: \"image\", imageAsCode: \"imageAsCode\", label: \"label\", fontname: \"fontname\", fontcolor: \"fontcolor\", fontoutline: \"fontoutline\", renderAsync: \"renderAsync\", cssClass: \"cssClass\", elementId: \"elementId\" }, outputs: { codeFinished: \"codeFinished\" }, viewQueries: [{ propertyName: \"div\", first: true, predicate: [\"elem\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <div [class]=\"cssClass\" #elem></div>`, isInline: true, styles: [\":host{display:block}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxKjuaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"ngx-kjua\",\n                    template: `\n    <div [class]=\"cssClass\" #elem></div>`,\n                    styles: [`\n    :host {\n      display: block;\n    }\n  `],\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { render: [{\n                type: Input\n            }], crisp: [{\n                type: Input\n            }], minVersion: [{\n                type: Input\n            }], ecLevel: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], ratio: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], back: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }], rounded: [{\n                type: Input\n            }], quiet: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], mSize: [{\n                type: Input\n            }], mPosX: [{\n                type: Input\n            }], mPosY: [{\n                type: Input\n            }], image: [{\n                type: Input\n            }], imageAsCode: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], fontname: [{\n                type: Input\n            }], fontcolor: [{\n                type: Input\n            }], fontoutline: [{\n                type: Input\n            }], renderAsync: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], elementId: [{\n                type: Input\n            }], codeFinished: [{\n                type: Output\n            }], div: [{\n                type: ViewChild,\n                args: [\"elem\"]\n            }] } });\n\nclass NgxKjuaModule {\n}\nNgxKjuaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxKjuaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxKjuaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxKjuaModule, declarations: [NgxKjuaComponent], imports: [CommonModule], exports: [NgxKjuaComponent] });\nNgxKjuaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxKjuaModule, imports: [[\n            CommonModule\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.6\", ngImport: i0, type: NgxKjuaModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule\n                    ],\n                    declarations: [\n                        NgxKjuaComponent\n                    ],\n                    exports: [\n                        NgxKjuaComponent\n                    ]\n                }]\n        }] });\n\nclass QrCodeHelper {\n    /**\n     *  Make the code for creating an SMS.\n     *  Number can be provided as number or string (useful for international format e.g. +1 for USA)\n     *\n     * @paramnumber\n     * @param text\n     */\n    static makeSMS(number, text) {\n        if (text) {\n            if (text.length > 160) {\n                return `SMSTO:${number}:${text.substr(0, 160)}`;\n            }\n            else {\n                return `SMSTO:${number}:${text}`;\n            }\n        }\n        else {\n            return `SMSTO:${number}`;\n        }\n    }\n    /**\n     * Make the code for making a phone call\n     * Number can be provided as number or string (useful for international format e.g. +1 for USA)\n     *\n     * @param number\n     */\n    static makeCall(number) {\n        return `tel:${number}`;\n    }\n    /**\n     * Make the code for encoding a location\n     *\n     * @param lat\n     * @param lon\n     * @param meters\n     */\n    static makeGeo(lat, lon, meters = 400) {\n        return `geo:${lat},${lon},${meters}`;\n    }\n    /**\n     * Make the code for encoding an event in iCal format\n     * You have to do the encoding for the begin and end by yourself (use moment.js!)\n     *\n     * @param description\n     * @param begin\n     * @param end\n     */\n    static makeEvent(description, begin, end) {\n        return `BEGIN:VEVENT\nSUMMARY:${description}\nDTSTART:${begin}\nDTEND:${end}\nEND:VEVENT`;\n    }\n    /**\n     * Make the code for an Email\n     *\n     * @param recipient\n     * @param subject\n     * @param text\n     */\n    static makeEmail(recipient, subject, text) {\n        let retVal = `MATMSG:TO:${recipient};`;\n        if (subject) {\n            retVal += `SUB:${subject}`;\n        }\n        retVal += `;`;\n        if (text) {\n            retVal += `BODY:${text}`;\n        }\n        retVal += `;;`;\n        return retVal;\n    }\n    /**\n     * Make the code that lets user login to a WiFi\n     * If no pass is provided, the WiFi is considered as not encrypted (no WPA)\n     *\n     * @param ssid\n     * @param pass\n     * @param hidden\n     */\n    static makeWifi(ssid, pass, hidden = false) {\n        let retVal = `WIFI:${!!pass ? \"T:WPA\" : \"T:nopass\"};S:${ssid};`;\n        if (pass) {\n            retVal += `P:${pass}`;\n        }\n        retVal += `;`;\n        if (hidden) {\n            retVal += `H:true`;\n        }\n        retVal += `;`;\n        return retVal;\n    }\n    /**\n     * Make the code that encodes contact information.\n     * Numbers can be provided as number or string (useful for international format e.g. +1 for USA)\n     * Encoding is done with MECARD-format and NOT VCard! VCard gives a longer string and therefore a\n     * bigger code which has a negative impact on readability for scanners. You can, of course, create\n     * a VCard string as well but the format is more complex.\n     *\n     * @param name\n     * @param telNumbers\n     * @param address, values separated with comma\n     * @param email\n     * @param url\n     */\n    static makeContactMeCard(name, telNumbers, address, email, url) {\n        let retVal = `MECARD:N:${name};`;\n        if (address) {\n            retVal += `ADR:${address};`;\n        }\n        if (telNumbers && telNumbers.length > 0) {\n            for (let i = 0; i < telNumbers.length; i++) {\n                retVal += `TEL:${telNumbers[i]};`;\n            }\n        }\n        if (email) {\n            retVal += `EMAIL:${email};`;\n        }\n        if (url) {\n            retVal += `URL:${url};`;\n        }\n        retVal += `;`;\n        return retVal;\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxKjuaComponent, NgxKjuaModule, QrCodeHelper };\n//# sourceMappingURL=ngx-kjua.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}