import { Directive, EventEmitter, HostListener, Inject, Input, Output, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { CAPTCHA_CONFIG } from './ng-hcaptcha-config';
import { loadHCaptcha } from './hcaptcha-utils';
import * as i0 from "@angular/core";
export class NgHcaptchaInvisibleButtonDirective {
    constructor(elRef, config, zone, platformId) {
        this.elRef = elRef;
        this.config = config;
        this.zone = zone;
        this.platformId = platformId;
        this.verify = new EventEmitter();
        this.expired = new EventEmitter();
        this.error = new EventEmitter();
        this.click = new EventEmitter();
    }
    ngOnInit() {
        // Use language code from module config when input parameter is not set
        if (!this.languageCode) {
            this.languageCode = this.config.languageCode;
        }
        // Do not load hCaptcha if platform is server
        if (isPlatformServer(this.platformId)) {
            return;
        }
        // Load the hCaptcha script
        this.captcha$ = loadHCaptcha(this.languageCode).subscribe(() => {
            setTimeout((context) => {
                // Configure hCaptcha
                const options = {
                    sitekey: (context.siteKey || context.config.siteKey),
                    size: 'invisible',
                    callback: (res) => { context.zone.run(() => context.onVerify(res)); },
                    'expired-callback': (res) => { context.zone.run(() => context.onExpired(res)); },
                    'error-callback': (err) => { context.zone.run(() => context.onError(err)); }
                };
                // Render hCaptcha using the defined options
                context.widgetId = window.hcaptcha.render(context.elRef.nativeElement, options);
            }, 50, this);
        });
    }
    ngOnDestroy() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.captcha$.unsubscribe();
    }
    onClick(event) {
        if (event.hCaptchaToken) {
            return;
        }
        this.lastClickEvent = event;
        event.stopPropagation();
        event.preventDefault();
        event.cancelBubble = true;
        event.stopImmediatePropagation();
        // Only execute hCaptcha if platform is browser
        if (isPlatformBrowser(this.platformId)) {
            window.hcaptcha.execute(this.widgetId);
        }
        return false;
    }
    reset() {
        window.hcaptcha.reset(this.widgetId);
    }
    /**
     * Is called when the verification was successful
     * @param response The verification token
     */
    onVerify(response) {
        const event = this.lastClickEvent || {};
        event.hCaptchaToken = response;
        this.click.emit(event);
        this.verify.emit(response);
    }
    /**
     * Is called when the verification has expired
     * @param response The verification response
     */
    onExpired(response) {
        this.expired.emit(response);
    }
    /**
     * Is called when an error occurs during the verification process
     * @param error The error returned by hCaptcha
     */
    onError(error) {
        this.error.emit(error);
    }
}
NgHcaptchaInvisibleButtonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: NgHcaptchaInvisibleButtonDirective, deps: [{ token: i0.ElementRef }, { token: CAPTCHA_CONFIG }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });
NgHcaptchaInvisibleButtonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.5", type: NgHcaptchaInvisibleButtonDirective, selector: "[ngHcaptchaInvisibleButton]", inputs: { siteKey: "siteKey", languageCode: "languageCode" }, outputs: { verify: "verify", expired: "expired", error: "error", click: "click" }, host: { listeners: { "click": "onClick($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: NgHcaptchaInvisibleButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[ngHcaptchaInvisibleButton]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [CAPTCHA_CONFIG]
                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { siteKey: [{
                type: Input
            }], languageCode: [{
                type: Input
            }], verify: [{
                type: Output
            }], expired: [{
                type: Output
            }], error: [{
                type: Output
            }], click: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,