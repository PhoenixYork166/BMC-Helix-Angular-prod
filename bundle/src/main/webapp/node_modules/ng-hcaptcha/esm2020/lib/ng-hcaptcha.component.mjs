import { Component, Input, ViewChild, Inject, Output, EventEmitter, forwardRef, PLATFORM_ID } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { CAPTCHA_CONFIG } from './ng-hcaptcha-config';
import { loadHCaptcha } from './hcaptcha-utils';
import * as i0 from "@angular/core";
export class NgHcaptchaComponent {
    constructor(config, zone, platformId) {
        this.config = config;
        this.zone = zone;
        this.platformId = platformId;
        this.verify = new EventEmitter();
        this.expired = new EventEmitter();
        this.error = new EventEmitter();
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    // Initialization
    ngOnInit() {
        // Use language code from module config when input parameter is not set
        if (!this.languageCode) {
            this.languageCode = this.config.languageCode;
        }
        // Do not load hCaptcha if platform is server
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.captcha$ = loadHCaptcha(this.languageCode).subscribe(() => {
            setTimeout((context) => {
                // Configure hCaptcha
                const options = {
                    sitekey: (context.siteKey || context.config.siteKey),
                    theme: context.theme,
                    size: context.size,
                    tabindex: context.tabIndex,
                    callback: (res) => { context.zone.run(() => context.onVerify(res)); },
                    'expired-callback': (res) => { context.zone.run(() => context.onExpired(res)); },
                    'error-callback': (err) => { context.zone.run(() => context.onError(err)); }
                };
                // Render hCaptcha using the defined options
                context.widgetId = window.hcaptcha.render(context.captcha.nativeElement, options);
            }, 50, this);
        }, (error) => {
            console.error('Failed to load hCaptcha script', error);
        });
    }
    ngOnDestroy() {
        this.captcha$.unsubscribe();
    }
    // ControlValueAccessor implementation
    writeValue(value) {
        // Needs to be implemented to make the FormGroup's reset function work
        this.value = value;
        // Reset hCaptcha.
        // We need to check whether window.hcaptcha is defined because
        // writeValue(value: any) can be called before hCaptcha has been intialized.
        if (isPlatformBrowser(this.platformId) && !this.value && window.hcaptcha) {
            window.hcaptcha.reset(this.widgetId);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    reset() {
        window.hcaptcha.reset(this.widgetId);
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.onChange(value);
        this.onTouched();
    }
    // Internal functions
    /**
     * Is called when the verification was successful
     * @param response The verification token
     */
    onVerify(response) {
        this.value = response;
        this.verify.emit(response);
    }
    /**
     * Is called when the verification has expired
     * @param response The verification response
     */
    onExpired(response) {
        this.expired.emit(response);
    }
    /**
     * Is called when an error occurs during the verification process
     * @param error The error returned by hCaptcha
     */
    onError(error) {
        this.error.emit(error);
    }
}
NgHcaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: NgHcaptchaComponent, deps: [{ token: CAPTCHA_CONFIG }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
NgHcaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.5", type: NgHcaptchaComponent, selector: "ng-hcaptcha", inputs: { siteKey: "siteKey", theme: "theme", size: "size", tabIndex: "tabIndex", languageCode: "languageCode" }, outputs: { verify: "verify", expired: "expired", error: "error" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NgHcaptchaComponent),
            multi: true
        }
    ], viewQueries: [{ propertyName: "captcha", first: true, predicate: ["captcha"], descendants: true, static: true }], ngImport: i0, template: '<div #captcha class="h-captcha"></div>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: NgHcaptchaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ng-hcaptcha',
                    template: '<div #captcha class="h-captcha"></div>',
                    styles: [],
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NgHcaptchaComponent),
                            multi: true
                        }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [CAPTCHA_CONFIG]
                }] }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { siteKey: [{
                type: Input
            }], theme: [{
                type: Input
            }], size: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], languageCode: [{
                type: Input
            }], captcha: [{
                type: ViewChild,
                args: ['captcha', { static: true }]
            }], verify: [{
                type: Output
            }], expired: [{
                type: Output
            }], error: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,