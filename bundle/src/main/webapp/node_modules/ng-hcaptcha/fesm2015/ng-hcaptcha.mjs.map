{"version":3,"file":"ng-hcaptcha.mjs","sources":["../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha-config.ts","../../../projects/ng-hcaptcha/src/lib/hcaptcha-utils.ts","../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha.component.ts","../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha-invisible-button.directive.ts","../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha.service.ts","../../../projects/ng-hcaptcha/src/lib/ng-hcaptcha.module.ts","../../../projects/ng-hcaptcha/src/public_api.ts","../../../projects/ng-hcaptcha/src/ng-hcaptcha.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport interface CaptchaConfig {\r\n    /**\r\n     * The sitekey to use when no sitekey has been\r\n     * specified on the hcaptcha element.\r\n     */\r\n    siteKey?: string;\r\n    /**\r\n     * The language code to use instead of the\r\n     * language automatically detected by hCaptcha.\r\n     * @see {@link https://docs.hcaptcha.com/languages}\r\n     */\r\n    languageCode?: string;\r\n}\r\n\r\nexport const CAPTCHA_CONFIG = new InjectionToken<CaptchaConfig>('CAPTCHA_CONFIG');\r\n","import { Observable, Subscriber } from 'rxjs';\r\n\r\ndeclare const window: any;\r\n\r\n/**\r\n * Load the hCaptcha script by appending a script element to the head element.\r\n * The script won't be loaded again if it has already been loaded.\r\n * Async and defer are set to prevent blocking the renderer while loading hCaptcha.\r\n */\r\nexport function loadHCaptcha(languageCode?: string): Observable<void> {\r\n  return new Observable<void>((observer: Subscriber<void>) => {\r\n    // No window object (ssr)\r\n    if (!window) {\r\n      return;\r\n    }\r\n\r\n    // The hCaptcha script has already been loaded\r\n    if (typeof window.hcaptcha !== 'undefined') {\r\n      observer.next();\r\n      observer.complete();\r\n      return;\r\n    }\r\n\r\n    let src = 'https://hcaptcha.com/1/api.js?render=explicit';\r\n\r\n    // Set language code\r\n    if (languageCode) {\r\n      src += `&hl=${languageCode}`;\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.src = src;\r\n    script.async = true;\r\n    script.defer = true;\r\n    script.onerror = (e) => observer.error(e);\r\n    script.onload = () => {\r\n      observer.next();\r\n      observer.complete();\r\n    };\r\n    document.head.appendChild(script);\r\n  });\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnInit,\r\n  Inject,\r\n  NgZone,\r\n  Output,\r\n  EventEmitter,\r\n  forwardRef,\r\n  PLATFORM_ID,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\r\nimport { Subscription } from 'rxjs';\r\nimport { CAPTCHA_CONFIG, CaptchaConfig } from './ng-hcaptcha-config';\r\nimport { loadHCaptcha } from './hcaptcha-utils';\r\n\r\ndeclare const window: any;\r\n\r\n@Component({\r\n  selector: 'ng-hcaptcha',\r\n  template: '<div #captcha class=\"h-captcha\"></div>',\r\n  styles: [],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NgHcaptchaComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class NgHcaptchaComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n  @Input() siteKey: string;\r\n  @Input() theme: string;\r\n  @Input() size: string;\r\n  @Input() tabIndex: number;\r\n  @Input() languageCode: string;\r\n\r\n  @ViewChild('captcha', { static: true }) captcha: ElementRef;\r\n\r\n  @Output() verify: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() expired: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private _value: string;\r\n  private widgetId: string;\r\n  private captcha$: Subscription;\r\n\r\n  onChange: any = () => {};\r\n  onTouched: any = () => {};\r\n\r\n\r\n  constructor(\r\n    @Inject(CAPTCHA_CONFIG) private config: CaptchaConfig,\r\n    private zone: NgZone,\r\n    @Inject(PLATFORM_ID) private platformId\r\n  ) {}\r\n\r\n\r\n  // Initialization\r\n\r\n  ngOnInit() {\r\n    // Use language code from module config when input parameter is not set\r\n    if (!this.languageCode) {\r\n      this.languageCode = this.config.languageCode;\r\n    }\r\n\r\n    // Do not load hCaptcha if platform is server\r\n    if (isPlatformServer(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    this.captcha$ = loadHCaptcha(this.languageCode).subscribe(\r\n      () => {\r\n        setTimeout((context) => {\r\n          // Configure hCaptcha\r\n          const options = {\r\n            sitekey: (context.siteKey || context.config.siteKey),\r\n            theme: context.theme,\r\n            size: context.size,\r\n            tabindex: context.tabIndex,\r\n            callback: (res) => { context.zone.run(() => context.onVerify(res)); },\r\n            'expired-callback': (res) => { context.zone.run(() => context.onExpired(res)); },\r\n            'error-callback': (err) => { context.zone.run(() => context.onError(err)); }\r\n          };\r\n\r\n          // Render hCaptcha using the defined options\r\n          context.widgetId = window.hcaptcha.render(context.captcha.nativeElement, options);\r\n        }, 50, this);\r\n      },\r\n      (error) => {\r\n        console.error('Failed to load hCaptcha script', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.captcha$.unsubscribe();\r\n  }\r\n\r\n  // ControlValueAccessor implementation\r\n\r\n  writeValue(value: string) {\r\n    // Needs to be implemented to make the FormGroup's reset function work\r\n    this.value = value;\r\n\r\n    // Reset hCaptcha.\r\n    // We need to check whether window.hcaptcha is defined because\r\n    // writeValue(value: any) can be called before hCaptcha has been intialized.\r\n    if (isPlatformBrowser(this.platformId) && !this.value && window.hcaptcha) {\r\n      window.hcaptcha.reset(this.widgetId);\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any) {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  reset() {\r\n    window.hcaptcha.reset(this.widgetId);\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  set value(value: string) {\r\n    this._value = value;\r\n    this.onChange(value);\r\n    this.onTouched();\r\n  }\r\n\r\n\r\n  // Internal functions\r\n\r\n  /**\r\n   * Is called when the verification was successful\r\n   * @param response The verification token\r\n   */\r\n  private onVerify(response: string) {\r\n    this.value = response;\r\n    this.verify.emit(response);\r\n  }\r\n\r\n  /**\r\n   * Is called when the verification has expired\r\n   * @param response The verification response\r\n   */\r\n  private onExpired(response: any) {\r\n    this.expired.emit(response);\r\n  }\r\n\r\n  /**\r\n   * Is called when an error occurs during the verification process\r\n   * @param error The error returned by hCaptcha\r\n   */\r\n  private onError(error: any) {\r\n    this.error.emit(error);\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID, OnDestroy } from '@angular/core';\r\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\r\nimport { Subscription } from 'rxjs';\r\nimport { CAPTCHA_CONFIG, CaptchaConfig } from './ng-hcaptcha-config';\r\nimport { loadHCaptcha } from './hcaptcha-utils';\r\n\r\ndeclare const window: any;\r\n\r\n@Directive({\r\n  selector: '[ngHcaptchaInvisibleButton]'\r\n})\r\nexport class NgHcaptchaInvisibleButtonDirective implements OnInit, OnDestroy {\r\n\r\n  @Input() siteKey: string;\r\n  @Input() languageCode: string;\r\n\r\n  @Output() verify: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() expired: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() error: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() click: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private lastClickEvent: any;\r\n  private captcha$: Subscription;\r\n  private widgetId: string;\r\n\r\n  constructor(private elRef: ElementRef,\r\n              @Inject(CAPTCHA_CONFIG) private config: CaptchaConfig,\r\n              private zone: NgZone,\r\n              @Inject(PLATFORM_ID) private platformId) { }\r\n\r\n  ngOnInit() {\r\n    // Use language code from module config when input parameter is not set\r\n    if (!this.languageCode) {\r\n      this.languageCode = this.config.languageCode;\r\n    }\r\n\r\n    // Do not load hCaptcha if platform is server\r\n    if (isPlatformServer(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    // Load the hCaptcha script\r\n    this.captcha$ = loadHCaptcha(this.languageCode).subscribe(\r\n      () => {\r\n        setTimeout((context) => {\r\n          // Configure hCaptcha\r\n          const options = {\r\n            sitekey: (context.siteKey || context.config.siteKey),\r\n            size: 'invisible',\r\n            callback: (res) => { context.zone.run(() => context.onVerify(res)); },\r\n            'expired-callback': (res) => { context.zone.run(() => context.onExpired(res)); },\r\n            'error-callback': (err) => { context.zone.run(() => context.onError(err)); }\r\n          };\r\n\r\n          // Render hCaptcha using the defined options\r\n          context.widgetId = window.hcaptcha.render(context.elRef.nativeElement, options);\r\n        }, 50, this);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (isPlatformServer(this.platformId)) {\r\n      return;\r\n    }\r\n\r\n    this.captcha$.unsubscribe();\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: any): boolean {\r\n    if (event.hCaptchaToken) {\r\n      return;\r\n    }\r\n\r\n    this.lastClickEvent = event;\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n    event.cancelBubble = true;\r\n    event.stopImmediatePropagation();\r\n\r\n    // Only execute hCaptcha if platform is browser\r\n    if (isPlatformBrowser(this.platformId)) {\r\n      window.hcaptcha.execute(this.widgetId);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  reset() {\r\n    window.hcaptcha.reset(this.widgetId);\r\n  }\r\n\r\n  /**\r\n   * Is called when the verification was successful\r\n   * @param response The verification token\r\n   */\r\n  private onVerify(response: string): void {\r\n    const event = this.lastClickEvent || {};\r\n    event.hCaptchaToken = response;\r\n    this.click.emit(event);\r\n    this.verify.emit(response);\r\n  }\r\n\r\n  /**\r\n   * Is called when the verification has expired\r\n   * @param response The verification response\r\n   */\r\n  private onExpired(response: any): void {\r\n    this.expired.emit(response);\r\n  }\r\n\r\n  /**\r\n   * Is called when an error occurs during the verification process\r\n   * @param error The error returned by hCaptcha\r\n   */\r\n  private onError(error: any): void {\r\n    this.error.emit(error);\r\n  }\r\n\r\n}\r\n","import { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable, Subscriber } from \"rxjs\";\r\nimport { loadHCaptcha } from \"./hcaptcha-utils\";\r\nimport { CaptchaConfig, CAPTCHA_CONFIG } from \"./ng-hcaptcha-config\";\r\n\r\ndeclare const window: any;\r\n\r\n@Injectable()\r\nexport class NgHcaptchaService {\r\n\r\n    private hCaptchaElement: HTMLElement;\r\n    private hCaptchaWidgetId: string;\r\n\r\n    constructor(@Inject(CAPTCHA_CONFIG) private captchaConfig: CaptchaConfig) { }\r\n\r\n    verify(): Observable<any> {\r\n        return new Observable((subscriber: Subscriber<any>) => {\r\n            loadHCaptcha(this.captchaConfig.languageCode).subscribe(() => {\r\n                setTimeout((context) => {\r\n                    // Create hCaptcha element\r\n                    if (!this.hCaptchaElement) {\r\n                        this.hCaptchaElement = document.createElement('div');\r\n                        document.body.appendChild(this.hCaptchaElement);\r\n                    }\r\n\r\n                    // Render hCaptcha using the defined options\r\n                    if (!this.hCaptchaWidgetId) {\r\n                        // Configure hCaptcha\r\n                        const options = {\r\n                            sitekey: this.captchaConfig.siteKey,\r\n                            size: 'invisible',\r\n                            callback: (res) => {\r\n                                subscriber.next(res);\r\n                                subscriber.complete();\r\n                                this.resetHcaptcha();\r\n                            },\r\n                            'expired-callback': (res) => {\r\n                                subscriber.error(res);\r\n                                this.resetHcaptcha();\r\n                            },\r\n                            'error-callback': (err) => {\r\n                                subscriber.error(err);\r\n                                this.resetHcaptcha();\r\n                            },\r\n                        };\r\n                        this.hCaptchaWidgetId = window.hcaptcha.render(this.hCaptchaElement, options);\r\n                    }\r\n\r\n                    // Immediately execute hCaptcha\r\n                    window.hcaptcha.execute(this.hCaptchaWidgetId);\r\n                }, 50, this);\r\n            });\r\n        });\r\n    }\r\n\r\n    private resetHcaptcha() {\r\n        window.hcaptcha.remove(this.hCaptchaWidgetId);\r\n        this.hCaptchaElement = null;\r\n        this.hCaptchaWidgetId = null;\r\n    }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgHcaptchaComponent } from './ng-hcaptcha.component';\r\nimport { CAPTCHA_CONFIG, CaptchaConfig } from './ng-hcaptcha-config';\r\nimport { NgHcaptchaInvisibleButtonDirective } from './ng-hcaptcha-invisible-button.directive';\r\nimport { NgHcaptchaService } from './ng-hcaptcha.service';\r\n\r\n@NgModule({\r\n  imports: [],\r\n  declarations: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective],\r\n  exports: [NgHcaptchaComponent, NgHcaptchaInvisibleButtonDirective],\r\n})\r\nexport class NgHcaptchaModule {\r\n\r\n  static forRoot(config?: CaptchaConfig): ModuleWithProviders<NgHcaptchaModule> {\r\n    return {\r\n      ngModule: NgHcaptchaModule,\r\n      providers: [\r\n        NgHcaptchaService,\r\n        {\r\n          provide: CAPTCHA_CONFIG,\r\n          useValue: config || []\r\n        },\r\n      ]\r\n    };\r\n  }\r\n\r\n}\r\n","/*\r\n * Public API Surface of ng-hcaptcha\r\n */\r\n\r\nexport * from './lib/ng-hcaptcha-config';\r\nexport * from './lib/ng-hcaptcha.component';\r\nexport * from './lib/ng-hcaptcha-invisible-button.directive';\r\nexport * from './lib/ng-hcaptcha.service';\r\nexport * from './lib/ng-hcaptcha.module';\r\nexport * from './lib/hcaptcha-utils';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}